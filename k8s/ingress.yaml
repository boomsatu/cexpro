# Nginx Ingress Controller Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cex-exchange-ingress
  namespace: cex-exchange
  labels:
    app: cex-exchange
    component: ingress
  annotations:
    # Nginx specific annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    nginx.ingress.kubernetes.io/rate-limit-requests-per-minute: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google.com https://www.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss: https:; frame-src 'self' https://www.google.com";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "Permissions-Policy: geolocation=(), microphone=(), camera=()";
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://cex.exchange, https://admin.cex.exchange"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "60"
    
    # Buffer sizes
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    
    # Client body size
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    
    # SSL configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/enable-rewrite-log: "false"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - cex.exchange
    - www.cex.exchange
    secretName: cex-exchange-tls
  - hosts:
    - admin.cex.exchange
    secretName: cex-admin-tls
  - hosts:
    - api.cex.exchange
    secretName: cex-api-tls
  - hosts:
    - ws.cex.exchange
    secretName: cex-ws-tls
  rules:
  # Main frontend application
  - host: cex.exchange
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cex-frontend-service
            port:
              number: 80
  - host: www.cex.exchange
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cex-frontend-service
            port:
              number: 80
  
  # Admin panel
  - host: admin.cex.exchange
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cex-admin-service
            port:
              number: 80
  
  # API endpoints
  - host: api.cex.exchange
    http:
      paths:
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: cex-backend-service
            port:
              number: 80
      - path: /health
        pathType: Exact
        backend:
          service:
            name: cex-backend-service
            port:
              number: 80
  
  # WebSocket connections
  - host: ws.cex.exchange
    http:
      paths:
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: cex-backend-service
            port:
              number: 81
---
# Staging Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cex-exchange-staging-ingress
  namespace: cex-exchange-staging
  labels:
    app: cex-exchange
    component: ingress
    environment: staging
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    
    # Basic auth for staging
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: staging-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Staging Environment'
    
    # Rate limiting (more restrictive for staging)
    nginx.ingress.kubernetes.io/rate-limit-connections: "50"
    nginx.ingress.kubernetes.io/rate-limit-requests-per-minute: "500"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "X-Robots-Tag: noindex, nofollow";
    
    # SSL configuration
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - staging.cex.exchange
    - staging-admin.cex.exchange
    - staging-api.cex.exchange
    - staging-ws.cex.exchange
    secretName: cex-staging-tls
  rules:
  - host: staging.cex.exchange
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cex-frontend-service
            port:
              number: 80
  - host: staging-admin.cex.exchange
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cex-admin-service
            port:
              number: 80
  - host: staging-api.cex.exchange
    http:
      paths:
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: cex-backend-service
            port:
              number: 80
  - host: staging-ws.cex.exchange
    http:
      paths:
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: cex-backend-service
            port:
              number: 81
---
# Certificate Issuers
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@cex.exchange
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: admin@cex.exchange
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx
---
# Basic Auth Secret for Staging
apiVersion: v1
kind: Secret
metadata:
  name: staging-basic-auth
  namespace: cex-exchange-staging
type: Opaque
data:
  # Username: admin, Password: staging123 (base64 encoded)
  auth: YWRtaW46JGFwcjEkSDZ1c2g4VEEkSVhsaW5lLkJhcjFmMC9IU1BxSzBF
---
# Nginx Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  # Global Nginx settings
  worker-processes: "auto"
  worker-connections: "65536"
  keepalive-timeout: "75"
  keepalive-requests: "1000"
  
  # Buffer settings
  client-body-buffer-size: "128k"
  client-header-buffer-size: "1k"
  large-client-header-buffers: "4 4k"
  client-max-body-size: "50m"
  
  # Timeout settings
  client-body-timeout: "60"
  client-header-timeout: "60"
  send-timeout: "60"
  
  # Gzip compression
  use-gzip: "true"
  gzip-level: "6"
  gzip-min-length: "1000"
  gzip-types: "text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/x-javascript image/svg+xml"
  
  # Security settings
  hide-headers: "Server,X-Powered-By"
  server-tokens: "false"
  
  # Rate limiting
  limit-req-status-code: "429"
  limit-conn-status-code: "429"
  
  # Logging
  access-log-path: "/var/log/nginx/access.log"
  error-log-path: "/var/log/nginx/error.log"
  log-format-upstream: '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] [$proxy_alternative_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id'
  
  # SSL settings
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,DHE-RSA-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384"
  ssl-prefer-server-ciphers: "true"
  ssl-session-cache: "shared:SSL:10m"
  ssl-session-timeout: "10m"
  
  # Performance optimizations
  use-http2: "true"
  http2-max-field-size: "4k"
  http2-max-header-size: "16k"
  
  # Upstream settings
  upstream-keepalive-connections: "32"
  upstream-keepalive-requests: "100"
  upstream-keepalive-timeout: "60"
  
  # Custom error pages
  custom-http-errors: "404,503"
  
  # Monitoring
  enable-vts-status: "true"
  vts-status-zone-size: "10m"