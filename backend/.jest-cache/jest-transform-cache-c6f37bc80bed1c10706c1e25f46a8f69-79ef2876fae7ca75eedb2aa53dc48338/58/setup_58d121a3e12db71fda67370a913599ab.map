{"version":3,"names":["_getJestObj","mock","sequelize","authenticate","jest","fn","mockResolvedValue","sync","close","truncate","User","findOne","create","findAll","TradingPair","Order","Balance","flushdb","quit","get","set","del","connect","connection","readyState","sendEmail","sendVerificationEmail","sendPasswordResetEmail","sendSMS","sendVerificationSMS","require","redis","mongoose","process","env","NODE_ENV","JWT_SECRET","ENCRYPTION_KEY","REDIS_URL","POSTGRES_DB","MONGODB_URI","beforeAll","console","log","force","afterAll","beforeEach","cascade","restartIdentity","global","testUtils","createTestUser","userData","defaultUser","username","email","password","firstName","lastName","emailVerified","kycLevel","status","createTestTradingPair","pairData","defaultPair","symbol","base_currency","quote_currency","min_order_size","max_order_size","tick_size","lot_size","maker_fee","taker_fee","createTestBalance","userId","currencyId","amount","user_id","currency_id","available_balance","locked_balance","total_balance","generateTestToken","jwt","sign","type","expiresIn","setTimeout"],"sources":["setup.js"],"sourcesContent":["// Mock database modules for testing\njest.mock('../src/models', () => ({\n  sequelize: {\n    authenticate: jest.fn().mockResolvedValue(true),\n    sync: jest.fn().mockResolvedValue(true),\n    close: jest.fn().mockResolvedValue(true),\n    truncate: jest.fn().mockResolvedValue(true)\n  },\n  User: {\n    findOne: jest.fn(),\n    create: jest.fn(),\n    findAll: jest.fn()\n  },\n  TradingPair: {\n    findOne: jest.fn(),\n    create: jest.fn(),\n    findAll: jest.fn()\n  },\n  Order: {\n    findOne: jest.fn(),\n    create: jest.fn(),\n    findAll: jest.fn()\n  },\n  Balance: {\n    findOne: jest.fn(),\n    create: jest.fn(),\n    findAll: jest.fn()\n  }\n}));\n\njest.mock('../src/config/redis', () => ({\n  flushdb: jest.fn().mockResolvedValue('OK'),\n  quit: jest.fn().mockResolvedValue('OK'),\n  get: jest.fn().mockResolvedValue(null),\n  set: jest.fn().mockResolvedValue('OK'),\n  del: jest.fn().mockResolvedValue(1)\n}));\n\njest.mock('mongoose', () => ({\n  connect: jest.fn().mockResolvedValue(true),\n  connection: {\n    readyState: 1,\n    close: jest.fn().mockResolvedValue(true)\n  }\n}));\n\n// Mock external services\njest.mock('../src/services/emailService', () => ({\n  sendEmail: jest.fn().mockResolvedValue(true),\n  sendVerificationEmail: jest.fn().mockResolvedValue(true),\n  sendPasswordResetEmail: jest.fn().mockResolvedValue(true)\n}));\n\njest.mock('../src/services/smsService', () => ({\n  sendSMS: jest.fn().mockResolvedValue(true),\n  sendVerificationSMS: jest.fn().mockResolvedValue(true)\n}));\n\nconst { sequelize } = require('../src/models');\nconst redis = require('../src/config/redis');\nconst mongoose = require('mongoose');\n\n// Setup test environment\nprocess.env.NODE_ENV = 'test';\nprocess.env.JWT_SECRET = 'test-jwt-secret-key-for-testing-only';\nprocess.env.ENCRYPTION_KEY = 'test-encryption-key-32-chars-long';\nprocess.env.REDIS_URL = 'redis://localhost:6379/1'; // Use different DB for tests\nprocess.env.POSTGRES_DB = 'cex_test';\nprocess.env.MONGODB_URI = 'mongodb://localhost:27017/cex_test';\n\n// Global test setup\nbeforeAll(async () => {\n  // Wait for database connections\n  await sequelize.authenticate();\n  console.log('PostgreSQL connected for testing');\n  \n  // Sync database (create tables)\n  await sequelize.sync({ force: true });\n  console.log('Test database synced');\n  \n  // Connect to MongoDB\n  if (mongoose.connection.readyState === 0) {\n    await mongoose.connect(process.env.MONGODB_URI);\n    console.log('MongoDB connected for testing');\n  }\n  \n  // Clear Redis test database\n  await redis.flushdb();\n  console.log('Redis test database cleared');\n});\n\n// Global test teardown\nafterAll(async () => {\n  // Close database connections\n  await sequelize.close();\n  await mongoose.connection.close();\n  await redis.quit();\n  console.log('Test databases disconnected');\n});\n\n// Clear data between tests\nbeforeEach(async () => {\n  // Clear Redis cache\n  await redis.flushdb();\n  \n  // Truncate all PostgreSQL tables\n  await sequelize.truncate({ cascade: true, restartIdentity: true });\n});\n\n// Test utilities\nglobal.testUtils = {\n  // Create test user\n  createTestUser: async (userData = {}) => {\n    const User = require('../src/models/User');\n    const defaultUser = {\n      username: 'testuser',\n      email: 'test@example.com',\n      password: 'TestPassword123!',\n      firstName: 'Test',\n      lastName: 'User',\n      emailVerified: true,\n      kycLevel: 1,\n      status: 'active'\n    };\n    return await User.create({ ...defaultUser, ...userData });\n  },\n  \n  // Create test trading pair\n  createTestTradingPair: async (pairData = {}) => {\n    const TradingPair = require('../src/models/TradingPair');\n    const defaultPair = {\n      symbol: 'BTC/USDT',\n      base_currency: 'BTC',\n      quote_currency: 'USDT',\n      status: 'active',\n      min_order_size: '0.001',\n      max_order_size: '1000',\n      tick_size: '0.01',\n      lot_size: '0.001',\n      maker_fee: '0.001',\n      taker_fee: '0.002'\n    };\n    return await TradingPair.create({ ...defaultPair, ...pairData });\n  },\n  \n  // Create test balance\n  createTestBalance: async (userId, currencyId, amount = '10000') => {\n    const Balance = require('../src/models/Balance');\n    return await Balance.create({\n      user_id: userId,\n      currency_id: currencyId,\n      available_balance: amount,\n      locked_balance: '0',\n      total_balance: amount\n    });\n  },\n  \n  // Generate JWT token for testing\n  generateTestToken: (userId) => {\n    const jwt = require('jsonwebtoken');\n    return jwt.sign(\n      { userId, type: 'access' },\n      process.env.JWT_SECRET,\n      { expiresIn: '1h' }\n    );\n  }\n};\n\n// Mock external services\njest.mock('../src/services/emailService', () => ({\n  sendEmail: jest.fn().mockResolvedValue(true),\n  sendVerificationEmail: jest.fn().mockResolvedValue(true),\n  sendPasswordResetEmail: jest.fn().mockResolvedValue(true)\n}));\n\njest.mock('../src/services/smsService', () => ({\n  sendSMS: jest.fn().mockResolvedValue(true),\n  sendVerificationSMS: jest.fn().mockResolvedValue(true)\n}));\n\n// Increase timeout for integration tests\njest.setTimeout(30000);"],"mappings":"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","ignoreList":[]}