{"version":3,"names":["Pool","require","mongoose","Sequelize","promisify","pgConfig","host","process","env","DB_HOST","POSTGRES_HOST","port","DB_PORT","POSTGRES_PORT","database","DB_NAME","POSTGRES_DB","user","DB_USER","POSTGRES_USER","password","DB_PASSWORD","POSTGRES_PASSWORD","max","idleTimeoutMillis","connectionTimeoutMillis","ssl","NODE_ENV","rejectUnauthorized","pgPool","sequelize","dialect","logging","console","log","pool","min","acquire","idle","mongoConfig","uri","MONGODB_URI","options","maxPoolSize","serverSelectionTimeoutMS","socketTimeoutMS","bufferCommands","on","client","err","error","exit","connectMongoDB","connect","query","text","params","start","Date","now","res","duration","rows","rowCount","transaction","callback","result","release","healthCheck","checks","postgresql","mongodb","pgResult","mongoResult","connection","db","admin","ping","ok","closeConnections","end","close","initializeDatabase","module","exports"],"sources":["database.js"],"sourcesContent":["const { Pool } = require('pg');\nconst mongoose = require('mongoose');\nconst { Sequelize } = require('sequelize');\nconst { promisify } = require('util');\n\n// PostgreSQL configuration\nconst pgConfig = {\n  host: process.env.DB_HOST || process.env.POSTGRES_HOST || 'localhost',\n  port: process.env.DB_PORT || process.env.POSTGRES_PORT || 5432,\n  database: process.env.DB_NAME || process.env.POSTGRES_DB || 'cex_db',\n  user: process.env.DB_USER || process.env.POSTGRES_USER || 'cex_user',\n  password: process.env.DB_PASSWORD || process.env.POSTGRES_PASSWORD || 'cex_password_2024',\n  max: 20, // maximum number of clients in the pool\n  idleTimeoutMillis: 30000, // how long a client is allowed to remain idle\n  connectionTimeoutMillis: 2000, // how long to wait when connecting a client\n  ssl: process.env.NODE_ENV === 'production' ? {\n    rejectUnauthorized: false\n  } : false\n};\n\n// Create PostgreSQL pool\nconst pgPool = new Pool(pgConfig);\n\n// Create Sequelize instance\nconst sequelize = new Sequelize(\n  pgConfig.database,\n  pgConfig.user,\n  pgConfig.password,\n  {\n    host: pgConfig.host,\n    port: pgConfig.port,\n    dialect: 'postgres',\n    logging: console.log, // Enable SQL query logging to see slow queries\n    pool: {\n      max: 20,\n      min: 0,\n      acquire: 30000,\n      idle: 10000\n    },\n    ssl: pgConfig.ssl\n  }\n);\n\n// MongoDB configuration\nconst mongoConfig = {\n  uri: process.env.MONGODB_URI || 'mongodb://localhost:27017/cex_exchange',\n  options: {\n    maxPoolSize: 10, // Maintain up to 10 socket connections\n    serverSelectionTimeoutMS: 5000, // Keep trying to send operations for 5 seconds\n    socketTimeoutMS: 45000, // Close sockets after 45 seconds of inactivity\n    bufferCommands: false, // Disable mongoose buffering\n  }\n};\n\n// PostgreSQL connection test\npgPool.on('connect', (client) => {\n  console.log('PostgreSQL client connected');\n});\n\npgPool.on('error', (err, client) => {\n  console.error('Unexpected error on idle PostgreSQL client', err);\n  process.exit(-1);\n});\n\n// MongoDB connection events will be set up after connection\n// This prevents issues during test initialization\n\n// Connect to MongoDB\nconst connectMongoDB = async () => {\n  try {\n    await mongoose.connect(mongoConfig.uri, mongoConfig.options);\n    console.log('MongoDB connection established');\n  } catch (error) {\n    console.error('MongoDB connection failed:', error);\n    process.exit(1);\n  }\n};\n\n// Database query helpers\nconst query = async (text, params) => {\n  const start = Date.now();\n  try {\n    const res = await pgPool.query(text, params);\n    const duration = Date.now() - start;\n    console.log('Executed query', { text, duration, rows: res.rowCount });\n    return res;\n  } catch (error) {\n    console.error('Database query error:', error);\n    throw error;\n  }\n};\n\n// Transaction helper\nconst transaction = async (callback) => {\n  const client = await pgPool.connect();\n  try {\n    await client.query('BEGIN');\n    const result = await callback(client);\n    await client.query('COMMIT');\n    return result;\n  } catch (error) {\n    await client.query('ROLLBACK');\n    throw error;\n  } finally {\n    client.release();\n  }\n};\n\n// Database health check\nconst healthCheck = async () => {\n  const checks = {\n    postgresql: false,\n    mongodb: false\n  };\n\n  try {\n    // PostgreSQL health check\n    const pgResult = await pgPool.query('SELECT NOW()');\n    checks.postgresql = !!pgResult.rows[0];\n  } catch (error) {\n    console.error('PostgreSQL health check failed:', error);\n  }\n\n  try {\n    // MongoDB health check\n    const mongoResult = await mongoose.connection.db.admin().ping();\n    checks.mongodb = mongoResult.ok === 1;\n  } catch (error) {\n    console.error('MongoDB health check failed:', error);\n  }\n\n  return checks;\n};\n\n// Graceful shutdown\nconst closeConnections = async () => {\n  try {\n    await pgPool.end();\n    console.log('PostgreSQL pool closed');\n  } catch (error) {\n    console.error('Error closing PostgreSQL pool:', error);\n  }\n\n  try {\n    await mongoose.connection.close();\n    console.log('MongoDB connection closed');\n  } catch (error) {\n    console.error('Error closing MongoDB connection:', error);\n  }\n};\n\n// Initialize database connections\nconst initializeDatabase = async () => {\n  try {\n    // Test PostgreSQL connection\n    await pgPool.query('SELECT NOW()');\n    console.log('PostgreSQL connection successful');\n\n    // Connect to MongoDB\n    await connectMongoDB();\n\n    console.log('All database connections established successfully');\n  } catch (error) {\n    console.error('Database initialization failed:', error);\n    process.exit(1);\n  }\n};\n\n// Export database utilities\nmodule.exports = {\n  pgPool,\n  mongoose,\n  sequelize,\n  query,\n  transaction,\n  healthCheck,\n  closeConnections,\n  initializeDatabase\n};\n\n// Initialize connections when module is loaded\ninitializeDatabase();"],"mappings":"AAAA,MAAM;EAAEA;AAAK,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC;AAC9B,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAM;EAAEE;AAAU,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAM;EAAEG;AAAU,CAAC,GAAGH,OAAO,CAAC,MAAM,CAAC;;AAErC;AACA,MAAMI,QAAQ,GAAG;EACfC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,OAAO,IAAIF,OAAO,CAACC,GAAG,CAACE,aAAa,IAAI,WAAW;EACrEC,IAAI,EAAEJ,OAAO,CAACC,GAAG,CAACI,OAAO,IAAIL,OAAO,CAACC,GAAG,CAACK,aAAa,IAAI,IAAI;EAC9DC,QAAQ,EAAEP,OAAO,CAACC,GAAG,CAACO,OAAO,IAAIR,OAAO,CAACC,GAAG,CAACQ,WAAW,IAAI,QAAQ;EACpEC,IAAI,EAAEV,OAAO,CAACC,GAAG,CAACU,OAAO,IAAIX,OAAO,CAACC,GAAG,CAACW,aAAa,IAAI,UAAU;EACpEC,QAAQ,EAAEb,OAAO,CAACC,GAAG,CAACa,WAAW,IAAId,OAAO,CAACC,GAAG,CAACc,iBAAiB,IAAI,mBAAmB;EACzFC,GAAG,EAAE,EAAE;EAAE;EACTC,iBAAiB,EAAE,KAAK;EAAE;EAC1BC,uBAAuB,EAAE,IAAI;EAAE;EAC/BC,GAAG,EAAEnB,OAAO,CAACC,GAAG,CAACmB,QAAQ,KAAK,YAAY,GAAG;IAC3CC,kBAAkB,EAAE;EACtB,CAAC,GAAG;AACN,CAAC;;AAED;AACA,MAAMC,MAAM,GAAG,IAAI7B,IAAI,CAACK,QAAQ,CAAC;;AAEjC;AACA,MAAMyB,SAAS,GAAG,IAAI3B,SAAS,CAC7BE,QAAQ,CAACS,QAAQ,EACjBT,QAAQ,CAACY,IAAI,EACbZ,QAAQ,CAACe,QAAQ,EACjB;EACEd,IAAI,EAAED,QAAQ,CAACC,IAAI;EACnBK,IAAI,EAAEN,QAAQ,CAACM,IAAI;EACnBoB,OAAO,EAAE,UAAU;EACnBC,OAAO,EAAEC,OAAO,CAACC,GAAG;EAAE;EACtBC,IAAI,EAAE;IACJZ,GAAG,EAAE,EAAE;IACPa,GAAG,EAAE,CAAC;IACNC,OAAO,EAAE,KAAK;IACdC,IAAI,EAAE;EACR,CAAC;EACDZ,GAAG,EAAErB,QAAQ,CAACqB;AAChB,CACF,CAAC;;AAED;AACA,MAAMa,WAAW,GAAG;EAClBC,GAAG,EAAEjC,OAAO,CAACC,GAAG,CAACiC,WAAW,IAAI,wCAAwC;EACxEC,OAAO,EAAE;IACPC,WAAW,EAAE,EAAE;IAAE;IACjBC,wBAAwB,EAAE,IAAI;IAAE;IAChCC,eAAe,EAAE,KAAK;IAAE;IACxBC,cAAc,EAAE,KAAK,CAAE;EACzB;AACF,CAAC;;AAED;AACAjB,MAAM,CAACkB,EAAE,CAAC,SAAS,EAAGC,MAAM,IAAK;EAC/Bf,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;AAC5C,CAAC,CAAC;AAEFL,MAAM,CAACkB,EAAE,CAAC,OAAO,EAAE,CAACE,GAAG,EAAED,MAAM,KAAK;EAClCf,OAAO,CAACiB,KAAK,CAAC,4CAA4C,EAAED,GAAG,CAAC;EAChE1C,OAAO,CAAC4C,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACF,MAAMlD,QAAQ,CAACmD,OAAO,CAACd,WAAW,CAACC,GAAG,EAAED,WAAW,CAACG,OAAO,CAAC;IAC5DT,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC/C,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD3C,OAAO,CAAC4C,IAAI,CAAC,CAAC,CAAC;EACjB;AACF,CAAC;;AAED;AACA,MAAMG,KAAK,GAAG,MAAAA,CAAOC,IAAI,EAAEC,MAAM,KAAK;EACpC,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EACxB,IAAI;IACF,MAAMC,GAAG,GAAG,MAAM/B,MAAM,CAACyB,KAAK,CAACC,IAAI,EAAEC,MAAM,CAAC;IAC5C,MAAMK,QAAQ,GAAGH,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK;IACnCxB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;MAAEqB,IAAI;MAAEM,QAAQ;MAAEC,IAAI,EAAEF,GAAG,CAACG;IAAS,CAAC,CAAC;IACrE,OAAOH,GAAG;EACZ,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMc,WAAW,GAAG,MAAOC,QAAQ,IAAK;EACtC,MAAMjB,MAAM,GAAG,MAAMnB,MAAM,CAACwB,OAAO,CAAC,CAAC;EACrC,IAAI;IACF,MAAML,MAAM,CAACM,KAAK,CAAC,OAAO,CAAC;IAC3B,MAAMY,MAAM,GAAG,MAAMD,QAAQ,CAACjB,MAAM,CAAC;IACrC,MAAMA,MAAM,CAACM,KAAK,CAAC,QAAQ,CAAC;IAC5B,OAAOY,MAAM;EACf,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACd,MAAMF,MAAM,CAACM,KAAK,CAAC,UAAU,CAAC;IAC9B,MAAMJ,KAAK;EACb,CAAC,SAAS;IACRF,MAAM,CAACmB,OAAO,CAAC,CAAC;EAClB;AACF,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAMC,MAAM,GAAG;IACbC,UAAU,EAAE,KAAK;IACjBC,OAAO,EAAE;EACX,CAAC;EAED,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAM3C,MAAM,CAACyB,KAAK,CAAC,cAAc,CAAC;IACnDe,MAAM,CAACC,UAAU,GAAG,CAAC,CAACE,QAAQ,CAACV,IAAI,CAAC,CAAC,CAAC;EACxC,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EACzD;EAEA,IAAI;IACF;IACA,MAAMuB,WAAW,GAAG,MAAMvE,QAAQ,CAACwE,UAAU,CAACC,EAAE,CAACC,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IAC/DR,MAAM,CAACE,OAAO,GAAGE,WAAW,CAACK,EAAE,KAAK,CAAC;EACvC,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;EACtD;EAEA,OAAOmB,MAAM;AACf,CAAC;;AAED;AACA,MAAMU,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMlD,MAAM,CAACmD,GAAG,CAAC,CAAC;IAClB/C,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;EACxD;EAEA,IAAI;IACF,MAAMhD,QAAQ,CAACwE,UAAU,CAACO,KAAK,CAAC,CAAC;IACjChD,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EAC1C,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;EAC3D;AACF,CAAC;;AAED;AACA,MAAMgC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF;IACA,MAAMrD,MAAM,CAACyB,KAAK,CAAC,cAAc,CAAC;IAClCrB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;IAE/C;IACA,MAAMkB,cAAc,CAAC,CAAC;IAEtBnB,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;EAClE,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD3C,OAAO,CAAC4C,IAAI,CAAC,CAAC,CAAC;EACjB;AACF,CAAC;;AAED;AACAgC,MAAM,CAACC,OAAO,GAAG;EACfvD,MAAM;EACN3B,QAAQ;EACR4B,SAAS;EACTwB,KAAK;EACLU,WAAW;EACXI,WAAW;EACXW,gBAAgB;EAChBG;AACF,CAAC;;AAED;AACAA,kBAAkB,CAAC,CAAC","ignoreList":[]}