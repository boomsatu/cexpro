{"version":3,"names":["cov_ob8bs8nld","actualCoverage","DataTypes","s","require","bcrypt","crypto","speakeasy","QRCode","sequelize","User","define","id","type","UUID","defaultValue","UUIDV4","primaryKey","email","STRING","allowNull","unique","validate","isEmail","username","len","isAlphanumeric","password","firstName","lastName","phoneNumber","is","dateOfBirth","DATEONLY","country","role","ENUM","status","emailVerified","BOOLEAN","phoneVerified","kycLevel","INTEGER","min","max","twoFactorEnabled","twoFactorSecret","backupCodes","JSON","lastLoginAt","DATE","lastLoginIp","INET","loginAttempts","lockUntil","passwordResetToken","passwordResetExpires","emailVerificationToken","emailVerificationExpires","preferences","language","timezone","currency","notifications","sms","push","trading","security","marketing","metadata","tradingLevel","riskTolerance","maxDailyTradingVolume","DECIMAL","maxPositionSize","marginTradingEnabled","apiTradingEnabled","referralCode","referredBy","references","model","key","totalTradingVolume","totalTrades","lastTradeAt","vipLevel","makerFeeRate","takerFeeRate","tableName","timestamps","paranoid","underscored","createdAt","updatedAt","deletedAt","indexes","fields","prototype","comparePassword","candidatePassword","f","compare","isLocked","b","Date","now","incLoginAttempts","update","updates","resetLoginAttempts","generatePasswordResetToken","token","randomBytes","toString","createHash","digest","generateEmailVerificationToken","setup2FA","secret","generateSecret","name","issuer","length","base32","verify2FA","totp","verify","encoding","window","generateBackupCodes","codes","i","toUpperCase","useBackupCode","code","includes","updatedCodes","filter","c","generate2FAQRCode","Error","otpauthUrl","otpauthURL","label","toDataURL","toJSON","values","Object","assign","get","findByEmailOrUsername","identifier","findOne","where","Sequelize","Op","or","findByPasswordResetToken","hashedToken","gt","findByEmailVerificationToken","beforeCreate","user","salt","genSalt","hash","beforeUpdate","changed","module","exports"],"sources":["User.js"],"sourcesContent":["const { DataTypes } = require('sequelize');\nconst bcrypt = require('bcryptjs');\nconst crypto = require('crypto');\nconst speakeasy = require('speakeasy');\nconst QRCode = require('qrcode');\nconst { sequelize } = require('../config/database');\n\n// User model definition\nconst User = sequelize.define('User', {\n  id: {\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n    primaryKey: true\n  },\n  email: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    unique: true,\n    validate: {\n      isEmail: true\n    }\n  },\n  username: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    unique: true,\n    validate: {\n      len: [3, 30],\n      isAlphanumeric: true\n    }\n  },\n  password: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    validate: {\n      len: [8, 128]\n    }\n  },\n  firstName: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    validate: {\n      len: [1, 50]\n    }\n  },\n  lastName: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    validate: {\n      len: [1, 50]\n    }\n  },\n  phoneNumber: {\n    type: DataTypes.STRING,\n    allowNull: true,\n    validate: {\n      is: /^\\+?[1-9]\\d{1,14}$/\n    }\n  },\n  dateOfBirth: {\n    type: DataTypes.DATEONLY,\n    allowNull: true\n  },\n  country: {\n    type: DataTypes.STRING(2),\n    allowNull: true,\n    validate: {\n      len: [2, 2]\n    }\n  },\n  role: {\n    type: DataTypes.ENUM('user', 'admin', 'moderator', 'support'),\n    defaultValue: 'user'\n  },\n  status: {\n    type: DataTypes.ENUM('pending', 'active', 'suspended', 'banned'),\n    defaultValue: 'pending'\n  },\n  emailVerified: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false\n  },\n  phoneVerified: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false\n  },\n  kycLevel: {\n    type: DataTypes.INTEGER,\n    defaultValue: 0,\n    validate: {\n      min: 0,\n      max: 3\n    }\n  },\n  twoFactorEnabled: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false\n  },\n  twoFactorSecret: {\n    type: DataTypes.STRING,\n    allowNull: true\n  },\n  backupCodes: {\n    type: DataTypes.JSON,\n    allowNull: true\n  },\n  lastLoginAt: {\n    type: DataTypes.DATE,\n    allowNull: true\n  },\n  lastLoginIp: {\n    type: DataTypes.INET,\n    allowNull: true\n  },\n  loginAttempts: {\n    type: DataTypes.INTEGER,\n    defaultValue: 0\n  },\n  lockUntil: {\n    type: DataTypes.DATE,\n    allowNull: true\n  },\n  passwordResetToken: {\n    type: DataTypes.STRING,\n    allowNull: true\n  },\n  passwordResetExpires: {\n    type: DataTypes.DATE,\n    allowNull: true\n  },\n  emailVerificationToken: {\n    type: DataTypes.STRING,\n    allowNull: true\n  },\n  emailVerificationExpires: {\n    type: DataTypes.DATE,\n    allowNull: true\n  },\n  preferences: {\n    type: DataTypes.JSON,\n    defaultValue: {\n      language: 'en',\n      timezone: 'UTC',\n      currency: 'USD',\n      notifications: {\n        email: true,\n        sms: false,\n        push: true,\n        trading: true,\n        security: true,\n        marketing: false\n      }\n    }\n  },\n  metadata: {\n    type: DataTypes.JSON,\n    defaultValue: {}\n  },\n  // Enhanced fields\n  tradingLevel: {\n    type: DataTypes.ENUM('beginner', 'intermediate', 'advanced', 'professional'),\n    defaultValue: 'beginner'\n  },\n  riskTolerance: {\n    type: DataTypes.ENUM('low', 'medium', 'high'),\n    defaultValue: 'medium'\n  },\n  maxDailyTradingVolume: {\n    type: DataTypes.DECIMAL(20, 8),\n    allowNull: true\n  },\n  maxPositionSize: {\n    type: DataTypes.DECIMAL(20, 8),\n    allowNull: true\n  },\n  marginTradingEnabled: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false\n  },\n  apiTradingEnabled: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false\n  },\n  referralCode: {\n    type: DataTypes.STRING(20),\n    allowNull: true,\n    unique: true\n  },\n  referredBy: {\n    type: DataTypes.UUID,\n    allowNull: true,\n    references: {\n      model: 'users',\n      key: 'id'\n    }\n  },\n  totalTradingVolume: {\n    type: DataTypes.DECIMAL(30, 8),\n    defaultValue: 0\n  },\n  totalTrades: {\n    type: DataTypes.INTEGER,\n    defaultValue: 0\n  },\n  lastTradeAt: {\n    type: DataTypes.DATE,\n    allowNull: true\n  },\n  vipLevel: {\n    type: DataTypes.INTEGER,\n    defaultValue: 0,\n    validate: {\n      min: 0,\n      max: 10\n    }\n  },\n  makerFeeRate: {\n    type: DataTypes.DECIMAL(5, 4),\n    defaultValue: 0.001\n  },\n  takerFeeRate: {\n    type: DataTypes.DECIMAL(5, 4),\n    defaultValue: 0.001\n  }\n}, {\n  tableName: 'users',\n  timestamps: true,\n  paranoid: true, // Soft delete\n  underscored: true, // Use snake_case for column names\n  createdAt: 'created_at',\n  updatedAt: 'updated_at',\n  deletedAt: 'deleted_at',\n  indexes: [\n    {\n      unique: true,\n      fields: ['email']\n    },\n    {\n      unique: true,\n      fields: ['username']\n    },\n    {\n      fields: ['status']\n    },\n    {\n      fields: ['role']\n    },\n    {\n      fields: ['kyc_level']\n    },\n    {\n      fields: ['created_at']\n    }\n  ]\n});\n\n// Instance methods\nUser.prototype.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\nUser.prototype.isLocked = function() {\n  return !!(this.lockUntil && this.lockUntil > Date.now());\n};\n\nUser.prototype.incLoginAttempts = async function() {\n  // If we have a previous lock that has expired, restart at 1\n  if (this.lockUntil && this.lockUntil < Date.now()) {\n    return this.update({\n      loginAttempts: 1,\n      lockUntil: null\n    });\n  }\n  \n  const updates = { loginAttempts: this.loginAttempts + 1 };\n  \n  // Lock account after 5 failed attempts for 2 hours\n  if (this.loginAttempts + 1 >= 5 && !this.isLocked()) {\n    updates.lockUntil = Date.now() + 2 * 60 * 60 * 1000; // 2 hours\n  }\n  \n  return this.update(updates);\n};\n\nUser.prototype.resetLoginAttempts = async function() {\n  return this.update({\n    loginAttempts: 0,\n    lockUntil: null\n  });\n};\n\nUser.prototype.generatePasswordResetToken = function() {\n  const token = crypto.randomBytes(32).toString('hex');\n  this.passwordResetToken = crypto.createHash('sha256').update(token).digest('hex');\n  this.passwordResetExpires = Date.now() + 10 * 60 * 1000; // 10 minutes\n  return token;\n};\n\nUser.prototype.generateEmailVerificationToken = function() {\n  const token = crypto.randomBytes(32).toString('hex');\n  this.emailVerificationToken = crypto.createHash('sha256').update(token).digest('hex');\n  this.emailVerificationExpires = Date.now() + 24 * 60 * 60 * 1000; // 24 hours\n  return token;\n};\n\nUser.prototype.setup2FA = function() {\n  const secret = speakeasy.generateSecret({\n    name: `CEX Exchange (${this.email})`,\n    issuer: 'CEX Exchange',\n    length: 32\n  });\n  \n  this.twoFactorSecret = secret.base32;\n  return secret;\n};\n\nUser.prototype.verify2FA = function(token) {\n  if (!this.twoFactorSecret) {\n    return false;\n  }\n  \n  return speakeasy.totp.verify({\n    secret: this.twoFactorSecret,\n    encoding: 'base32',\n    token: token,\n    window: 2 // Allow 2 time steps (60 seconds) of variance\n  });\n};\n\nUser.prototype.generateBackupCodes = function() {\n  const codes = [];\n  for (let i = 0; i < 10; i++) {\n    codes.push(crypto.randomBytes(4).toString('hex').toUpperCase());\n  }\n  this.backupCodes = codes;\n  return codes;\n};\n\nUser.prototype.useBackupCode = async function(code) {\n  if (!this.backupCodes || !this.backupCodes.includes(code.toUpperCase())) {\n    return false;\n  }\n  \n  const updatedCodes = this.backupCodes.filter(c => c !== code.toUpperCase());\n  await this.update({ backupCodes: updatedCodes });\n  return true;\n};\n\nUser.prototype.generate2FAQRCode = async function() {\n  if (!this.twoFactorSecret) {\n    throw new Error('2FA secret not generated');\n  }\n  \n  const otpauthUrl = speakeasy.otpauthURL({\n    secret: this.twoFactorSecret,\n    label: this.email,\n    issuer: 'CEX Exchange',\n    encoding: 'base32'\n  });\n  \n  return QRCode.toDataURL(otpauthUrl);\n};\n\nUser.prototype.toJSON = function() {\n  const values = Object.assign({}, this.get());\n  \n  // Remove sensitive fields\n  delete values.password;\n  delete values.twoFactorSecret;\n  delete values.backupCodes;\n  delete values.passwordResetToken;\n  delete values.emailVerificationToken;\n  \n  return values;\n};\n\n// Static methods\nUser.findByEmailOrUsername = function(identifier) {\n  return this.findOne({\n    where: {\n      [sequelize.Sequelize.Op.or]: [\n        { email: identifier },\n        { username: identifier }\n      ]\n    }\n  });\n};\n\nUser.findByPasswordResetToken = function(token) {\n  const hashedToken = crypto.createHash('sha256').update(token).digest('hex');\n  return this.findOne({\n    where: {\n      passwordResetToken: hashedToken,\n      passwordResetExpires: {\n        [sequelize.Sequelize.Op.gt]: Date.now()\n      }\n    }\n  });\n};\n\nUser.findByEmailVerificationToken = function(token) {\n  const hashedToken = crypto.createHash('sha256').update(token).digest('hex');\n  return this.findOne({\n    where: {\n      emailVerificationToken: hashedToken,\n      emailVerificationExpires: {\n        [sequelize.Sequelize.Op.gt]: Date.now()\n      }\n    }\n  });\n};\n\n// Hooks\nUser.beforeCreate(async (user) => {\n  if (user.password) {\n    const salt = await bcrypt.genSalt(12);\n    user.password = await bcrypt.hash(user.password, salt);\n  }\n});\n\nUser.beforeUpdate(async (user) => {\n  if (user.changed('password')) {\n    const salt = await bcrypt.genSalt(12);\n    user.password = await bcrypt.hash(user.password, salt);\n  }\n});\n\nmodule.exports = User;"],"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","ignoreList":[]}