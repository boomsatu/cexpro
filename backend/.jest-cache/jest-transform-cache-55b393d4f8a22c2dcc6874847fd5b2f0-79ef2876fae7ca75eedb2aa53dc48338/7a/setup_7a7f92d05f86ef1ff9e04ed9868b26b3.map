{"version":3,"names":["_getJestObj","mock","sendEmail","jest","fn","mockResolvedValue","sendVerificationEmail","sendPasswordResetEmail","sendSMS","sendVerificationSMS","require","sequelize","redis","mongoose","process","env","NODE_ENV","JWT_SECRET","ENCRYPTION_KEY","REDIS_URL","POSTGRES_DB","MONGODB_URI","beforeAll","authenticate","console","log","sync","force","connection","readyState","connect","flushdb","afterAll","close","quit","beforeEach","truncate","cascade","restartIdentity","global","testUtils","createTestUser","userData","User","defaultUser","username","email","password","first_name","last_name","email_verified","kyc_status","status","create","createTestTradingPair","pairData","TradingPair","defaultPair","symbol","base_currency","quote_currency","min_order_size","max_order_size","tick_size","lot_size","maker_fee","taker_fee","createTestBalance","userId","currency","amount","Balance","user_id","available_balance","locked_balance","total_balance","generateTestToken","jwt","sign","type","expiresIn","setTimeout"],"sources":["setup.js"],"sourcesContent":["const { sequelize } = require('../src/models');\nconst redis = require('../src/config/redis');\nconst mongoose = require('mongoose');\n\n// Setup test environment\nprocess.env.NODE_ENV = 'test';\nprocess.env.JWT_SECRET = 'test-jwt-secret-key-for-testing-only';\nprocess.env.ENCRYPTION_KEY = 'test-encryption-key-32-chars-long';\nprocess.env.REDIS_URL = 'redis://localhost:6379/1'; // Use different DB for tests\nprocess.env.POSTGRES_DB = 'cex_test';\nprocess.env.MONGODB_URI = 'mongodb://localhost:27017/cex_test';\n\n// Global test setup\nbeforeAll(async () => {\n  // Wait for database connections\n  await sequelize.authenticate();\n  console.log('PostgreSQL connected for testing');\n  \n  // Sync database (create tables)\n  await sequelize.sync({ force: true });\n  console.log('Test database synced');\n  \n  // Connect to MongoDB\n  if (mongoose.connection.readyState === 0) {\n    await mongoose.connect(process.env.MONGODB_URI);\n    console.log('MongoDB connected for testing');\n  }\n  \n  // Clear Redis test database\n  await redis.flushdb();\n  console.log('Redis test database cleared');\n});\n\n// Global test teardown\nafterAll(async () => {\n  // Close database connections\n  await sequelize.close();\n  await mongoose.connection.close();\n  await redis.quit();\n  console.log('Test databases disconnected');\n});\n\n// Clear data between tests\nbeforeEach(async () => {\n  // Clear Redis cache\n  await redis.flushdb();\n  \n  // Truncate all PostgreSQL tables\n  await sequelize.truncate({ cascade: true, restartIdentity: true });\n});\n\n// Test utilities\nglobal.testUtils = {\n  // Create test user\n  createTestUser: async (userData = {}) => {\n    const User = require('../src/models/User');\n    const defaultUser = {\n      username: 'testuser',\n      email: 'test@example.com',\n      password: 'TestPassword123!',\n      first_name: 'Test',\n      last_name: 'User',\n      email_verified: true,\n      kyc_status: 'verified',\n      status: 'active'\n    };\n    return await User.create({ ...defaultUser, ...userData });\n  },\n  \n  // Create test trading pair\n  createTestTradingPair: async (pairData = {}) => {\n    const TradingPair = require('../src/models/TradingPair');\n    const defaultPair = {\n      symbol: 'BTC/USDT',\n      base_currency: 'BTC',\n      quote_currency: 'USDT',\n      status: 'active',\n      min_order_size: '0.001',\n      max_order_size: '1000',\n      tick_size: '0.01',\n      lot_size: '0.001',\n      maker_fee: '0.001',\n      taker_fee: '0.002'\n    };\n    return await TradingPair.create({ ...defaultPair, ...pairData });\n  },\n  \n  // Create test balance\n  createTestBalance: async (userId, currency = 'USDT', amount = '10000') => {\n    const Balance = require('../src/models/Balance');\n    return await Balance.create({\n      user_id: userId,\n      currency,\n      available_balance: amount,\n      locked_balance: '0',\n      total_balance: amount\n    });\n  },\n  \n  // Generate JWT token for testing\n  generateTestToken: (userId) => {\n    const jwt = require('jsonwebtoken');\n    return jwt.sign(\n      { userId, type: 'access' },\n      process.env.JWT_SECRET,\n      { expiresIn: '1h' }\n    );\n  }\n};\n\n// Mock external services\njest.mock('../src/services/emailService', () => ({\n  sendEmail: jest.fn().mockResolvedValue(true),\n  sendVerificationEmail: jest.fn().mockResolvedValue(true),\n  sendPasswordResetEmail: jest.fn().mockResolvedValue(true)\n}));\n\njest.mock('../src/services/smsService', () => ({\n  sendSMS: jest.fn().mockResolvedValue(true),\n  sendVerificationSMS: jest.fn().mockResolvedValue(true)\n}));\n\n// Increase timeout for integration tests\njest.setTimeout(30000);"],"mappings":"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","ignoreList":[]}