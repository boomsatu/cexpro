{"version":3,"names":["request","require","app","User","bcrypt","jwt","describe","it","userData","username","email","password","first_name","last_name","response","post","send","expect","body","success","toBe","message","toContain","data","user","toBeUndefined","findOne","where","toBeTruthy","email_verified","status","errors","toBeDefined","testUtils","createTestUser","testUser","beforeEach","hash","loginData","access_token","refresh_token","id","decoded","verify","process","env","JWT_SECRET","userId","unverifiedUser","suspendedUser","refreshToken","sign","type","expiresIn","expiredToken","accessToken","generateTestToken","set","reload","password_reset_token","password_reset_expires","i"],"sources":["auth.test.js"],"sourcesContent":["const request = require('supertest');\nconst app = require('../../src/server');\nconst { User } = require('../../src/models');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\n\ndescribe('Authentication API Integration Tests', () => {\n  describe('POST /api/auth/register', () => {\n    it('should register a new user successfully', async () => {\n      const userData = {\n        username: 'newuser',\n        email: 'newuser@example.com',\n        password: 'SecurePassword123!',\n        first_name: 'New',\n        last_name: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('registered successfully');\n      expect(response.body.data.user.email).toBe(userData.email);\n      expect(response.body.data.user.username).toBe(userData.username);\n      expect(response.body.data.user.password).toBeUndefined();\n\n      // Verify user was created in database\n      const user = await User.findOne({ where: { email: userData.email } });\n      expect(user).toBeTruthy();\n      expect(user.email_verified).toBe(false);\n      expect(user.status).toBe('pending');\n    });\n\n    it('should reject registration with invalid email', async () => {\n      const userData = {\n        username: 'testuser',\n        email: 'invalid-email',\n        password: 'SecurePassword123!',\n        first_name: 'Test',\n        last_name: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.errors).toBeDefined();\n    });\n\n    it('should reject registration with weak password', async () => {\n      const userData = {\n        username: 'testuser',\n        email: 'test@example.com',\n        password: '123',\n        first_name: 'Test',\n        last_name: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.errors).toBeDefined();\n    });\n\n    it('should reject duplicate email registration', async () => {\n      // Create first user\n      await testUtils.createTestUser({ email: 'duplicate@example.com' });\n\n      const userData = {\n        username: 'newuser',\n        email: 'duplicate@example.com',\n        password: 'SecurePassword123!',\n        first_name: 'New',\n        last_name: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(409);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('already exists');\n    });\n  });\n\n  describe('POST /api/auth/login', () => {\n    let testUser;\n\n    beforeEach(async () => {\n      testUser = await testUtils.createTestUser({\n        email: 'login@example.com',\n        password: await bcrypt.hash('TestPassword123!', 12)\n      });\n    });\n\n    it('should login with valid credentials', async () => {\n      const loginData = {\n        email: 'login@example.com',\n        password: 'TestPassword123!'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.access_token).toBeDefined();\n      expect(response.body.data.refresh_token).toBeDefined();\n      expect(response.body.data.user.id).toBe(testUser.id);\n      expect(response.body.data.user.password).toBeUndefined();\n\n      // Verify JWT token\n      const decoded = jwt.verify(response.body.data.access_token, process.env.JWT_SECRET);\n      expect(decoded.userId).toBe(testUser.id);\n    });\n\n    it('should reject login with invalid email', async () => {\n      const loginData = {\n        email: 'nonexistent@example.com',\n        password: 'TestPassword123!'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('Invalid credentials');\n    });\n\n    it('should reject login with invalid password', async () => {\n      const loginData = {\n        email: 'login@example.com',\n        password: 'WrongPassword123!'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('Invalid credentials');\n    });\n\n    it('should reject login for unverified user', async () => {\n      const unverifiedUser = await testUtils.createTestUser({\n        email: 'unverified@example.com',\n        password: await bcrypt.hash('TestPassword123!', 12),\n        email_verified: false\n      });\n\n      const loginData = {\n        email: 'unverified@example.com',\n        password: 'TestPassword123!'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('email verification');\n    });\n\n    it('should reject login for suspended user', async () => {\n      const suspendedUser = await testUtils.createTestUser({\n        email: 'suspended@example.com',\n        password: await bcrypt.hash('TestPassword123!', 12),\n        status: 'suspended'\n      });\n\n      const loginData = {\n        email: 'suspended@example.com',\n        password: 'TestPassword123!'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(403);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('suspended');\n    });\n  });\n\n  describe('POST /api/auth/refresh', () => {\n    let testUser, refreshToken;\n\n    beforeEach(async () => {\n      testUser = await testUtils.createTestUser();\n      \n      // Generate refresh token\n      refreshToken = jwt.sign(\n        { userId: testUser.id, type: 'refresh' },\n        process.env.JWT_SECRET,\n        { expiresIn: '7d' }\n      );\n    });\n\n    it('should refresh access token with valid refresh token', async () => {\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .send({ refresh_token: refreshToken })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.access_token).toBeDefined();\n      expect(response.body.data.refresh_token).toBeDefined();\n\n      // Verify new access token\n      const decoded = jwt.verify(response.body.data.access_token, process.env.JWT_SECRET);\n      expect(decoded.userId).toBe(testUser.id);\n      expect(decoded.type).toBe('access');\n    });\n\n    it('should reject invalid refresh token', async () => {\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .send({ refresh_token: 'invalid-token' })\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('Invalid refresh token');\n    });\n\n    it('should reject expired refresh token', async () => {\n      const expiredToken = jwt.sign(\n        { userId: testUser.id, type: 'refresh' },\n        process.env.JWT_SECRET,\n        { expiresIn: '-1h' }\n      );\n\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .send({ refresh_token: expiredToken })\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('expired');\n    });\n  });\n\n  describe('POST /api/auth/logout', () => {\n    let testUser, accessToken;\n\n    beforeEach(async () => {\n      testUser = await testUtils.createTestUser();\n      accessToken = testUtils.generateTestToken(testUser.id);\n    });\n\n    it('should logout successfully with valid token', async () => {\n      const response = await request(app)\n        .post('/api/auth/logout')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('logged out');\n    });\n\n    it('should reject logout without token', async () => {\n      const response = await request(app)\n        .post('/api/auth/logout')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('token');\n    });\n  });\n\n  describe('POST /api/auth/forgot-password', () => {\n    let testUser;\n\n    beforeEach(async () => {\n      testUser = await testUtils.createTestUser({ email: 'forgot@example.com' });\n    });\n\n    it('should send password reset email for valid email', async () => {\n      const response = await request(app)\n        .post('/api/auth/forgot-password')\n        .send({ email: 'forgot@example.com' })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('reset email sent');\n\n      // Verify reset token was created\n      await testUser.reload();\n      expect(testUser.password_reset_token).toBeDefined();\n      expect(testUser.password_reset_expires).toBeDefined();\n    });\n\n    it('should return success even for non-existent email (security)', async () => {\n      const response = await request(app)\n        .post('/api/auth/forgot-password')\n        .send({ email: 'nonexistent@example.com' })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('reset email sent');\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should enforce rate limiting on login attempts', async () => {\n      const loginData = {\n        email: 'test@example.com',\n        password: 'WrongPassword123!'\n      };\n\n      // Make multiple failed login attempts\n      for (let i = 0; i < 5; i++) {\n        await request(app)\n          .post('/api/auth/login')\n          .send(loginData);\n      }\n\n      // Next attempt should be rate limited\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(429);\n\n      expect(response.body.message).toContain('Too many requests');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}