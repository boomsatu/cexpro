{"version":3,"names":["cov_1maipjbvre","actualCoverage","DataTypes","s","require","sequelize","User","Market","RiskLimit","define","id","type","UUID","defaultValue","UUIDV4","primaryKey","user_id","allowNull","references","model","key","comment","trading_pair_id","limit_type","ENUM","scope","limit_value","DECIMAL","warning_threshold","current_usage","time_window","reset_time","DATE","is_active","BOOLEAN","is_breached","breach_action","breach_count","INTEGER","last_breach_at","breach_details","JSONB","priority","override_allowed","override_reason","TEXT","override_by","override_expires_at","description","tags","ARRAY","STRING","metadata","created_at","NOW","updated_at","tableName","timestamps","createdAt","updatedAt","indexes","fields","unique","validate","limitValuePositive","f","parseFloat","b","Error","warningThresholdValid","scopeConsistency","belongsTo","foreignKey","as","prototype","getUsagePercentage","getRemainingCapacity","Math","max","isWarningTriggered","isLimitExceeded","canAccommodate","additionalUsage","newUsage","updateUsage","transaction","oldUsage","wasBreached","isNowBreached","Date","previous_usage","new_usage","breach_time","breach_type","save","resetUsage","calculateNextResetTime","now","timeWindowMap","intervalMs","getTime","applyOverride","overrideBy","reason","expiresAt","isOverrideActive","checkLimits","userId","tradingPairId","limitTypes","where","Op","or","push","in","findAll","order","getBreachedLimits","include","resetExpiredLimits","expiredLimits","lte","resetPromises","map","limit","Promise","all","createUserLimits","limitConfig","limits","config","create","validateTrade","tradeAmount","tradeType","violations","limit_id","requested_amount","allowed","length","module","exports"],"sources":["RiskLimit.js"],"sourcesContent":["const { DataTypes } = require('sequelize');\nconst { sequelize } = require('../config/database');\nconst User = require('./User');\nconst Market = require('./Market');\n\n/**\n * Model RiskLimit untuk mengelola batas risiko trading\n * Mengatur exposure limits, position limits, dan trading restrictions\n */\nconst RiskLimit = sequelize.define('RiskLimit', {\n  id: {\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n    primaryKey: true\n  },\n  \n  // Foreign keys\n  user_id: {\n    type: DataTypes.UUID,\n    allowNull: true,\n    references: {\n      model: 'users',\n      key: 'id'\n    },\n    comment: 'User reference (null for global limits)'\n  },\n  \n  trading_pair_id: {\n    type: DataTypes.UUID,\n    allowNull: true,\n    references: {\n      model: 'trading_pairs',\n      key: 'id'\n    },\n    comment: 'Trading pair reference (null for all pairs)'\n  },\n  \n  // Limit configuration\n  limit_type: {\n    type: DataTypes.ENUM(\n      'daily_volume',\n      'daily_trades',\n      'position_size',\n      'open_orders',\n      'margin_exposure',\n      'leverage',\n      'concentration',\n      'drawdown',\n      'var_limit',\n      'notional_limit'\n    ),\n    allowNull: false,\n    comment: 'Type of risk limit'\n  },\n  \n  scope: {\n    type: DataTypes.ENUM('global', 'user', 'pair', 'user_pair'),\n    allowNull: false,\n    defaultValue: 'user',\n    comment: 'Scope of the limit application'\n  },\n  \n  // Limit values\n  limit_value: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: false,\n    comment: 'Maximum allowed value'\n  },\n  \n  warning_threshold: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Warning threshold (percentage of limit)'\n  },\n  \n  current_usage: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Current usage amount'\n  },\n  \n  // Time-based limits\n  time_window: {\n    type: DataTypes.ENUM('1m', '5m', '15m', '1h', '4h', '1d', '7d', '30d'),\n    allowNull: true,\n    comment: 'Time window for the limit (null for static limits)'\n  },\n  \n  reset_time: {\n    type: DataTypes.DATE,\n    allowNull: true,\n    comment: 'When the limit usage resets'\n  },\n  \n  // Status and enforcement\n  is_active: {\n    type: DataTypes.BOOLEAN,\n    allowNull: false,\n    defaultValue: true,\n    comment: 'Whether the limit is active'\n  },\n  \n  is_breached: {\n    type: DataTypes.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n    comment: 'Whether the limit is currently breached'\n  },\n  \n  breach_action: {\n    type: DataTypes.ENUM('warn', 'block', 'reduce', 'liquidate'),\n    allowNull: false,\n    defaultValue: 'warn',\n    comment: 'Action to take when limit is breached'\n  },\n  \n  // Breach tracking\n  breach_count: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Number of times limit has been breached'\n  },\n  \n  last_breach_at: {\n    type: DataTypes.DATE,\n    allowNull: true,\n    comment: 'When the limit was last breached'\n  },\n  \n  breach_details: {\n    type: DataTypes.JSONB,\n    allowNull: true,\n    comment: 'Details about the breach incident'\n  },\n  \n  // Configuration\n  priority: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n    defaultValue: 1,\n    comment: 'Priority level (higher number = higher priority)'\n  },\n  \n  override_allowed: {\n    type: DataTypes.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n    comment: 'Whether manual override is allowed'\n  },\n  \n  override_reason: {\n    type: DataTypes.TEXT,\n    allowNull: true,\n    comment: 'Reason for override (if applicable)'\n  },\n  \n  override_by: {\n    type: DataTypes.UUID,\n    allowNull: true,\n    comment: 'User who authorized the override'\n  },\n  \n  override_expires_at: {\n    type: DataTypes.DATE,\n    allowNull: true,\n    comment: 'When the override expires'\n  },\n  \n  // Metadata\n  description: {\n    type: DataTypes.TEXT,\n    allowNull: true,\n    comment: 'Description of the risk limit'\n  },\n  \n  tags: {\n    type: DataTypes.ARRAY(DataTypes.STRING),\n    allowNull: true,\n    comment: 'Tags for categorization'\n  },\n  \n  metadata: {\n    type: DataTypes.JSONB,\n    allowNull: true,\n    comment: 'Additional metadata'\n  },\n  \n  // Timestamps\n  created_at: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW,\n    allowNull: false\n  },\n  \n  updated_at: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW,\n    allowNull: false\n  }\n}, {\n  tableName: 'risk_limits',\n  timestamps: true,\n  createdAt: 'created_at',\n  updatedAt: 'updated_at',\n  indexes: [\n    {\n      fields: ['user_id', 'limit_type']\n    },\n    {\n      fields: ['trading_pair_id', 'limit_type']\n    },\n    {\n      fields: ['user_id', 'trading_pair_id', 'limit_type'],\n      unique: true\n    },\n    {\n      fields: ['scope', 'limit_type']\n    },\n    {\n      fields: ['is_active']\n    },\n    {\n      fields: ['is_breached']\n    },\n    {\n      fields: ['priority']\n    },\n    {\n      fields: ['reset_time']\n    },\n    {\n      fields: ['last_breach_at']\n    }\n  ],\n  validate: {\n    limitValuePositive() {\n      if (parseFloat(this.limit_value) <= 0) {\n        throw new Error('Limit value must be positive');\n      }\n    },\n    warningThresholdValid() {\n      if (this.warning_threshold && parseFloat(this.warning_threshold) >= parseFloat(this.limit_value)) {\n        throw new Error('Warning threshold must be less than limit value');\n      }\n    },\n    scopeConsistency() {\n      if (this.scope === 'user' && !this.user_id) {\n        throw new Error('User ID required for user scope');\n      }\n      if (this.scope === 'pair' && !this.trading_pair_id) {\n        throw new Error('Trading pair ID required for pair scope');\n      }\n      if (this.scope === 'user_pair' && (!this.user_id || !this.trading_pair_id)) {\n        throw new Error('Both user ID and trading pair ID required for user_pair scope');\n      }\n    }\n  }\n});\n\n// Associations\nRiskLimit.belongsTo(User, { foreignKey: 'user_id', as: 'user' });\n// Associations are defined in models/index.js\nRiskLimit.belongsTo(User, { foreignKey: 'override_by', as: 'overrideUser' });\n\n// Instance methods\nRiskLimit.prototype.getUsagePercentage = function() {\n  if (parseFloat(this.limit_value) === 0) return 0;\n  return (parseFloat(this.current_usage) / parseFloat(this.limit_value)) * 100;\n};\n\nRiskLimit.prototype.getRemainingCapacity = function() {\n  return Math.max(0, parseFloat(this.limit_value) - parseFloat(this.current_usage));\n};\n\nRiskLimit.prototype.isWarningTriggered = function() {\n  if (!this.warning_threshold) return false;\n  return parseFloat(this.current_usage) >= parseFloat(this.warning_threshold);\n};\n\nRiskLimit.prototype.isLimitExceeded = function() {\n  return parseFloat(this.current_usage) >= parseFloat(this.limit_value);\n};\n\nRiskLimit.prototype.canAccommodate = function(additionalUsage) {\n  const newUsage = parseFloat(this.current_usage) + parseFloat(additionalUsage);\n  return newUsage <= parseFloat(this.limit_value);\n};\n\nRiskLimit.prototype.updateUsage = async function(newUsage, transaction = null) {\n  const oldUsage = parseFloat(this.current_usage);\n  this.current_usage = newUsage;\n  \n  const wasBreached = this.is_breached;\n  const isNowBreached = this.isLimitExceeded();\n  \n  if (!wasBreached && isNowBreached) {\n    // New breach\n    this.is_breached = true;\n    this.breach_count += 1;\n    this.last_breach_at = new Date();\n    this.breach_details = {\n      previous_usage: oldUsage,\n      new_usage: newUsage,\n      limit_value: this.limit_value,\n      breach_time: new Date(),\n      breach_type: 'usage_exceeded'\n    };\n  } else if (wasBreached && !isNowBreached) {\n    // Breach resolved\n    this.is_breached = false;\n  }\n  \n  return await this.save({ transaction });\n};\n\nRiskLimit.prototype.resetUsage = async function(transaction = null) {\n  this.current_usage = 0;\n  this.is_breached = false;\n  \n  if (this.time_window) {\n    this.reset_time = this.calculateNextResetTime();\n  }\n  \n  return await this.save({ transaction });\n};\n\nRiskLimit.prototype.calculateNextResetTime = function() {\n  if (!this.time_window) return null;\n  \n  const now = new Date();\n  const timeWindowMap = {\n    '1m': 60 * 1000,\n    '5m': 5 * 60 * 1000,\n    '15m': 15 * 60 * 1000,\n    '1h': 60 * 60 * 1000,\n    '4h': 4 * 60 * 60 * 1000,\n    '1d': 24 * 60 * 60 * 1000,\n    '7d': 7 * 24 * 60 * 60 * 1000,\n    '30d': 30 * 24 * 60 * 60 * 1000\n  };\n  \n  const intervalMs = timeWindowMap[this.time_window];\n  return new Date(now.getTime() + intervalMs);\n};\n\nRiskLimit.prototype.applyOverride = async function(overrideBy, reason, expiresAt = null, transaction = null) {\n  if (!this.override_allowed) {\n    throw new Error('Override not allowed for this limit');\n  }\n  \n  this.override_by = overrideBy;\n  this.override_reason = reason;\n  this.override_expires_at = expiresAt;\n  this.is_breached = false; // Temporarily clear breach status\n  \n  return await this.save({ transaction });\n};\n\nRiskLimit.prototype.isOverrideActive = function() {\n  if (!this.override_by) return false;\n  if (!this.override_expires_at) return true;\n  return new Date() < this.override_expires_at;\n};\n\n// Static methods\nRiskLimit.checkLimits = async function(userId, tradingPairId = null, limitTypes = null) {\n  const where = {\n    is_active: true,\n    [sequelize.Op.or]: [\n      { user_id: userId },\n      { user_id: null, scope: 'global' }\n    ]\n  };\n  \n  if (tradingPairId) {\n    where[sequelize.Op.or].push(\n      { trading_pair_id: tradingPairId, scope: 'pair' },\n      { user_id: userId, trading_pair_id: tradingPairId, scope: 'user_pair' }\n    );\n  }\n  \n  if (limitTypes) {\n    where.limit_type = { [sequelize.Op.in]: limitTypes };\n  }\n  \n  return await RiskLimit.findAll({\n    where,\n    order: [['priority', 'DESC']]\n  });\n};\n\nRiskLimit.getBreachedLimits = async function(userId = null) {\n  const where = {\n    is_breached: true,\n    is_active: true\n  };\n  \n  if (userId) {\n    where.user_id = userId;\n  }\n  \n  return await RiskLimit.findAll({\n    where,\n    include: [\n      { model: User, as: 'user' },\n      { model: Market, as: 'tradingPair' }\n    ],\n    order: [['last_breach_at', 'DESC']]\n  });\n};\n\nRiskLimit.resetExpiredLimits = async function() {\n  const now = new Date();\n  \n  const expiredLimits = await RiskLimit.findAll({\n    where: {\n      reset_time: { [sequelize.Op.lte]: now },\n      is_active: true\n    }\n  });\n  \n  const resetPromises = expiredLimits.map(limit => limit.resetUsage());\n  return await Promise.all(resetPromises);\n};\n\nRiskLimit.createUserLimits = async function(userId, limitConfig, transaction = null) {\n  const limits = [];\n  \n  for (const config of limitConfig) {\n    const limit = await RiskLimit.create({\n      user_id: userId,\n      trading_pair_id: config.trading_pair_id || null,\n      limit_type: config.limit_type,\n      scope: config.scope || 'user',\n      limit_value: config.limit_value,\n      warning_threshold: config.warning_threshold || null,\n      time_window: config.time_window || null,\n      breach_action: config.breach_action || 'warn',\n      priority: config.priority || 1,\n      override_allowed: config.override_allowed || false,\n      description: config.description || null\n    }, { transaction });\n    \n    limits.push(limit);\n  }\n  \n  return limits;\n};\n\nRiskLimit.validateTrade = async function(userId, tradingPairId, tradeAmount, tradeType = 'spot') {\n  const limits = await RiskLimit.checkLimits(userId, tradingPairId, [\n    'daily_volume',\n    'position_size',\n    'notional_limit'\n  ]);\n  \n  const violations = [];\n  \n  for (const limit of limits) {\n    if (!limit.canAccommodate(tradeAmount)) {\n      violations.push({\n        limit_id: limit.id,\n        limit_type: limit.limit_type,\n        current_usage: limit.current_usage,\n        limit_value: limit.limit_value,\n        requested_amount: tradeAmount,\n        breach_action: limit.breach_action\n      });\n    }\n  }\n  \n  return {\n    allowed: violations.length === 0,\n    violations: violations\n  };\n};\n\nmodule.exports = RiskLimit;"],"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","ignoreList":[]}