{"version":3,"names":["cov_2isvc8wlri","actualCoverage","cluster","s","require","os","redis","performanceService","LoadBalancer","constructor","f","servers","Map","currentIndex","healthCheckInterval","requestCounts","responseTimes","initializeHealthChecks","roundRobin","availableServers","filter","server","healthy","length","b","Error","weightedRoundRobin","totalWeight","reduce","sum","weight","weightedList","forEach","count","Math","round","i","push","leastConnections","min","activeConnections","responseTimeBased","fastest","avgResponseTime","adaptiveLoadBalance","scoredServers","map","connectionScore","responseTimeScore","cpuScore","cpuUsage","memoryScore","memoryUsage","compositeScore","score","best","getStickyServer","sessionId","hash","hashString","serverIndex","circuitBreaker","request","circuitKey","id","circuit","cache","get","state","failures","lastFailure","nextAttempt","now","Date","result","executeRequest","set","error","checkServerRateLimit","serverId","limit","key","current","client","incr","expire","healthCheck","startTime","response","pingServer","responseTime","status","lastHealthCheck","updateAverage","metrics","cpu","memory","connections","console","message","autoScale","monitorPerformance","totalConnections","Array","from","values","avgCpuUsage","size","avgMemoryUsage","log","scaleUp","scaleDown","initializeCluster","numCPUs","cpus","isMaster","process","pid","worker","fork","on","code","signal","delete","newWorker","middleware","req","res","next","setHeader","incrementRequestCount","originalEnd","end","args","recordResponseTime","apply","str","char","charCodeAt","abs","currentAvg","newValue","times","shift","random","floor","success","data","workers","keys","workerToRemove","kill","setInterval","getStats","totalRequests","totalServers","healthyServers","calculateOverallAvgResponseTime","requestCount","allTimes","time","module","exports"],"sources":["loadBalancer.js"],"sourcesContent":["const cluster = require('cluster');\nconst os = require('os');\nconst redis = require('../config/redis');\nconst performanceService = require('../services/performanceService');\n\nclass LoadBalancer {\n  constructor() {\n    this.servers = new Map();\n    this.currentIndex = 0;\n    this.healthCheckInterval = 30000; // 30 seconds\n    this.requestCounts = new Map();\n    this.responseTimes = new Map();\n    \n    this.initializeHealthChecks();\n  }\n\n  // Round Robin Load Balancing\n  roundRobin(servers) {\n    const availableServers = servers.filter(server => server.healthy);\n    if (availableServers.length === 0) {\n      throw new Error('No healthy servers available');\n    }\n    \n    const server = availableServers[this.currentIndex % availableServers.length];\n    this.currentIndex++;\n    return server;\n  }\n\n  // Weighted Round Robin\n  weightedRoundRobin(servers) {\n    const availableServers = servers.filter(server => server.healthy);\n    if (availableServers.length === 0) {\n      throw new Error('No healthy servers available');\n    }\n    \n    // Calculate total weight\n    const totalWeight = availableServers.reduce((sum, server) => sum + server.weight, 0);\n    \n    // Generate weighted list\n    const weightedList = [];\n    availableServers.forEach(server => {\n      const count = Math.round((server.weight / totalWeight) * 100);\n      for (let i = 0; i < count; i++) {\n        weightedList.push(server);\n      }\n    });\n    \n    const server = weightedList[this.currentIndex % weightedList.length];\n    this.currentIndex++;\n    return server;\n  }\n\n  // Least Connections Load Balancing\n  leastConnections(servers) {\n    const availableServers = servers.filter(server => server.healthy);\n    if (availableServers.length === 0) {\n      throw new Error('No healthy servers available');\n    }\n    \n    return availableServers.reduce((min, server) => \n      server.activeConnections < min.activeConnections ? server : min\n    );\n  }\n\n  // Response Time Based Load Balancing\n  responseTimeBased(servers) {\n    const availableServers = servers.filter(server => server.healthy);\n    if (availableServers.length === 0) {\n      throw new Error('No healthy servers available');\n    }\n    \n    return availableServers.reduce((fastest, server) => \n      server.avgResponseTime < fastest.avgResponseTime ? server : fastest\n    );\n  }\n\n  // Adaptive Load Balancing (combines multiple strategies)\n  adaptiveLoadBalance(servers) {\n    const availableServers = servers.filter(server => server.healthy);\n    if (availableServers.length === 0) {\n      throw new Error('No healthy servers available');\n    }\n    \n    // Calculate composite score for each server\n    const scoredServers = availableServers.map(server => {\n      const connectionScore = 1 / (server.activeConnections + 1);\n      const responseTimeScore = 1 / (server.avgResponseTime + 1);\n      const cpuScore = 1 / (server.cpuUsage + 0.1);\n      const memoryScore = 1 / (server.memoryUsage + 0.1);\n      \n      const compositeScore = (\n        connectionScore * 0.3 +\n        responseTimeScore * 0.3 +\n        cpuScore * 0.2 +\n        memoryScore * 0.2\n      );\n      \n      return { ...server, score: compositeScore };\n    });\n    \n    // Return server with highest score\n    return scoredServers.reduce((best, server) => \n      server.score > best.score ? server : best\n    );\n  }\n\n  // Sticky Session Support\n  getStickyServer(sessionId, servers) {\n    const hash = this.hashString(sessionId);\n    const availableServers = servers.filter(server => server.healthy);\n    \n    if (availableServers.length === 0) {\n      throw new Error('No healthy servers available');\n    }\n    \n    const serverIndex = hash % availableServers.length;\n    return availableServers[serverIndex];\n  }\n\n  // Circuit Breaker Pattern\n  async circuitBreaker(server, request) {\n    const circuitKey = `circuit:${server.id}`;\n    const circuit = await redis.cache.get(circuitKey) || {\n      state: 'CLOSED',\n      failures: 0,\n      lastFailure: null,\n      nextAttempt: null\n    };\n    \n    const now = Date.now();\n    \n    // Check circuit state\n    if (circuit.state === 'OPEN') {\n      if (now < circuit.nextAttempt) {\n        throw new Error(`Circuit breaker OPEN for server ${server.id}`);\n      }\n      // Try to half-open the circuit\n      circuit.state = 'HALF_OPEN';\n    }\n    \n    try {\n      const result = await this.executeRequest(server, request);\n      \n      // Success - reset circuit\n      if (circuit.state === 'HALF_OPEN') {\n        circuit.state = 'CLOSED';\n        circuit.failures = 0;\n        circuit.lastFailure = null;\n        circuit.nextAttempt = null;\n      }\n      \n      await redis.cache.set(circuitKey, circuit, 300);\n      return result;\n      \n    } catch (error) {\n      circuit.failures++;\n      circuit.lastFailure = now;\n      \n      // Open circuit if failure threshold reached\n      if (circuit.failures >= 5) {\n        circuit.state = 'OPEN';\n        circuit.nextAttempt = now + 60000; // 1 minute\n      }\n      \n      await redis.cache.set(circuitKey, circuit, 300);\n      throw error;\n    }\n  }\n\n  // Request Rate Limiting per Server\n  async checkServerRateLimit(serverId, limit = 1000) {\n    const key = `server_rate:${serverId}`;\n    const current = await redis.client.incr(key);\n    \n    if (current === 1) {\n      await redis.client.expire(key, 60); // 1 minute window\n    }\n    \n    return current <= limit;\n  }\n\n  // Health Check Implementation\n  async healthCheck(server) {\n    const startTime = Date.now();\n    \n    try {\n      // Perform health check (HTTP request, database ping, etc.)\n      const response = await this.pingServer(server);\n      const responseTime = Date.now() - startTime;\n      \n      // Update server metrics\n      server.healthy = response.status === 'ok';\n      server.lastHealthCheck = new Date();\n      server.avgResponseTime = this.updateAverage(server.avgResponseTime, responseTime);\n      \n      // Update server load metrics\n      if (response.metrics) {\n        server.cpuUsage = response.metrics.cpu || 0;\n        server.memoryUsage = response.metrics.memory || 0;\n        server.activeConnections = response.metrics.connections || 0;\n      }\n      \n      return server.healthy;\n      \n    } catch (error) {\n      console.error(`Health check failed for server ${server.id}:`, error.message);\n      server.healthy = false;\n      server.lastHealthCheck = new Date();\n      return false;\n    }\n  }\n\n  // Auto-scaling based on load\n  async autoScale() {\n    const metrics = await performanceService.monitorPerformance();\n    const totalConnections = Array.from(this.servers.values())\n      .reduce((sum, server) => sum + server.activeConnections, 0);\n    \n    const avgCpuUsage = Array.from(this.servers.values())\n      .reduce((sum, server) => sum + server.cpuUsage, 0) / this.servers.size;\n    \n    const avgMemoryUsage = Array.from(this.servers.values())\n      .reduce((sum, server) => sum + server.memoryUsage, 0) / this.servers.size;\n    \n    // Scale up conditions\n    if (avgCpuUsage > 80 || avgMemoryUsage > 85 || totalConnections > 8000) {\n      console.log('High load detected, considering scale up');\n      await this.scaleUp();\n    }\n    \n    // Scale down conditions\n    if (avgCpuUsage < 30 && avgMemoryUsage < 50 && totalConnections < 2000) {\n      console.log('Low load detected, considering scale down');\n      await this.scaleDown();\n    }\n  }\n\n  // Cluster Management\n  initializeCluster() {\n    const numCPUs = os.cpus().length;\n    \n    if (cluster.isMaster) {\n      console.log(`Master ${process.pid} is running`);\n      \n      // Fork workers\n      for (let i = 0; i < numCPUs; i++) {\n        const worker = cluster.fork();\n        this.servers.set(worker.id, {\n          id: worker.id,\n          pid: worker.process.pid,\n          healthy: true,\n          weight: 1,\n          activeConnections: 0,\n          avgResponseTime: 0,\n          cpuUsage: 0,\n          memoryUsage: 0,\n          lastHealthCheck: new Date()\n        });\n      }\n      \n      // Handle worker exit\n      cluster.on('exit', (worker, code, signal) => {\n        console.log(`Worker ${worker.process.pid} died`);\n        this.servers.delete(worker.id);\n        \n        // Restart worker\n        const newWorker = cluster.fork();\n        this.servers.set(newWorker.id, {\n          id: newWorker.id,\n          pid: newWorker.process.pid,\n          healthy: true,\n          weight: 1,\n          activeConnections: 0,\n          avgResponseTime: 0,\n          cpuUsage: 0,\n          memoryUsage: 0,\n          lastHealthCheck: new Date()\n        });\n      });\n      \n    } else {\n      console.log(`Worker ${process.pid} started`);\n    }\n  }\n\n  // Middleware for Express\n  middleware() {\n    return async (req, res, next) => {\n      const startTime = Date.now();\n      \n      // Add load balancing headers\n      res.setHeader('X-Load-Balancer', 'CEX-LB-v1.0');\n      res.setHeader('X-Server-ID', process.pid);\n      \n      // Track request\n      const serverId = process.pid;\n      this.incrementRequestCount(serverId);\n      \n      // Override res.end to capture response time\n      const originalEnd = res.end;\n      res.end = (...args) => {\n        const responseTime = Date.now() - startTime;\n        this.recordResponseTime(serverId, responseTime);\n        \n        // Add performance headers\n        res.setHeader('X-Response-Time', `${responseTime}ms`);\n        \n        originalEnd.apply(res, args);\n      };\n      \n      next();\n    };\n  }\n\n  // Helper Methods\n  hashString(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  updateAverage(currentAvg, newValue, weight = 0.1) {\n    return currentAvg === 0 ? newValue : (currentAvg * (1 - weight)) + (newValue * weight);\n  }\n\n  incrementRequestCount(serverId) {\n    const current = this.requestCounts.get(serverId) || 0;\n    this.requestCounts.set(serverId, current + 1);\n  }\n\n  recordResponseTime(serverId, responseTime) {\n    const times = this.responseTimes.get(serverId) || [];\n    times.push(responseTime);\n    \n    // Keep only last 100 response times\n    if (times.length > 100) {\n      times.shift();\n    }\n    \n    this.responseTimes.set(serverId, times);\n  }\n\n  async pingServer(server) {\n    // Simulate server ping - in real implementation, this would be HTTP request\n    return {\n      status: 'ok',\n      metrics: {\n        cpu: Math.random() * 100,\n        memory: Math.random() * 100,\n        connections: Math.floor(Math.random() * 1000)\n      }\n    };\n  }\n\n  async executeRequest(server, request) {\n    // Simulate request execution - in real implementation, this would forward request\n    return { success: true, data: 'Request processed' };\n  }\n\n  async scaleUp() {\n    console.log('Scaling up - adding new worker');\n    if (cluster.isMaster) {\n      const worker = cluster.fork();\n      this.servers.set(worker.id, {\n        id: worker.id,\n        pid: worker.process.pid,\n        healthy: true,\n        weight: 1,\n        activeConnections: 0,\n        avgResponseTime: 0,\n        cpuUsage: 0,\n        memoryUsage: 0,\n        lastHealthCheck: new Date()\n      });\n    }\n  }\n\n  async scaleDown() {\n    if (this.servers.size <= 2) return; // Keep minimum 2 workers\n    \n    console.log('Scaling down - removing worker');\n    if (cluster.isMaster) {\n      const workers = Array.from(this.servers.keys());\n      const workerToRemove = workers[workers.length - 1];\n      \n      const worker = cluster.workers[workerToRemove];\n      if (worker) {\n        worker.kill();\n        this.servers.delete(workerToRemove);\n      }\n    }\n  }\n\n  initializeHealthChecks() {\n    setInterval(async () => {\n      for (const server of this.servers.values()) {\n        await this.healthCheck(server);\n      }\n    }, this.healthCheckInterval);\n    \n    // Auto-scaling check every 2 minutes\n    setInterval(async () => {\n      await this.autoScale();\n    }, 120000);\n  }\n\n  // Get load balancer statistics\n  getStats() {\n    const servers = Array.from(this.servers.values());\n    const totalRequests = Array.from(this.requestCounts.values())\n      .reduce((sum, count) => sum + count, 0);\n    \n    return {\n      totalServers: servers.length,\n      healthyServers: servers.filter(s => s.healthy).length,\n      totalRequests,\n      avgResponseTime: this.calculateOverallAvgResponseTime(),\n      servers: servers.map(server => ({\n        id: server.id,\n        pid: server.pid,\n        healthy: server.healthy,\n        activeConnections: server.activeConnections,\n        avgResponseTime: server.avgResponseTime,\n        cpuUsage: server.cpuUsage,\n        memoryUsage: server.memoryUsage,\n        requestCount: this.requestCounts.get(server.id) || 0\n      }))\n    };\n  }\n\n  calculateOverallAvgResponseTime() {\n    const allTimes = [];\n    for (const times of this.responseTimes.values()) {\n      allTimes.push(...times);\n    }\n    \n    if (allTimes.length === 0) return 0;\n    return allTimes.reduce((sum, time) => sum + time, 0) / allTimes.length;\n  }\n}\n\nmodule.exports = new LoadBalancer();"],"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","ignoreList":[]}