{"version":3,"names":["cov_e2714gbcn","actualCoverage","client","redis","s","require","Op","Trade","Market","EventEmitter","MarketDataService","constructor","f","tickers","Map","candlesticks","subscribers","intervals","config","tickerUpdateInterval","candlestickIntervals","redisExpiry","maxCandlesticks","priceChangeWindow","setupEventListeners","initializeIntervals","on","handleNewTrade","bind","handleMarketUpdate","set","setInterval","updateAllTickers","error","console","updateAllCandlesticks","log","trade","market","updateTicker","symbol","updateCandlesticks","broadcastTradeData","type","data","price","parseFloat","quantity","side","timestamp","created_at","marketSymbol","b","findOne","where","Error","stats24h","get24hStats","ticker","get","lastPrice","last_price","volume24h","high24h","low24h","change24h","changePercent24h","bid","ask","bidSize","askSize","Date","toISOString","volume","high","low","change","changePercent","orderBookStats","getOrderBookStats","bestBid","bestAsk","JSON","stringify","EX","redisError","broadcastTickerData","now","yesterday","getTime","trades","findAll","trading_pair_id","id","gte","order","attributes","length","openPrice","prices","map","t","volumes","Math","max","min","reduce","sum","vol","currentPrice","tradeTime","interval","updateCandlestickForInterval","candlestickTime","getCandlestickTime","key","currentCandle","find","c","open","close","push","sort","a","slice","broadcastCandlestickData","time","setSeconds","setMinutes","floor","getMinutes","setHours","getHours","dayOfWeek","getDay","setDate","getDate","getTicker","cached","parse","getAllTickers","markets","is_active","Promise","all","getCandlesticks","limit","startTime","endTime","includes","generateCandlesticksFromDB","filtered","filter","intervalMs","getIntervalMs","candlestickMap","candleTime","has","candle","Array","from","values","subscribe","dataType","callback","Set","add","delete","size","update","tradeData","candlestick","updateTickerFromTrade","updateCandlestickFromTrade","broadcastToSubscribers","updateData","updateMarketPrice","updateMarketVolume","warn","lastUpdate","oldPrice","candlestickKey","getCandleTime","message","emit","getMarketStats","stats","totalMarkets","Object","keys","totalVolume24h","topGainers","topLosers","tickerArray","sortedByChange","undefined","reverse","cleanup","name","clearInterval","clear","marketDataService","module","exports"],"sources":["marketDataService.js"],"sourcesContent":["const { client: redis } = require('../config/redis');\nconst { Op } = require('sequelize');\nconst Trade = require('../models/Trade');\nconst Market = require('../models/Market');\nconst EventEmitter = require('events');\n\n/**\n * Market Data Service\n * Mengelola distribusi real-time market data, candlestick generation,\n * dan ticker updates\n */\nclass MarketDataService extends EventEmitter {\n  constructor() {\n    super();\n    this.tickers = new Map(); // Current ticker data\n    this.candlesticks = new Map(); // Candlestick data cache\n    this.subscribers = new Map(); // WebSocket subscribers\n    this.intervals = new Map(); // Update intervals\n    \n    // Configuration\n    this.config = {\n      tickerUpdateInterval: 1000, // 1 second\n      candlestickIntervals: ['1m', '5m', '15m', '30m', '1h', '4h', '1d', '1w'],\n      redisExpiry: 3600, // 1 hour\n      maxCandlesticks: 1000,\n      priceChangeWindow: 24 * 60 * 60 * 1000 // 24 hours in ms\n    };\n    \n    this.setupEventListeners();\n    this.initializeIntervals();\n  }\n  \n  setupEventListeners() {\n    // Listen for new trades\n    this.on('newTrade', this.handleNewTrade.bind(this));\n    \n    // Listen for market updates\n    this.on('marketUpdate', this.handleMarketUpdate.bind(this));\n  }\n  \n  /**\n   * Initialize update intervals\n   */\n  initializeIntervals() {\n    // Ticker updates with proper error handling\n    this.intervals.set('ticker', setInterval(async () => {\n      try {\n        await this.updateAllTickers();\n      } catch (error) {\n        console.error('Error in ticker update interval:', error);\n        // Don't rethrow to prevent unhandled rejection\n      }\n    }, this.config.tickerUpdateInterval));\n    \n    // Candlestick updates with proper error handling\n    this.intervals.set('candlestick', setInterval(async () => {\n      try {\n        await this.updateAllCandlesticks();\n      } catch (error) {\n        console.error('Error in candlestick update interval:', error);\n        // Don't rethrow to prevent unhandled rejection\n      }\n    }, 60000)); // Every minute\n    \n    console.log('Market data intervals initialized with error handling');\n  }\n  \n  /**\n   * Handle new trade\n   */\n  async handleNewTrade({ trade, market }) {\n    try {\n      // Update ticker\n      await this.updateTicker(market.symbol, trade);\n      \n      // Update candlesticks\n      await this.updateCandlesticks(market.symbol, trade);\n      \n      // Broadcast trade data\n      this.broadcastTradeData(market.symbol, {\n        type: 'trade',\n        data: {\n          price: parseFloat(trade.price),\n          quantity: parseFloat(trade.quantity),\n          side: trade.side,\n          timestamp: trade.created_at\n        }\n      });\n      \n    } catch (error) {\n      console.error(`Error handling new trade for ${market.symbol}:`, error);\n    }\n  }\n  \n  /**\n   * Update ticker data\n   */\n  async updateTicker(marketSymbol, trade = null) {\n    try {\n      const market = await Market.findOne({ where: { symbol: marketSymbol } });\n      \n      if (!market) {\n        throw new Error(`Market ${marketSymbol} not found`);\n      }\n      \n      // Get 24h statistics\n      const stats24h = await this.get24hStats(marketSymbol);\n      \n      // Current ticker data\n      let ticker = this.tickers.get(marketSymbol) || {\n        symbol: marketSymbol,\n        lastPrice: parseFloat(market.last_price),\n        volume24h: 0,\n        high24h: 0,\n        low24h: 0,\n        change24h: 0,\n        changePercent24h: 0,\n        bid: 0,\n        ask: 0,\n        bidSize: 0,\n        askSize: 0,\n        timestamp: new Date().toISOString()\n      };\n      \n      // Update with trade data if provided\n      if (trade) {\n        ticker.lastPrice = parseFloat(trade.price);\n        ticker.timestamp = new Date().toISOString();\n      }\n      \n      // Update with 24h stats\n      if (stats24h) {\n        ticker.volume24h = stats24h.volume;\n        ticker.high24h = stats24h.high;\n        ticker.low24h = stats24h.low;\n        ticker.change24h = stats24h.change;\n        ticker.changePercent24h = stats24h.changePercent;\n      }\n      \n      // Get best bid/ask from order book\n      const orderBookStats = await this.getOrderBookStats(marketSymbol);\n      if (orderBookStats) {\n        ticker.bid = orderBookStats.bestBid || 0;\n        ticker.ask = orderBookStats.bestAsk || 0;\n        ticker.bidSize = orderBookStats.bidSize || 0;\n        ticker.askSize = orderBookStats.askSize || 0;\n      }\n      \n      // Cache ticker\n      this.tickers.set(marketSymbol, ticker);\n      \n      // Cache in Redis with error handling\n      try {\n        await redis.set(\n          `ticker:${marketSymbol}`,\n          JSON.stringify(ticker),\n          { EX: this.config.redisExpiry }\n        );\n      } catch (redisError) {\n        console.error(`Redis cache error for ticker ${marketSymbol}:`, redisError);\n        // Continue without caching to prevent unhandled rejection\n      }\n      \n      // Broadcast ticker update\n      this.broadcastTickerData(marketSymbol, ticker);\n      \n      return ticker;\n      \n    } catch (error) {\n      console.error(`Error updating ticker for ${marketSymbol}:`, error);\n      // Return a default ticker instead of throwing to prevent unhandled rejection\n      return {\n        symbol: marketSymbol,\n        lastPrice: 0,\n        volume24h: 0,\n        high24h: 0,\n        low24h: 0,\n        change24h: 0,\n        changePercent24h: 0,\n        bid: 0,\n        ask: 0,\n        bidSize: 0,\n        askSize: 0,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n  \n  /**\n   * Get 24h statistics\n   */\n  async get24hStats(marketSymbol) {\n    try {\n      const market = await Market.findOne({ where: { symbol: marketSymbol } });\n      \n      if (!market) {\n        return null;\n      }\n      \n      const now = new Date();\n      const yesterday = new Date(now.getTime() - this.config.priceChangeWindow);\n      \n      // Get trades from last 24 hours\n      const trades = await Trade.findAll({\n        where: {\n          trading_pair_id: market.id,\n          created_at: {\n            [Op.gte]: yesterday\n          }\n        },\n        order: [['created_at', 'ASC']],\n        attributes: ['price', 'quantity', 'created_at']\n      });\n      \n      if (trades.length === 0) {\n        return {\n          volume: 0,\n          high: parseFloat(market.last_price),\n          low: parseFloat(market.last_price),\n          change: 0,\n          changePercent: 0,\n          openPrice: parseFloat(market.last_price)\n        };\n      }\n      \n      // Calculate statistics\n      const prices = trades.map(t => parseFloat(t.price));\n      const volumes = trades.map(t => parseFloat(t.quantity));\n      \n      const high = Math.max(...prices);\n      const low = Math.min(...prices);\n      const volume = volumes.reduce((sum, vol) => sum + vol, 0);\n      const openPrice = prices[0];\n      const currentPrice = parseFloat(market.last_price);\n      const change = currentPrice - openPrice;\n      const changePercent = openPrice > 0 ? (change / openPrice) * 100 : 0;\n      \n      return {\n        volume,\n        high,\n        low,\n        change,\n        changePercent,\n        openPrice\n      };\n      \n    } catch (error) {\n      console.error(`Error getting 24h stats for ${marketSymbol}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update candlesticks\n   */\n  async updateCandlesticks(marketSymbol, trade) {\n    try {\n      const tradeTime = new Date(trade.created_at);\n      const price = parseFloat(trade.price);\n      const volume = parseFloat(trade.quantity);\n      \n      // Update candlesticks for all intervals\n      for (const interval of this.config.candlestickIntervals) {\n        await this.updateCandlestickForInterval(marketSymbol, interval, tradeTime, price, volume);\n      }\n      \n    } catch (error) {\n      console.error(`Error updating candlesticks for ${marketSymbol}:`, error);\n    }\n  }\n  \n  /**\n   * Update candlestick for specific interval\n   */\n  async updateCandlestickForInterval(marketSymbol, interval, tradeTime, price, volume) {\n    try {\n      const candlestickTime = this.getCandlestickTime(tradeTime, interval);\n      const key = `${marketSymbol}:${interval}`;\n      \n      // Get current candlesticks\n      let candlesticks = this.candlesticks.get(key) || [];\n      \n      // Find or create current candlestick\n      let currentCandle = candlesticks.find(c => c.timestamp === candlestickTime.getTime());\n      \n      if (!currentCandle) {\n        // Create new candlestick\n        currentCandle = {\n          timestamp: candlestickTime.getTime(),\n          open: price,\n          high: price,\n          low: price,\n          close: price,\n          volume: 0,\n          trades: 0\n        };\n        \n        candlesticks.push(currentCandle);\n        \n        // Sort by timestamp\n        candlesticks.sort((a, b) => a.timestamp - b.timestamp);\n        \n        // Limit array size\n        if (candlesticks.length > this.config.maxCandlesticks) {\n          candlesticks = candlesticks.slice(-this.config.maxCandlesticks);\n        }\n      }\n      \n      // Update candlestick\n      currentCandle.high = Math.max(currentCandle.high, price);\n      currentCandle.low = Math.min(currentCandle.low, price);\n      currentCandle.close = price;\n      currentCandle.volume += volume;\n      currentCandle.trades += 1;\n      \n      // Cache updated candlesticks\n      this.candlesticks.set(key, candlesticks);\n      \n      // Cache in Redis with error handling\n      try {\n        await redis.set(\n          `candlesticks:${key}`,\n          JSON.stringify(candlesticks.slice(-100)), // Store last 100 candles\n          { EX: this.config.redisExpiry }\n        );\n      } catch (redisError) {\n        console.error(`Redis cache error for candlesticks ${key}:`, redisError);\n        // Continue without caching to prevent unhandled rejection\n      }\n      \n      // Broadcast candlestick update\n      this.broadcastCandlestickData(marketSymbol, interval, currentCandle);\n      \n    } catch (error) {\n      console.error(`Error updating candlestick for ${marketSymbol} ${interval}:`, error);\n    }\n  }\n  \n  /**\n   * Get candlestick time based on interval\n   */\n  getCandlestickTime(tradeTime, interval) {\n    const time = new Date(tradeTime);\n    \n    switch (interval) {\n      case '1m':\n        time.setSeconds(0, 0);\n        break;\n      case '5m':\n        time.setMinutes(Math.floor(time.getMinutes() / 5) * 5, 0, 0);\n        break;\n      case '15m':\n        time.setMinutes(Math.floor(time.getMinutes() / 15) * 15, 0, 0);\n        break;\n      case '30m':\n        time.setMinutes(Math.floor(time.getMinutes() / 30) * 30, 0, 0);\n        break;\n      case '1h':\n        time.setMinutes(0, 0, 0);\n        break;\n      case '4h':\n        time.setHours(Math.floor(time.getHours() / 4) * 4, 0, 0, 0);\n        break;\n      case '1d':\n        time.setHours(0, 0, 0, 0);\n        break;\n      case '1w':\n        const dayOfWeek = time.getDay();\n        time.setDate(time.getDate() - dayOfWeek);\n        time.setHours(0, 0, 0, 0);\n        break;\n      default:\n        time.setSeconds(0, 0);\n    }\n    \n    return time;\n  }\n  \n  /**\n   * Get ticker data\n   */\n  async getTicker(marketSymbol) {\n    try {\n      // Try memory cache first\n      let ticker = this.tickers.get(marketSymbol);\n      \n      if (!ticker) {\n        // Try Redis cache\n        const cached = await redis.get(`ticker:${marketSymbol}`);\n        if (cached) {\n          ticker = JSON.parse(cached);\n          this.tickers.set(marketSymbol, ticker);\n        } else {\n          // Generate fresh ticker\n          ticker = await this.updateTicker(marketSymbol);\n        }\n      }\n      \n      return ticker;\n      \n    } catch (error) {\n      console.error(`Error getting ticker for ${marketSymbol}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get all tickers\n   */\n  async getAllTickers() {\n    try {\n      const markets = await Market.findAll({\n        where: { is_active: true },\n        attributes: ['symbol']\n      });\n      \n      const tickers = {};\n      \n      await Promise.all(\n        markets.map(async (market) => {\n          try {\n            tickers[market.symbol] = await this.getTicker(market.symbol);\n          } catch (error) {\n            console.error(`Error getting ticker for ${market.symbol}:`, error);\n          }\n        })\n      );\n      \n      return tickers;\n      \n    } catch (error) {\n      console.error('Error getting all tickers:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get candlesticks\n   */\n  async getCandlesticks(marketSymbol, interval, limit = 100, startTime = null, endTime = null) {\n    try {\n      if (!this.config.candlestickIntervals.includes(interval)) {\n        throw new Error(`Invalid interval: ${interval}`);\n      }\n      \n      const key = `${marketSymbol}:${interval}`;\n      \n      // Try memory cache first\n      let candlesticks = this.candlesticks.get(key);\n      \n      if (!candlesticks) {\n        // Try Redis cache\n        const cached = await redis.get(`candlesticks:${key}`);\n        if (cached) {\n          candlesticks = JSON.parse(cached);\n          this.candlesticks.set(key, candlesticks);\n        } else {\n          // Generate from database\n          candlesticks = await this.generateCandlesticksFromDB(marketSymbol, interval, limit);\n        }\n      }\n      \n      if (!candlesticks) {\n        return [];\n      }\n      \n      // Apply filters\n      let filtered = candlesticks;\n      \n      if (startTime) {\n        filtered = filtered.filter(c => c.timestamp >= startTime);\n      }\n      \n      if (endTime) {\n        filtered = filtered.filter(c => c.timestamp <= endTime);\n      }\n      \n      // Apply limit\n      if (limit) {\n        filtered = filtered.slice(-limit);\n      }\n      \n      return filtered;\n      \n    } catch (error) {\n      console.error(`Error getting candlesticks for ${marketSymbol} ${interval}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate candlesticks from database\n   */\n  async generateCandlesticksFromDB(marketSymbol, interval, limit) {\n    try {\n      const market = await Market.findOne({ where: { symbol: marketSymbol } });\n      \n      if (!market) {\n        throw new Error(`Market ${marketSymbol} not found`);\n      }\n      \n      // Calculate time range\n      const now = new Date();\n      const intervalMs = this.getIntervalMs(interval);\n      const startTime = new Date(now.getTime() - (limit * intervalMs));\n      \n      // Get trades\n      const trades = await Trade.findAll({\n        where: {\n          trading_pair_id: market.id,\n          created_at: {\n            [Op.gte]: startTime\n          }\n        },\n        order: [['created_at', 'ASC']],\n        attributes: ['price', 'quantity', 'created_at']\n      });\n      \n      // Group trades by candlestick periods\n      const candlestickMap = new Map();\n      \n      for (const trade of trades) {\n        const candleTime = this.getCandlestickTime(trade.created_at, interval);\n        const key = candleTime.getTime();\n        const price = parseFloat(trade.price);\n        const volume = parseFloat(trade.quantity);\n        \n        if (!candlestickMap.has(key)) {\n          candlestickMap.set(key, {\n            timestamp: key,\n            open: price,\n            high: price,\n            low: price,\n            close: price,\n            volume: 0,\n            trades: 0\n          });\n        }\n        \n        const candle = candlestickMap.get(key);\n        candle.high = Math.max(candle.high, price);\n        candle.low = Math.min(candle.low, price);\n        candle.close = price;\n        candle.volume += volume;\n        candle.trades += 1;\n      }\n      \n      // Convert to array and sort\n      const candlesticks = Array.from(candlestickMap.values())\n        .sort((a, b) => a.timestamp - b.timestamp);\n      \n      // Cache the result\n      const key = `${marketSymbol}:${interval}`;\n      this.candlesticks.set(key, candlesticks);\n      \n      return candlesticks;\n      \n    } catch (error) {\n      console.error(`Error generating candlesticks from DB for ${marketSymbol} ${interval}:`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get interval in milliseconds\n   */\n  getIntervalMs(interval) {\n    const intervals = {\n      '1m': 60 * 1000,\n      '5m': 5 * 60 * 1000,\n      '15m': 15 * 60 * 1000,\n      '30m': 30 * 60 * 1000,\n      '1h': 60 * 60 * 1000,\n      '4h': 4 * 60 * 60 * 1000,\n      '1d': 24 * 60 * 60 * 1000,\n      '1w': 7 * 24 * 60 * 60 * 1000\n    };\n    \n    return intervals[interval] || 60 * 1000;\n  }\n  \n  /**\n   * Get order book statistics\n   */\n  async getOrderBookStats(marketSymbol) {\n    try {\n      // This would integrate with OrderBookManager\n      // For now, return mock data\n      return {\n        bestBid: 0,\n        bestAsk: 0,\n        bidSize: 0,\n        askSize: 0\n      };\n    } catch (error) {\n      console.error(`Error getting order book stats for ${marketSymbol}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Subscribe to market data updates\n   */\n  subscribe(marketSymbol, dataType, callback) {\n    const key = `${marketSymbol}:${dataType}`;\n    \n    if (!this.subscribers.has(key)) {\n      this.subscribers.set(key, new Set());\n    }\n    \n    this.subscribers.get(key).add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      const subscribers = this.subscribers.get(key);\n      if (subscribers) {\n        subscribers.delete(callback);\n        if (subscribers.size === 0) {\n          this.subscribers.delete(key);\n        }\n      }\n    };\n  }\n  \n  /**\n   * Broadcast ticker data\n   */\n  broadcastTickerData(marketSymbol, ticker) {\n    const key = `${marketSymbol}:ticker`;\n    const subscribers = this.subscribers.get(key);\n    \n    if (subscribers && subscribers.size > 0) {\n      const update = {\n        type: 'ticker',\n        symbol: marketSymbol,\n        data: ticker,\n        timestamp: new Date().toISOString()\n      };\n      \n      for (const callback of subscribers) {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error('Error broadcasting ticker data:', error);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Broadcast trade data\n   */\n  broadcastTradeData(marketSymbol, tradeData) {\n    const key = `${marketSymbol}:trades`;\n    const subscribers = this.subscribers.get(key);\n    \n    if (subscribers && subscribers.size > 0) {\n      const update = {\n        ...tradeData,\n        symbol: marketSymbol,\n        timestamp: new Date().toISOString()\n      };\n      \n      for (const callback of subscribers) {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error('Error broadcasting trade data:', error);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Broadcast candlestick data\n   */\n  broadcastCandlestickData(marketSymbol, interval, candlestick) {\n    const key = `${marketSymbol}:candlesticks:${interval}`;\n    const subscribers = this.subscribers.get(key);\n    \n    if (subscribers && subscribers.size > 0) {\n      const update = {\n        type: 'candlestick',\n        symbol: marketSymbol,\n        interval,\n        data: candlestick,\n        timestamp: new Date().toISOString()\n      };\n      \n      for (const callback of subscribers) {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error('Error broadcasting candlestick data:', error);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Update all tickers\n   */\n  async updateAllTickers() {\n    try {\n      const markets = await Market.findAll({\n        where: { is_active: true },\n        attributes: ['symbol']\n      });\n      \n      await Promise.all(\n        markets.map(async (market) => {\n          try {\n            await this.updateTicker(market.symbol);\n          } catch (error) {\n            console.error(`Error updating ticker for ${market.symbol}:`, error);\n          }\n        })\n      );\n      \n    } catch (error) {\n      console.error('Error updating all tickers:', error);\n    }\n  }\n  \n  /**\n   * Update all candlesticks\n   */\n  async updateAllCandlesticks() {\n    try {\n      // This would be called periodically to ensure candlesticks are up to date\n      // Implementation depends on specific requirements\n      console.log('Updating all candlesticks...');\n    } catch (error) {\n      console.error('Error updating all candlesticks:', error);\n    }\n  }\n  \n  /**\n   * Handle new trade event\n   */\n  async handleNewTrade(tradeData) {\n    try {\n      const { marketSymbol, price, quantity, timestamp } = tradeData;\n      \n      // Update ticker with new trade\n      await this.updateTickerFromTrade(marketSymbol, price, quantity, timestamp);\n      \n      // Update candlestick data\n      await this.updateCandlestickFromTrade(marketSymbol, price, quantity, timestamp);\n      \n      // Broadcast to subscribers\n      this.broadcastToSubscribers('trade', {\n        symbol: marketSymbol,\n        price,\n        quantity,\n        timestamp\n      });\n      \n    } catch (error) {\n      console.error('Error handling new trade:', error);\n    }\n  }\n  \n  /**\n   * Handle market update event\n   */\n  async handleMarketUpdate(updateData) {\n    try {\n      const { marketSymbol, type, data } = updateData;\n      \n      switch (type) {\n        case 'price_update':\n          await this.updateMarketPrice(marketSymbol, data.price);\n          break;\n        case 'volume_update':\n          await this.updateMarketVolume(marketSymbol, data.volume);\n          break;\n        case 'ticker_update':\n          await this.updateTicker(marketSymbol, data);\n          break;\n        default:\n          console.warn('Unknown market update type:', type);\n      }\n      \n      // Broadcast to subscribers\n      this.broadcastToSubscribers('market_update', {\n        symbol: marketSymbol,\n        type,\n        data,\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Error handling market update:', error);\n    }\n  }\n  \n  /**\n   * Update ticker from trade data\n   */\n  async updateTickerFromTrade(marketSymbol, price, quantity, timestamp) {\n    try {\n      const ticker = this.tickers.get(marketSymbol) || {\n        symbol: marketSymbol,\n        price: 0,\n        volume24h: 0,\n        high24h: 0,\n        low24h: 0,\n        change24h: 0,\n        changePercent24h: 0,\n        lastUpdate: timestamp\n      };\n      \n      // Update price\n      const oldPrice = ticker.price;\n      ticker.price = price;\n      ticker.lastUpdate = timestamp;\n      \n      // Update 24h stats (simplified - in production, use proper time windows)\n      if (price > ticker.high24h || ticker.high24h === 0) {\n        ticker.high24h = price;\n      }\n      if (price < ticker.low24h || ticker.low24h === 0) {\n        ticker.low24h = price;\n      }\n      \n      // Update volume\n      ticker.volume24h += quantity;\n      \n      // Calculate change\n      if (oldPrice > 0) {\n        ticker.change24h = price - oldPrice;\n        ticker.changePercent24h = ((price - oldPrice) / oldPrice) * 100;\n      }\n      \n      this.tickers.set(marketSymbol, ticker);\n      \n    } catch (error) {\n      console.error('Error updating ticker from trade:', error);\n    }\n  }\n  \n  /**\n   * Update candlestick from trade data\n   */\n  async updateCandlestickFromTrade(marketSymbol, price, quantity, timestamp) {\n    try {\n      const intervals = ['1m', '5m', '15m', '1h', '4h', '1d'];\n      \n      for (const interval of intervals) {\n        const candlestickKey = `${marketSymbol}:${interval}`;\n        let candlesticks = this.candlesticks.get(candlestickKey) || [];\n        \n        const candleTime = this.getCandleTime(timestamp, interval);\n        \n        // Find or create current candle\n        let currentCandle = candlesticks.find(c => c.timestamp === candleTime);\n        \n        if (!currentCandle) {\n          currentCandle = {\n            timestamp: candleTime,\n            open: price,\n            high: price,\n            low: price,\n            close: price,\n            volume: 0\n          };\n          candlesticks.push(currentCandle);\n        }\n        \n        // Update candle\n        currentCandle.close = price;\n        currentCandle.high = Math.max(currentCandle.high, price);\n        currentCandle.low = Math.min(currentCandle.low, price);\n        currentCandle.volume += quantity;\n        \n        // Keep only last 1000 candles\n        if (candlesticks.length > 1000) {\n          candlesticks = candlesticks.slice(-1000);\n        }\n        \n        this.candlesticks.set(candlestickKey, candlesticks);\n      }\n      \n    } catch (error) {\n      console.error('Error updating candlestick from trade:', error);\n    }\n  }\n  \n  /**\n   * Broadcast data to subscribers\n   */\n  broadcastToSubscribers(type, data) {\n    try {\n      const message = {\n        type,\n        data,\n        timestamp: new Date().toISOString()\n      };\n      \n      // In a real implementation, this would broadcast via WebSocket\n      // For now, we'll emit an event that can be listened to\n      this.emit('broadcast', message);\n      \n    } catch (error) {\n      console.error('Error broadcasting to subscribers:', error);\n    }\n  }\n\n  /**\n   * Get market statistics\n   */\n  async getMarketStats() {\n    try {\n      const tickers = await this.getAllTickers();\n      \n      const stats = {\n        totalMarkets: Object.keys(tickers).length,\n        totalVolume24h: 0,\n        topGainers: [],\n        topLosers: [],\n        timestamp: new Date().toISOString()\n      };\n      \n      // Calculate statistics\n      const tickerArray = Object.values(tickers);\n      \n      stats.totalVolume24h = tickerArray.reduce((sum, ticker) => {\n        return sum + (ticker.volume24h || 0);\n      }, 0);\n      \n      // Top gainers and losers\n      const sortedByChange = tickerArray\n        .filter(ticker => ticker.changePercent24h !== undefined)\n        .sort((a, b) => b.changePercent24h - a.changePercent24h);\n      \n      stats.topGainers = sortedByChange.slice(0, 10);\n      stats.topLosers = sortedByChange.slice(-10).reverse();\n      \n      return stats;\n      \n    } catch (error) {\n      console.error('Error getting market stats:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    // Clear all intervals\n    for (const [name, interval] of this.intervals) {\n      clearInterval(interval);\n    }\n    \n    // Clear caches\n    this.tickers.clear();\n    this.candlesticks.clear();\n    this.subscribers.clear();\n    this.intervals.clear();\n    \n    console.log('Market data service cleaned up');\n  }\n}\n\n// Create singleton instance\nconst marketDataService = new MarketDataService();\n\nmodule.exports = marketDataService;"],"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","ignoreList":[]}