{"version":3,"names":["cov_2roysrk0q6","actualCoverage","redis","s","require","pgPool","EventEmitter","PerformanceService","constructor","f","metrics","queryTimes","Map","cacheHitRatio","hits","misses","connectionPoolStats","active","idle","waiting","memoryUsage","rss","heapUsed","heapTotal","responseTimeP95","throughput","startMetricsCollection","optimizeQuery","query","params","b","startTime","Date","now","queryHash","hashQuery","cacheKey","JSON","stringify","cachedResult","cache","get","recordQueryTime","result","shouldCacheQuery","ttl","getCacheTTL","set","rows","error","console","getWithMultiLevelCache","key","fetchFunction","options","l1TTL","l2TTL","l3TTL","memoryCache","has","cached","expires","data","delete","redisResult","setMemoryCache","freshData","optimizeConnectionPool","poolStats","totalCount","idleCount","waitingCount","utilizationRatio","log","emit","currentSize","utilization","optimizeMemoryUsage","memUsage","process","heapUsedMB","heapTotalMB","heapUtilization","clearOldCacheEntries","global","gc","Math","round","analyzeAndOptimizeIndexes","indexAnalysis","slowQueries","indexUsage","missingIndexes","push","underutilizedIndexes","potentialMissingIndexes","warmCache","warmingTasks","warmTradingPairsCache","warmActiveUserBalances","warmMarketDataCache","warmOrderBookCache","Promise","all","monitorPerformance","timestamp","toISOString","connectionPool","memory","getCacheMetrics","queries","getQueryMetrics","system","getSystemMetrics","redisError","checkPerformanceAlerts","crypto","createHash","update","digest","cacheablePatterns","some","pattern","test","includes","duration","times","length","shift","ttlSeconds","size","oldestKey","keys","next","value","entries","client","oldKeys","slice","del","total","hitRatio","allTimes","values","avgTime","p95Time","totalQueries","sort","a","p95Index","floor","reduce","cpuUsage","uptime","cpuUser","user","cpuSystem","nodeVersion","version","type","severity","message","setInterval","module","exports"],"sources":["performanceService.js"],"sourcesContent":["const redis = require('../config/redis');\nconst { pgPool } = require('../config/database');\nconst EventEmitter = require('events');\n\nclass PerformanceService extends EventEmitter {\n  constructor() {\n    super();\n    this.metrics = {\n      queryTimes: new Map(),\n      cacheHitRatio: { hits: 0, misses: 0 },\n      connectionPoolStats: { active: 0, idle: 0, waiting: 0 },\n      memoryUsage: { rss: 0, heapUsed: 0, heapTotal: 0 },\n      responseTimeP95: 0,\n      throughput: 0\n    };\n    \n    this.startMetricsCollection();\n  }\n\n  // Advanced Query Optimization\n  async optimizeQuery(query, params = []) {\n    const startTime = Date.now();\n    const queryHash = this.hashQuery(query);\n    \n    try {\n      // Check if query result is cached\n      const cacheKey = `query:${queryHash}:${JSON.stringify(params)}`;\n      const cachedResult = await redis.cache.get(cacheKey);\n      \n      if (cachedResult) {\n        this.metrics.cacheHitRatio.hits++;\n        this.recordQueryTime(queryHash, Date.now() - startTime);\n        return cachedResult;\n      }\n      \n      // Execute query with connection pooling\n      const result = await pgPool.query(query, params);\n      \n      // Cache result for frequently accessed queries\n      if (this.shouldCacheQuery(query)) {\n        const ttl = this.getCacheTTL(query);\n        await redis.cache.set(cacheKey, result.rows, ttl);\n      }\n      \n      this.metrics.cacheHitRatio.misses++;\n      this.recordQueryTime(queryHash, Date.now() - startTime);\n      \n      return result.rows;\n    } catch (error) {\n      console.error('Query optimization error:', error);\n      throw error;\n    }\n  }\n\n  // Multi-level Caching Strategy\n  async getWithMultiLevelCache(key, fetchFunction, options = {}) {\n    const {\n      l1TTL = 60,      // Level 1 cache (in-memory) - 1 minute\n      l2TTL = 3600,    // Level 2 cache (Redis) - 1 hour\n      l3TTL = 86400    // Level 3 cache (persistent) - 24 hours\n    } = options;\n    \n    // Level 1: In-memory cache\n    if (this.memoryCache && this.memoryCache.has(key)) {\n      const cached = this.memoryCache.get(key);\n      if (cached.expires > Date.now()) {\n        return cached.data;\n      }\n      this.memoryCache.delete(key);\n    }\n    \n    // Level 2: Redis cache\n    const redisResult = await redis.cache.get(`l2:${key}`);\n    if (redisResult) {\n      // Store in L1 cache\n      this.setMemoryCache(key, redisResult, l1TTL);\n      return redisResult;\n    }\n    \n    // Level 3: Database/API call\n    const freshData = await fetchFunction();\n    \n    // Store in all cache levels\n    this.setMemoryCache(key, freshData, l1TTL);\n    await redis.cache.set(`l2:${key}`, freshData, l2TTL);\n    await redis.cache.set(`l3:${key}`, freshData, l3TTL);\n    \n    return freshData;\n  }\n\n  // Connection Pool Optimization\n  async optimizeConnectionPool() {\n    const poolStats = {\n      totalCount: pgPool.totalCount,\n      idleCount: pgPool.idleCount,\n      waitingCount: pgPool.waitingCount\n    };\n    \n    this.metrics.connectionPoolStats = poolStats;\n    \n    // Auto-scale connection pool based on load\n    const utilizationRatio = (poolStats.totalCount - poolStats.idleCount) / poolStats.totalCount;\n    \n    if (utilizationRatio > 0.8 && poolStats.totalCount < 50) {\n      // Increase pool size if utilization is high\n      console.log('High connection pool utilization detected, consider scaling up');\n      this.emit('poolScaleUp', { currentSize: poolStats.totalCount, utilization: utilizationRatio });\n    } else if (utilizationRatio < 0.3 && poolStats.totalCount > 10) {\n      // Decrease pool size if utilization is low\n      console.log('Low connection pool utilization detected, consider scaling down');\n      this.emit('poolScaleDown', { currentSize: poolStats.totalCount, utilization: utilizationRatio });\n    }\n    \n    return poolStats;\n  }\n\n  // Memory Management and Optimization\n  async optimizeMemoryUsage() {\n    const memUsage = process.memoryUsage();\n    this.metrics.memoryUsage = memUsage;\n    \n    // Trigger garbage collection if memory usage is high\n    const heapUsedMB = memUsage.heapUsed / 1024 / 1024;\n    const heapTotalMB = memUsage.heapTotal / 1024 / 1024;\n    const heapUtilization = heapUsedMB / heapTotalMB;\n    \n    if (heapUtilization > 0.85) {\n      console.log('High memory utilization detected:', heapUtilization);\n      \n      // Clear old cache entries\n      await this.clearOldCacheEntries();\n      \n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n        console.log('Garbage collection triggered');\n      }\n      \n      this.emit('memoryPressure', { utilization: heapUtilization, heapUsedMB });\n    }\n    \n    return {\n      heapUsedMB: Math.round(heapUsedMB),\n      heapTotalMB: Math.round(heapTotalMB),\n      utilization: Math.round(heapUtilization * 100)\n    };\n  }\n\n  // Database Index Optimization\n  async analyzeAndOptimizeIndexes() {\n    const indexAnalysis = [];\n    \n    try {\n      // Analyze slow queries\n      const slowQueries = await pgPool.query(`\n        SELECT query, mean_time, calls, total_time\n        FROM pg_stat_statements \n        WHERE mean_time > 100 \n        ORDER BY mean_time DESC \n        LIMIT 10\n      `);\n      \n      // Check index usage\n      const indexUsage = await pgPool.query(`\n        SELECT \n          schemaname,\n          tablename,\n          indexname,\n          idx_scan,\n          idx_tup_read,\n          idx_tup_fetch\n        FROM pg_stat_user_indexes \n        WHERE idx_scan < 100\n        ORDER BY idx_scan ASC\n      `);\n      \n      // Identify missing indexes\n      const missingIndexes = await pgPool.query(`\n        SELECT \n          schemaname,\n          tablename,\n          seq_scan,\n          seq_tup_read,\n          seq_tup_read / seq_scan as avg_seq_read\n        FROM pg_stat_user_tables \n        WHERE seq_scan > 1000 AND seq_tup_read / seq_scan > 1000\n        ORDER BY seq_tup_read DESC\n      `);\n      \n      indexAnalysis.push({\n        slowQueries: slowQueries.rows,\n        underutilizedIndexes: indexUsage.rows,\n        potentialMissingIndexes: missingIndexes.rows\n      });\n      \n      return indexAnalysis;\n    } catch (error) {\n      console.error('Index analysis error:', error);\n      return [];\n    }\n  }\n\n  // Cache Warming Strategy\n  async warmCache() {\n    console.log('Starting cache warming process...');\n    \n    const warmingTasks = [\n      // Warm frequently accessed trading pairs\n      this.warmTradingPairsCache(),\n      // Warm user balances for active users\n      this.warmActiveUserBalances(),\n      // Warm market data\n      this.warmMarketDataCache(),\n      // Warm order book snapshots\n      this.warmOrderBookCache()\n    ];\n    \n    try {\n      await Promise.all(warmingTasks);\n      console.log('Cache warming completed successfully');\n    } catch (error) {\n      console.error('Cache warming error:', error);\n    }\n  }\n\n  // Performance Monitoring and Alerting\n  async monitorPerformance() {\n    try {\n      const metrics = {\n        timestamp: new Date().toISOString(),\n        connectionPool: await this.optimizeConnectionPool(),\n        memory: await this.optimizeMemoryUsage(),\n        cache: this.getCacheMetrics(),\n        queries: this.getQueryMetrics(),\n        system: this.getSystemMetrics()\n      };\n      \n      // Store metrics in Redis for monitoring dashboard\n      try {\n        await redis.cache.set('performance:metrics', metrics, 300); // 5 minutes\n      } catch (redisError) {\n        console.error('Redis cache error in monitorPerformance:', redisError);\n      }\n      \n      // Check for performance alerts\n      this.checkPerformanceAlerts(metrics);\n      \n      return metrics;\n    } catch (error) {\n      console.error('Performance monitoring error:', error);\n      throw error;\n    }\n  }\n\n  // Helper Methods\n  hashQuery(query) {\n    const crypto = require('crypto');\n    return crypto.createHash('md5').update(query).digest('hex');\n  }\n\n  shouldCacheQuery(query) {\n    const cacheablePatterns = [\n      /SELECT.*FROM.*trading_pairs/i,\n      /SELECT.*FROM.*users.*WHERE.*id/i,\n      /SELECT.*FROM.*balances/i,\n      /SELECT.*FROM.*market_data/i\n    ];\n    \n    return cacheablePatterns.some(pattern => pattern.test(query));\n  }\n\n  getCacheTTL(query) {\n    if (query.includes('trading_pairs')) return 3600; // 1 hour\n    if (query.includes('market_data')) return 60;    // 1 minute\n    if (query.includes('user_balances')) return 300;      // 5 minutes\n    return 1800; // 30 minutes default\n  }\n\n  recordQueryTime(queryHash, duration) {\n    if (!this.metrics.queryTimes.has(queryHash)) {\n      this.metrics.queryTimes.set(queryHash, []);\n    }\n    \n    const times = this.metrics.queryTimes.get(queryHash);\n    times.push(duration);\n    \n    // Keep only last 100 measurements\n    if (times.length > 100) {\n      times.shift();\n    }\n  }\n\n  setMemoryCache(key, data, ttlSeconds) {\n    if (!this.memoryCache) {\n      this.memoryCache = new Map();\n    }\n    \n    this.memoryCache.set(key, {\n      data,\n      expires: Date.now() + (ttlSeconds * 1000)\n    });\n    \n    // Limit memory cache size\n    if (this.memoryCache.size > 1000) {\n      const oldestKey = this.memoryCache.keys().next().value;\n      this.memoryCache.delete(oldestKey);\n    }\n  }\n\n  async clearOldCacheEntries() {\n    // Clear expired memory cache entries\n    if (this.memoryCache) {\n      const now = Date.now();\n      for (const [key, value] of this.memoryCache.entries()) {\n        if (value.expires < now) {\n          this.memoryCache.delete(key);\n        }\n      }\n    }\n    \n    // Clear old Redis cache entries (implement LRU eviction)\n    const keys = await redis.client.keys('query:*');\n    if (keys.length > 10000) {\n      const oldKeys = keys.slice(0, 1000);\n      await redis.client.del(...oldKeys);\n    }\n  }\n\n  async warmTradingPairsCache() {\n    const query = 'SELECT * FROM trading_pairs WHERE is_active = true';\n    await this.optimizeQuery(query);\n  }\n\n  async warmActiveUserBalances() {\n    const query = `\n      SELECT b.* FROM user_balances b \n      JOIN users u ON b.user_id = u.id \n      WHERE u.last_login > NOW() - INTERVAL '24 hours'\n    `;\n    await this.optimizeQuery(query);\n  }\n\n  async warmMarketDataCache() {\n    const query = `\n      SELECT * FROM market_data \n      WHERE created_at > NOW() - INTERVAL '1 hour'\n      ORDER BY created_at DESC\n    `;\n    await this.optimizeQuery(query);\n  }\n\n  async warmOrderBookCache() {\n    const query = `\n      SELECT * FROM order_book_snapshots \n      WHERE created_at > NOW() - INTERVAL '5 minutes'\n    `;\n    await this.optimizeQuery(query);\n  }\n\n  getCacheMetrics() {\n    const total = this.metrics.cacheHitRatio.hits + this.metrics.cacheHitRatio.misses;\n    const hitRatio = total > 0 ? (this.metrics.cacheHitRatio.hits / total) * 100 : 0;\n    \n    return {\n      hitRatio: Math.round(hitRatio * 100) / 100,\n      hits: this.metrics.cacheHitRatio.hits,\n      misses: this.metrics.cacheHitRatio.misses,\n      memoryCache: this.memoryCache ? this.memoryCache.size : 0\n    };\n  }\n\n  getQueryMetrics() {\n    const allTimes = [];\n    for (const times of this.metrics.queryTimes.values()) {\n      allTimes.push(...times);\n    }\n    \n    if (allTimes.length === 0) return { avgTime: 0, p95Time: 0, totalQueries: 0 };\n    \n    allTimes.sort((a, b) => a - b);\n    const p95Index = Math.floor(allTimes.length * 0.95);\n    \n    return {\n      avgTime: Math.round(allTimes.reduce((a, b) => a + b, 0) / allTimes.length),\n      p95Time: allTimes[p95Index] || 0,\n      totalQueries: allTimes.length\n    };\n  }\n\n  getSystemMetrics() {\n    const cpuUsage = process.cpuUsage();\n    return {\n      uptime: Math.round(process.uptime()),\n      cpuUser: cpuUsage.user,\n      cpuSystem: cpuUsage.system,\n      nodeVersion: process.version\n    };\n  }\n\n  checkPerformanceAlerts(metrics) {\n    // Memory usage alert\n    if (metrics.memory.utilization > 85) {\n      this.emit('alert', {\n        type: 'memory',\n        severity: 'high',\n        message: `Memory utilization is ${metrics.memory.utilization}%`,\n        metrics: metrics.memory\n      });\n    }\n    \n    // Cache hit ratio alert\n    if (metrics.cache.hitRatio < 80) {\n      this.emit('alert', {\n        type: 'cache',\n        severity: 'medium',\n        message: `Cache hit ratio is ${metrics.cache.hitRatio}%`,\n        metrics: metrics.cache\n      });\n    }\n    \n    // Query performance alert\n    if (metrics.queries.p95Time > 1000) {\n      this.emit('alert', {\n        type: 'query',\n        severity: 'high',\n        message: `95th percentile query time is ${metrics.queries.p95Time}ms`,\n        metrics: metrics.queries\n      });\n    }\n  }\n\n  startMetricsCollection() {\n    // Collect metrics every 30 seconds\n    setInterval(async () => {\n      try {\n        await this.monitorPerformance();\n      } catch (error) {\n        console.error('Metrics collection error:', error);\n      }\n    }, 30000);\n    \n    // Warm cache every hour\n    setInterval(async () => {\n      try {\n        await this.warmCache();\n      } catch (error) {\n        console.error('Cache warming error:', error);\n      }\n    }, 3600000);\n  }\n}\n\nmodule.exports = new PerformanceService();"],"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","ignoreList":[]}