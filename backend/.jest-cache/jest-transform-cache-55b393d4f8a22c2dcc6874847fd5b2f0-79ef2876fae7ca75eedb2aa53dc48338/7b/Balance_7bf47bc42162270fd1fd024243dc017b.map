{"version":3,"names":["cov_22ouu3cmex","actualCoverage","DataTypes","s","require","sequelize","User","Balance","define","id","type","UUID","defaultValue","UUIDV4","primaryKey","user_id","allowNull","references","model","key","comment","currency_id","available_balance","DECIMAL","locked_balance","total_balance","last_deposit_at","DATE","last_withdrawal_at","last_trade_at","is_frozen","BOOLEAN","freeze_reason","TEXT","frozen_at","frozen_by","min_balance","metadata","JSONB","margin_balance","futures_balance","staking_balance","lending_balance","unrealized_pnl","realized_pnl","total_deposits","total_withdrawals","total_trading_fees","average_buy_price","position_size","position_side","ENUM","isolated_margin","cross_margin","created_at","NOW","updated_at","tableName","timestamps","createdAt","updatedAt","indexes","unique","fields","validate","positiveBalances","f","parseFloat","b","Error","belongsTo","foreignKey","as","prototype","hasAvailableBalance","amount","hasTotalBalance","canWithdraw","canTrade","lockBalance","reason","lockAmount","last_lock_reason","last_lock_at","Date","save","unlockBalance","unlockAmount","last_unlock_reason","last_unlock_at","addBalance","addAmount","subtractBalance","subtractAmount","freeze","frozenBy","unfreeze","getUserBalance","userId","currencyId","findOne","where","getUserBalances","findAll","include","models","Cryptocurrency","attributes","order","createOrUpdateBalance","availableAmount","lockedAmount","balance","created","findOrCreate","defaults","getTotalBalanceValue","quoteCurrency","balances","map","available","locked","total","getFrozenBalances","transfer","fromUserId","toUserId","transaction","fromBalance","toBalance","transferMetadata","transfer_reason","transfer_at","transfer_amount","last_transfer_out","last_transfer_in","commit","from","to","error","rollback","module","exports"],"sources":["Balance.js"],"sourcesContent":["const { DataTypes } = require('sequelize');\nconst { sequelize } = require('../config/database');\nconst User = require('./User');\n\n/**\n * Model Balance untuk mengelola saldo pengguna\n * Menyimpan saldo available dan locked untuk setiap mata uang\n */\nconst Balance = sequelize.define('Balance', {\n  id: {\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n    primaryKey: true\n  },\n  \n  // Foreign key\n  user_id: {\n    type: DataTypes.UUID,\n    allowNull: false,\n    references: {\n      model: 'users',\n      key: 'id'\n    },\n    comment: 'User who owns this balance'\n  },\n  \n  // Currency information\n  currency_id: {\n    type: DataTypes.UUID,\n    allowNull: false,\n    references: {\n      model: 'cryptocurrencies',\n      key: 'id'\n    },\n    comment: 'Currency reference to cryptocurrencies table'\n  },\n  \n  // Balance amounts\n  available_balance: {\n    type: DataTypes.DECIMAL(36, 18),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Available balance for trading/withdrawal'\n  },\n  \n  locked_balance: {\n    type: DataTypes.DECIMAL(36, 18),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Locked balance (in orders, pending withdrawals, etc.)'\n  },\n  \n  // Calculated total\n  total_balance: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: false,\n    comment: 'Total balance (available + locked) - computed column in database'\n  },\n  \n  // Balance tracking\n  last_deposit_at: {\n    type: DataTypes.DATE,\n    allowNull: true,\n    comment: 'Last deposit timestamp'\n  },\n  \n  last_withdrawal_at: {\n    type: DataTypes.DATE,\n    allowNull: true,\n    comment: 'Last withdrawal timestamp'\n  },\n  \n  last_trade_at: {\n    type: DataTypes.DATE,\n    allowNull: true,\n    comment: 'Last trade timestamp'\n  },\n  \n  // Security and compliance\n  is_frozen: {\n    type: DataTypes.BOOLEAN,\n    defaultValue: false,\n    comment: 'Whether this balance is frozen'\n  },\n  \n  freeze_reason: {\n    type: DataTypes.TEXT,\n    allowNull: true,\n    comment: 'Reason for balance freeze'\n  },\n  \n  frozen_at: {\n    type: DataTypes.DATE,\n    allowNull: true,\n    comment: 'When balance was frozen'\n  },\n  \n  frozen_by: {\n    type: DataTypes.UUID,\n    allowNull: true,\n    references: {\n      model: 'users',\n      key: 'id'\n    },\n    comment: 'Admin user who froze the balance'\n  },\n  \n  // Minimum balance requirements\n  min_balance: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Minimum balance requirement'\n  },\n  \n  // Metadata\n  metadata: {\n    type: DataTypes.JSONB,\n    allowNull: true,\n    comment: 'Additional balance metadata'\n  },\n\n  // Enhanced fields\n  margin_balance: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Balance available for margin trading'\n  },\n  \n  futures_balance: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Balance in futures wallet'\n  },\n  \n  staking_balance: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Balance locked in staking'\n  },\n  \n  lending_balance: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Balance in lending/savings'\n  },\n  \n  unrealized_pnl: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Unrealized profit/loss from open positions'\n  },\n  \n  realized_pnl: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Realized profit/loss from closed positions'\n  },\n  \n  total_deposits: {\n    type: DataTypes.DECIMAL(30, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Total lifetime deposits'\n  },\n  \n  total_withdrawals: {\n    type: DataTypes.DECIMAL(30, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Total lifetime withdrawals'\n  },\n  \n  total_trading_fees: {\n    type: DataTypes.DECIMAL(30, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Total trading fees paid in this currency'\n  },\n  \n  average_buy_price: {\n    type: DataTypes.DECIMAL(20, 8),\n    allowNull: true,\n    comment: 'Average buy price for position tracking'\n  },\n  \n  position_size: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Current position size (for futures/margin)'\n  },\n  \n  position_side: {\n    type: DataTypes.ENUM('long', 'short', 'both'),\n    allowNull: true,\n    comment: 'Position side for futures trading'\n  },\n  \n  isolated_margin: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Isolated margin balance'\n  },\n  \n  cross_margin: {\n    type: DataTypes.DECIMAL(20, 8),\n    defaultValue: 0,\n    allowNull: false,\n    comment: 'Cross margin balance'\n  },\n  \n  // Timestamps\n  created_at: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW,\n    allowNull: false\n  },\n  \n  updated_at: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW,\n    allowNull: false\n  }\n}, {\n  tableName: 'user_balances',\n  timestamps: true,\n  createdAt: 'created_at',\n  updatedAt: 'updated_at',\n  indexes: [\n    {\n      unique: true,\n      fields: ['user_id', 'currency_id']\n    },\n    {\n      fields: ['user_id']\n    },\n    {\n      fields: ['currency_id']\n    },\n    {\n      fields: ['is_frozen']\n    },\n    {\n      fields: ['available_balance'] // For balance queries\n    },\n    {\n      fields: ['locked_balance'] // For locked balance queries\n    }\n  ],\n  validate: {\n    // Ensure balances are not negative\n    positiveBalances() {\n      if (parseFloat(this.available_balance) < 0) {\n        throw new Error('Available balance cannot be negative');\n      }\n      if (parseFloat(this.locked_balance) < 0) {\n        throw new Error('Locked balance cannot be negative');\n      }\n    }\n  }\n});\n\n// Associations\nBalance.belongsTo(User, { foreignKey: 'user_id', as: 'user' });\nBalance.belongsTo(User, { foreignKey: 'frozen_by', as: 'frozenBy' });\n// Note: Cryptocurrency association will be defined in the Cryptocurrency model to avoid circular dependency\n\n// Instance methods\nBalance.prototype.hasAvailableBalance = function(amount) {\n  return parseFloat(this.available_balance) >= parseFloat(amount);\n};\n\nBalance.prototype.hasTotalBalance = function(amount) {\n  return parseFloat(this.total_balance) >= parseFloat(amount);\n};\n\nBalance.prototype.canWithdraw = function(amount) {\n  return !this.is_frozen && this.hasAvailableBalance(amount);\n};\n\nBalance.prototype.canTrade = function(amount) {\n  return !this.is_frozen && this.hasAvailableBalance(amount);\n};\n\nBalance.prototype.lockBalance = async function(amount, reason = null) {\n  if (!this.hasAvailableBalance(amount)) {\n    throw new Error('Insufficient available balance');\n  }\n  \n  const lockAmount = parseFloat(amount);\n  this.available_balance = parseFloat(this.available_balance) - lockAmount;\n  this.locked_balance = parseFloat(this.locked_balance) + lockAmount;\n  \n  if (reason) {\n    this.metadata = {\n      ...this.metadata,\n      last_lock_reason: reason,\n      last_lock_at: new Date()\n    };\n  }\n  \n  await this.save();\n  return this;\n};\n\nBalance.prototype.unlockBalance = async function(amount, reason = null) {\n  const unlockAmount = parseFloat(amount);\n  \n  if (parseFloat(this.locked_balance) < unlockAmount) {\n    throw new Error('Insufficient locked balance');\n  }\n  \n  this.locked_balance = parseFloat(this.locked_balance) - unlockAmount;\n  this.available_balance = parseFloat(this.available_balance) + unlockAmount;\n  \n  if (reason) {\n    this.metadata = {\n      ...this.metadata,\n      last_unlock_reason: reason,\n      last_unlock_at: new Date()\n    };\n  }\n  \n  await this.save();\n  return this;\n};\n\nBalance.prototype.addBalance = async function(amount, type = 'available') {\n  const addAmount = parseFloat(amount);\n  \n  if (type === 'available') {\n    this.available_balance = parseFloat(this.available_balance) + addAmount;\n  } else if (type === 'locked') {\n    this.locked_balance = parseFloat(this.locked_balance) + addAmount;\n  } else {\n    throw new Error('Invalid balance type');\n  }\n  \n  await this.save();\n  return this;\n};\n\nBalance.prototype.subtractBalance = async function(amount, type = 'available') {\n  const subtractAmount = parseFloat(amount);\n  \n  if (type === 'available') {\n    if (parseFloat(this.available_balance) < subtractAmount) {\n      throw new Error('Insufficient available balance');\n    }\n    this.available_balance = parseFloat(this.available_balance) - subtractAmount;\n  } else if (type === 'locked') {\n    if (parseFloat(this.locked_balance) < subtractAmount) {\n      throw new Error('Insufficient locked balance');\n    }\n    this.locked_balance = parseFloat(this.locked_balance) - subtractAmount;\n  } else {\n    throw new Error('Invalid balance type');\n  }\n  \n  await this.save();\n  return this;\n};\n\nBalance.prototype.freeze = async function(reason, frozenBy) {\n  this.is_frozen = true;\n  this.freeze_reason = reason;\n  this.frozen_at = new Date();\n  this.frozen_by = frozenBy;\n  \n  await this.save();\n  return this;\n};\n\nBalance.prototype.unfreeze = async function() {\n  this.is_frozen = false;\n  this.freeze_reason = null;\n  this.frozen_at = null;\n  this.frozen_by = null;\n  \n  await this.save();\n  return this;\n};\n\n// Static methods\nBalance.getUserBalance = async function(userId, currencyId) {\n  return await Balance.findOne({\n    where: {\n      user_id: userId,\n      currency_id: currencyId\n    }\n  });\n};\n\nBalance.getUserBalances = async function(userId) {\n  return await Balance.findAll({\n    where: { user_id: userId },\n    include: [{\n      model: sequelize.models.Cryptocurrency,\n      as: 'currency',\n      attributes: ['symbol', 'name', 'type']\n    }],\n    order: [['currency_id', 'ASC']]\n  });\n};\n\nBalance.createOrUpdateBalance = async function(userId, currencyId, availableAmount = 0, lockedAmount = 0) {\n  const [balance, created] = await Balance.findOrCreate({\n    where: {\n      user_id: userId,\n      currency_id: currencyId\n    },\n    defaults: {\n      available_balance: availableAmount,\n      locked_balance: lockedAmount\n    }\n  });\n  \n  if (!created && (availableAmount !== 0 || lockedAmount !== 0)) {\n    balance.available_balance = parseFloat(balance.available_balance) + parseFloat(availableAmount);\n    balance.locked_balance = parseFloat(balance.locked_balance) + parseFloat(lockedAmount);\n    await balance.save();\n  }\n  \n  return balance;\n};\n\nBalance.getTotalBalanceValue = async function(userId, quoteCurrency = 'USDT') {\n  // This would typically integrate with price service to calculate total portfolio value\n  // For now, we'll return the balances without conversion\n  const balances = await Balance.getUserBalances(userId);\n  \n  return balances.map(balance => ({\n    currency_id: balance.currency_id,\n    available: balance.available_balance,\n    locked: balance.locked_balance,\n    total: balance.total_balance,\n    // value_in_quote: balance.total_balance * price // Would need price service integration\n  }));\n};\n\nBalance.getFrozenBalances = async function(userId = null) {\n  const where = { is_frozen: true };\n  \n  if (userId) {\n    where.user_id = userId;\n  }\n  \n  return await Balance.findAll({\n    where,\n    include: [\n      { model: User, as: 'user', attributes: ['id', 'username', 'email'] },\n      { model: User, as: 'frozenBy', attributes: ['id', 'username'] }\n    ],\n    order: [['frozen_at', 'DESC']]\n  });\n};\n\n// Transfer between users (for internal transfers)\nBalance.transfer = async function(fromUserId, toUserId, currencyId, amount, reason = null) {\n  const transaction = await sequelize.transaction();\n  \n  try {\n    // Get sender balance\n    const fromBalance = await Balance.getUserBalance(fromUserId, currencyId);\n    if (!fromBalance || !fromBalance.hasAvailableBalance(amount)) {\n      throw new Error('Insufficient balance for transfer');\n    }\n    \n    // Get or create receiver balance\n    const toBalance = await Balance.createOrUpdateBalance(toUserId, currencyId, 0, 0);\n    \n    // Perform transfer\n    await fromBalance.subtractBalance(amount, 'available');\n    await toBalance.addBalance(amount, 'available');\n    \n    // Update metadata\n    const transferMetadata = {\n      transfer_reason: reason,\n      transfer_at: new Date(),\n      transfer_amount: amount\n    };\n    \n    fromBalance.metadata = { ...fromBalance.metadata, last_transfer_out: transferMetadata };\n    toBalance.metadata = { ...toBalance.metadata, last_transfer_in: transferMetadata };\n    \n    await fromBalance.save({ transaction });\n    await toBalance.save({ transaction });\n    \n    await transaction.commit();\n    \n    return {\n      from: fromBalance,\n      to: toBalance,\n      amount,\n      currency_id: currencyId\n    };\n  } catch (error) {\n    await transaction.rollback();\n    throw error;\n  }\n};\n\nmodule.exports = Balance;"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAM;EAAEE;AAAU,CAAC;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,WAAW,CAAC;AAC1C,MAAM;EAAEC;AAAU,CAAC;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AACnD,MAAME,IAAI;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA,MAAMG,OAAO;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,OAAGE,SAAS,CAACG,MAAM,CAAC,SAAS,EAAE;EAC1CC,EAAE,EAAE;IACFC,IAAI,EAAER,SAAS,CAACS,IAAI;IACpBC,YAAY,EAAEV,SAAS,CAACW,MAAM;IAC9BC,UAAU,EAAE;EACd,CAAC;EAED;EACAC,OAAO,EAAE;IACPL,IAAI,EAAER,SAAS,CAACS,IAAI;IACpBK,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE;MACVC,KAAK,EAAE,OAAO;MACdC,GAAG,EAAE;IACP,CAAC;IACDC,OAAO,EAAE;EACX,CAAC;EAED;EACAC,WAAW,EAAE;IACXX,IAAI,EAAER,SAAS,CAACS,IAAI;IACpBK,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE;MACVC,KAAK,EAAE,kBAAkB;MACzBC,GAAG,EAAE;IACP,CAAC;IACDC,OAAO,EAAE;EACX,CAAC;EAED;EACAE,iBAAiB,EAAE;IACjBZ,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC;IAC/BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAEDI,cAAc,EAAE;IACdd,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC;IAC/BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAED;EACAK,aAAa,EAAE;IACbf,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC;IAC/BP,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAED;EACAM,eAAe,EAAE;IACfhB,IAAI,EAAER,SAAS,CAACyB,IAAI;IACpBX,SAAS,EAAE,IAAI;IACfI,OAAO,EAAE;EACX,CAAC;EAEDQ,kBAAkB,EAAE;IAClBlB,IAAI,EAAER,SAAS,CAACyB,IAAI;IACpBX,SAAS,EAAE,IAAI;IACfI,OAAO,EAAE;EACX,CAAC;EAEDS,aAAa,EAAE;IACbnB,IAAI,EAAER,SAAS,CAACyB,IAAI;IACpBX,SAAS,EAAE,IAAI;IACfI,OAAO,EAAE;EACX,CAAC;EAED;EACAU,SAAS,EAAE;IACTpB,IAAI,EAAER,SAAS,CAAC6B,OAAO;IACvBnB,YAAY,EAAE,KAAK;IACnBQ,OAAO,EAAE;EACX,CAAC;EAEDY,aAAa,EAAE;IACbtB,IAAI,EAAER,SAAS,CAAC+B,IAAI;IACpBjB,SAAS,EAAE,IAAI;IACfI,OAAO,EAAE;EACX,CAAC;EAEDc,SAAS,EAAE;IACTxB,IAAI,EAAER,SAAS,CAACyB,IAAI;IACpBX,SAAS,EAAE,IAAI;IACfI,OAAO,EAAE;EACX,CAAC;EAEDe,SAAS,EAAE;IACTzB,IAAI,EAAER,SAAS,CAACS,IAAI;IACpBK,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE;MACVC,KAAK,EAAE,OAAO;MACdC,GAAG,EAAE;IACP,CAAC;IACDC,OAAO,EAAE;EACX,CAAC;EAED;EACAgB,WAAW,EAAE;IACX1B,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAED;EACAiB,QAAQ,EAAE;IACR3B,IAAI,EAAER,SAAS,CAACoC,KAAK;IACrBtB,SAAS,EAAE,IAAI;IACfI,OAAO,EAAE;EACX,CAAC;EAED;EACAmB,cAAc,EAAE;IACd7B,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAEDoB,eAAe,EAAE;IACf9B,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAEDqB,eAAe,EAAE;IACf/B,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAEDsB,eAAe,EAAE;IACfhC,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAEDuB,cAAc,EAAE;IACdjC,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAEDwB,YAAY,EAAE;IACZlC,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAEDyB,cAAc,EAAE;IACdnC,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAED0B,iBAAiB,EAAE;IACjBpC,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAED2B,kBAAkB,EAAE;IAClBrC,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAED4B,iBAAiB,EAAE;IACjBtC,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BP,SAAS,EAAE,IAAI;IACfI,OAAO,EAAE;EACX,CAAC;EAED6B,aAAa,EAAE;IACbvC,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAED8B,aAAa,EAAE;IACbxC,IAAI,EAAER,SAAS,CAACiD,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;IAC7CnC,SAAS,EAAE,IAAI;IACfI,OAAO,EAAE;EACX,CAAC;EAEDgC,eAAe,EAAE;IACf1C,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAEDiC,YAAY,EAAE;IACZ3C,IAAI,EAAER,SAAS,CAACqB,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9BX,YAAY,EAAE,CAAC;IACfI,SAAS,EAAE,KAAK;IAChBI,OAAO,EAAE;EACX,CAAC;EAED;EACAkC,UAAU,EAAE;IACV5C,IAAI,EAAER,SAAS,CAACyB,IAAI;IACpBf,YAAY,EAAEV,SAAS,CAACqD,GAAG;IAC3BvC,SAAS,EAAE;EACb,CAAC;EAEDwC,UAAU,EAAE;IACV9C,IAAI,EAAER,SAAS,CAACyB,IAAI;IACpBf,YAAY,EAAEV,SAAS,CAACqD,GAAG;IAC3BvC,SAAS,EAAE;EACb;AACF,CAAC,EAAE;EACDyC,SAAS,EAAE,eAAe;EAC1BC,UAAU,EAAE,IAAI;EAChBC,SAAS,EAAE,YAAY;EACvBC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,CACP;IACEC,MAAM,EAAE,IAAI;IACZC,MAAM,EAAE,CAAC,SAAS,EAAE,aAAa;EACnC,CAAC,EACD;IACEA,MAAM,EAAE,CAAC,SAAS;EACpB,CAAC,EACD;IACEA,MAAM,EAAE,CAAC,aAAa;EACxB,CAAC,EACD;IACEA,MAAM,EAAE,CAAC,WAAW;EACtB,CAAC,EACD;IACEA,MAAM,EAAE,CAAC,mBAAmB,CAAC,CAAC;EAChC,CAAC,EACD;IACEA,MAAM,EAAE,CAAC,gBAAgB,CAAC,CAAC;EAC7B,CAAC,CACF;EACDC,QAAQ,EAAE;IACR;IACAC,gBAAgBA,CAAA,EAAG;MAAA;MAAAjE,cAAA,GAAAkE,CAAA;MAAAlE,cAAA,GAAAG,CAAA;MACjB,IAAIgE,UAAU,CAAC,IAAI,CAAC7C,iBAAiB,CAAC,GAAG,CAAC,EAAE;QAAA;QAAAtB,cAAA,GAAAoE,CAAA;QAAApE,cAAA,GAAAG,CAAA;QAC1C,MAAM,IAAIkE,KAAK,CAAC,sCAAsC,CAAC;MACzD,CAAC;MAAA;MAAA;QAAArE,cAAA,GAAAoE,CAAA;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACD,IAAIgE,UAAU,CAAC,IAAI,CAAC3C,cAAc,CAAC,GAAG,CAAC,EAAE;QAAA;QAAAxB,cAAA,GAAAoE,CAAA;QAAApE,cAAA,GAAAG,CAAA;QACvC,MAAM,IAAIkE,KAAK,CAAC,mCAAmC,CAAC;MACtD,CAAC;MAAA;MAAA;QAAArE,cAAA,GAAAoE,CAAA;MAAA;IACH;EACF;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApE,cAAA,GAAAG,CAAA;AACAI,OAAO,CAAC+D,SAAS,CAAChE,IAAI,EAAE;EAAEiE,UAAU,EAAE,SAAS;EAAEC,EAAE,EAAE;AAAO,CAAC,CAAC;AAAC;AAAAxE,cAAA,GAAAG,CAAA;AAC/DI,OAAO,CAAC+D,SAAS,CAAChE,IAAI,EAAE;EAAEiE,UAAU,EAAE,WAAW;EAAEC,EAAE,EAAE;AAAW,CAAC,CAAC;AACpE;;AAEA;AAAA;AAAAxE,cAAA,GAAAG,CAAA;AACAI,OAAO,CAACkE,SAAS,CAACC,mBAAmB,GAAG,UAASC,MAAM,EAAE;EAAA;EAAA3E,cAAA,GAAAkE,CAAA;EAAAlE,cAAA,GAAAG,CAAA;EACvD,OAAOgE,UAAU,CAAC,IAAI,CAAC7C,iBAAiB,CAAC,IAAI6C,UAAU,CAACQ,MAAM,CAAC;AACjE,CAAC;AAAC;AAAA3E,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACkE,SAAS,CAACG,eAAe,GAAG,UAASD,MAAM,EAAE;EAAA;EAAA3E,cAAA,GAAAkE,CAAA;EAAAlE,cAAA,GAAAG,CAAA;EACnD,OAAOgE,UAAU,CAAC,IAAI,CAAC1C,aAAa,CAAC,IAAI0C,UAAU,CAACQ,MAAM,CAAC;AAC7D,CAAC;AAAC;AAAA3E,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACkE,SAAS,CAACI,WAAW,GAAG,UAASF,MAAM,EAAE;EAAA;EAAA3E,cAAA,GAAAkE,CAAA;EAAAlE,cAAA,GAAAG,CAAA;EAC/C,OAAO,2BAAAH,cAAA,GAAAoE,CAAA,WAAC,IAAI,CAACtC,SAAS;EAAA;EAAA,CAAA9B,cAAA,GAAAoE,CAAA,UAAI,IAAI,CAACM,mBAAmB,CAACC,MAAM,CAAC;AAC5D,CAAC;AAAC;AAAA3E,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACkE,SAAS,CAACK,QAAQ,GAAG,UAASH,MAAM,EAAE;EAAA;EAAA3E,cAAA,GAAAkE,CAAA;EAAAlE,cAAA,GAAAG,CAAA;EAC5C,OAAO,2BAAAH,cAAA,GAAAoE,CAAA,WAAC,IAAI,CAACtC,SAAS;EAAA;EAAA,CAAA9B,cAAA,GAAAoE,CAAA,UAAI,IAAI,CAACM,mBAAmB,CAACC,MAAM,CAAC;AAC5D,CAAC;AAAC;AAAA3E,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACkE,SAAS,CAACM,WAAW,GAAG,gBAAeJ,MAAM,EAAEK,MAAM;AAAA;AAAA,CAAAhF,cAAA,GAAAoE,CAAA,UAAG,IAAI,GAAE;EAAA;EAAApE,cAAA,GAAAkE,CAAA;EAAAlE,cAAA,GAAAG,CAAA;EACpE,IAAI,CAAC,IAAI,CAACuE,mBAAmB,CAACC,MAAM,CAAC,EAAE;IAAA;IAAA3E,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IACrC,MAAM,IAAIkE,KAAK,CAAC,gCAAgC,CAAC;EACnD,CAAC;EAAA;EAAA;IAAArE,cAAA,GAAAoE,CAAA;EAAA;EAED,MAAMa,UAAU;EAAA;EAAA,CAAAjF,cAAA,GAAAG,CAAA,QAAGgE,UAAU,CAACQ,MAAM,CAAC;EAAC;EAAA3E,cAAA,GAAAG,CAAA;EACtC,IAAI,CAACmB,iBAAiB,GAAG6C,UAAU,CAAC,IAAI,CAAC7C,iBAAiB,CAAC,GAAG2D,UAAU;EAAC;EAAAjF,cAAA,GAAAG,CAAA;EACzE,IAAI,CAACqB,cAAc,GAAG2C,UAAU,CAAC,IAAI,CAAC3C,cAAc,CAAC,GAAGyD,UAAU;EAAC;EAAAjF,cAAA,GAAAG,CAAA;EAEnE,IAAI6E,MAAM,EAAE;IAAA;IAAAhF,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IACV,IAAI,CAACkC,QAAQ,GAAG;MACd,GAAG,IAAI,CAACA,QAAQ;MAChB6C,gBAAgB,EAAEF,MAAM;MACxBG,YAAY,EAAE,IAAIC,IAAI,CAAC;IACzB,CAAC;EACH,CAAC;EAAA;EAAA;IAAApF,cAAA,GAAAoE,CAAA;EAAA;EAAApE,cAAA,GAAAG,CAAA;EAED,MAAM,IAAI,CAACkF,IAAI,CAAC,CAAC;EAAC;EAAArF,cAAA,GAAAG,CAAA;EAClB,OAAO,IAAI;AACb,CAAC;AAAC;AAAAH,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACkE,SAAS,CAACa,aAAa,GAAG,gBAAeX,MAAM,EAAEK,MAAM;AAAA;AAAA,CAAAhF,cAAA,GAAAoE,CAAA,UAAG,IAAI,GAAE;EAAA;EAAApE,cAAA,GAAAkE,CAAA;EACtE,MAAMqB,YAAY;EAAA;EAAA,CAAAvF,cAAA,GAAAG,CAAA,QAAGgE,UAAU,CAACQ,MAAM,CAAC;EAAC;EAAA3E,cAAA,GAAAG,CAAA;EAExC,IAAIgE,UAAU,CAAC,IAAI,CAAC3C,cAAc,CAAC,GAAG+D,YAAY,EAAE;IAAA;IAAAvF,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IAClD,MAAM,IAAIkE,KAAK,CAAC,6BAA6B,CAAC;EAChD,CAAC;EAAA;EAAA;IAAArE,cAAA,GAAAoE,CAAA;EAAA;EAAApE,cAAA,GAAAG,CAAA;EAED,IAAI,CAACqB,cAAc,GAAG2C,UAAU,CAAC,IAAI,CAAC3C,cAAc,CAAC,GAAG+D,YAAY;EAAC;EAAAvF,cAAA,GAAAG,CAAA;EACrE,IAAI,CAACmB,iBAAiB,GAAG6C,UAAU,CAAC,IAAI,CAAC7C,iBAAiB,CAAC,GAAGiE,YAAY;EAAC;EAAAvF,cAAA,GAAAG,CAAA;EAE3E,IAAI6E,MAAM,EAAE;IAAA;IAAAhF,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IACV,IAAI,CAACkC,QAAQ,GAAG;MACd,GAAG,IAAI,CAACA,QAAQ;MAChBmD,kBAAkB,EAAER,MAAM;MAC1BS,cAAc,EAAE,IAAIL,IAAI,CAAC;IAC3B,CAAC;EACH,CAAC;EAAA;EAAA;IAAApF,cAAA,GAAAoE,CAAA;EAAA;EAAApE,cAAA,GAAAG,CAAA;EAED,MAAM,IAAI,CAACkF,IAAI,CAAC,CAAC;EAAC;EAAArF,cAAA,GAAAG,CAAA;EAClB,OAAO,IAAI;AACb,CAAC;AAAC;AAAAH,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACkE,SAAS,CAACiB,UAAU,GAAG,gBAAef,MAAM,EAAEjE,IAAI;AAAA;AAAA,CAAAV,cAAA,GAAAoE,CAAA,WAAG,WAAW,GAAE;EAAA;EAAApE,cAAA,GAAAkE,CAAA;EACxE,MAAMyB,SAAS;EAAA;EAAA,CAAA3F,cAAA,GAAAG,CAAA,QAAGgE,UAAU,CAACQ,MAAM,CAAC;EAAC;EAAA3E,cAAA,GAAAG,CAAA;EAErC,IAAIO,IAAI,KAAK,WAAW,EAAE;IAAA;IAAAV,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IACxB,IAAI,CAACmB,iBAAiB,GAAG6C,UAAU,CAAC,IAAI,CAAC7C,iBAAiB,CAAC,GAAGqE,SAAS;EACzE,CAAC,MAAM;IAAA;IAAA3F,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IAAA,IAAIO,IAAI,KAAK,QAAQ,EAAE;MAAA;MAAAV,cAAA,GAAAoE,CAAA;MAAApE,cAAA,GAAAG,CAAA;MAC5B,IAAI,CAACqB,cAAc,GAAG2C,UAAU,CAAC,IAAI,CAAC3C,cAAc,CAAC,GAAGmE,SAAS;IACnE,CAAC,MAAM;MAAA;MAAA3F,cAAA,GAAAoE,CAAA;MAAApE,cAAA,GAAAG,CAAA;MACL,MAAM,IAAIkE,KAAK,CAAC,sBAAsB,CAAC;IACzC;EAAA;EAAC;EAAArE,cAAA,GAAAG,CAAA;EAED,MAAM,IAAI,CAACkF,IAAI,CAAC,CAAC;EAAC;EAAArF,cAAA,GAAAG,CAAA;EAClB,OAAO,IAAI;AACb,CAAC;AAAC;AAAAH,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACkE,SAAS,CAACmB,eAAe,GAAG,gBAAejB,MAAM,EAAEjE,IAAI;AAAA;AAAA,CAAAV,cAAA,GAAAoE,CAAA,WAAG,WAAW,GAAE;EAAA;EAAApE,cAAA,GAAAkE,CAAA;EAC7E,MAAM2B,cAAc;EAAA;EAAA,CAAA7F,cAAA,GAAAG,CAAA,QAAGgE,UAAU,CAACQ,MAAM,CAAC;EAAC;EAAA3E,cAAA,GAAAG,CAAA;EAE1C,IAAIO,IAAI,KAAK,WAAW,EAAE;IAAA;IAAAV,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IACxB,IAAIgE,UAAU,CAAC,IAAI,CAAC7C,iBAAiB,CAAC,GAAGuE,cAAc,EAAE;MAAA;MAAA7F,cAAA,GAAAoE,CAAA;MAAApE,cAAA,GAAAG,CAAA;MACvD,MAAM,IAAIkE,KAAK,CAAC,gCAAgC,CAAC;IACnD,CAAC;IAAA;IAAA;MAAArE,cAAA,GAAAoE,CAAA;IAAA;IAAApE,cAAA,GAAAG,CAAA;IACD,IAAI,CAACmB,iBAAiB,GAAG6C,UAAU,CAAC,IAAI,CAAC7C,iBAAiB,CAAC,GAAGuE,cAAc;EAC9E,CAAC,MAAM;IAAA;IAAA7F,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IAAA,IAAIO,IAAI,KAAK,QAAQ,EAAE;MAAA;MAAAV,cAAA,GAAAoE,CAAA;MAAApE,cAAA,GAAAG,CAAA;MAC5B,IAAIgE,UAAU,CAAC,IAAI,CAAC3C,cAAc,CAAC,GAAGqE,cAAc,EAAE;QAAA;QAAA7F,cAAA,GAAAoE,CAAA;QAAApE,cAAA,GAAAG,CAAA;QACpD,MAAM,IAAIkE,KAAK,CAAC,6BAA6B,CAAC;MAChD,CAAC;MAAA;MAAA;QAAArE,cAAA,GAAAoE,CAAA;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACD,IAAI,CAACqB,cAAc,GAAG2C,UAAU,CAAC,IAAI,CAAC3C,cAAc,CAAC,GAAGqE,cAAc;IACxE,CAAC,MAAM;MAAA;MAAA7F,cAAA,GAAAoE,CAAA;MAAApE,cAAA,GAAAG,CAAA;MACL,MAAM,IAAIkE,KAAK,CAAC,sBAAsB,CAAC;IACzC;EAAA;EAAC;EAAArE,cAAA,GAAAG,CAAA;EAED,MAAM,IAAI,CAACkF,IAAI,CAAC,CAAC;EAAC;EAAArF,cAAA,GAAAG,CAAA;EAClB,OAAO,IAAI;AACb,CAAC;AAAC;AAAAH,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACkE,SAAS,CAACqB,MAAM,GAAG,gBAAed,MAAM,EAAEe,QAAQ,EAAE;EAAA;EAAA/F,cAAA,GAAAkE,CAAA;EAAAlE,cAAA,GAAAG,CAAA;EAC1D,IAAI,CAAC2B,SAAS,GAAG,IAAI;EAAC;EAAA9B,cAAA,GAAAG,CAAA;EACtB,IAAI,CAAC6B,aAAa,GAAGgD,MAAM;EAAC;EAAAhF,cAAA,GAAAG,CAAA;EAC5B,IAAI,CAAC+B,SAAS,GAAG,IAAIkD,IAAI,CAAC,CAAC;EAAC;EAAApF,cAAA,GAAAG,CAAA;EAC5B,IAAI,CAACgC,SAAS,GAAG4D,QAAQ;EAAC;EAAA/F,cAAA,GAAAG,CAAA;EAE1B,MAAM,IAAI,CAACkF,IAAI,CAAC,CAAC;EAAC;EAAArF,cAAA,GAAAG,CAAA;EAClB,OAAO,IAAI;AACb,CAAC;AAAC;AAAAH,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACkE,SAAS,CAACuB,QAAQ,GAAG,kBAAiB;EAAA;EAAAhG,cAAA,GAAAkE,CAAA;EAAAlE,cAAA,GAAAG,CAAA;EAC5C,IAAI,CAAC2B,SAAS,GAAG,KAAK;EAAC;EAAA9B,cAAA,GAAAG,CAAA;EACvB,IAAI,CAAC6B,aAAa,GAAG,IAAI;EAAC;EAAAhC,cAAA,GAAAG,CAAA;EAC1B,IAAI,CAAC+B,SAAS,GAAG,IAAI;EAAC;EAAAlC,cAAA,GAAAG,CAAA;EACtB,IAAI,CAACgC,SAAS,GAAG,IAAI;EAAC;EAAAnC,cAAA,GAAAG,CAAA;EAEtB,MAAM,IAAI,CAACkF,IAAI,CAAC,CAAC;EAAC;EAAArF,cAAA,GAAAG,CAAA;EAClB,OAAO,IAAI;AACb,CAAC;;AAED;AAAA;AAAAH,cAAA,GAAAG,CAAA;AACAI,OAAO,CAAC0F,cAAc,GAAG,gBAAeC,MAAM,EAAEC,UAAU,EAAE;EAAA;EAAAnG,cAAA,GAAAkE,CAAA;EAAAlE,cAAA,GAAAG,CAAA;EAC1D,OAAO,MAAMI,OAAO,CAAC6F,OAAO,CAAC;IAC3BC,KAAK,EAAE;MACLtF,OAAO,EAAEmF,MAAM;MACf7E,WAAW,EAAE8E;IACf;EACF,CAAC,CAAC;AACJ,CAAC;AAAC;AAAAnG,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAAC+F,eAAe,GAAG,gBAAeJ,MAAM,EAAE;EAAA;EAAAlG,cAAA,GAAAkE,CAAA;EAAAlE,cAAA,GAAAG,CAAA;EAC/C,OAAO,MAAMI,OAAO,CAACgG,OAAO,CAAC;IAC3BF,KAAK,EAAE;MAAEtF,OAAO,EAAEmF;IAAO,CAAC;IAC1BM,OAAO,EAAE,CAAC;MACRtF,KAAK,EAAEb,SAAS,CAACoG,MAAM,CAACC,cAAc;MACtClC,EAAE,EAAE,UAAU;MACdmC,UAAU,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM;IACvC,CAAC,CAAC;IACFC,KAAK,EAAE,CAAC,CAAC,aAAa,EAAE,KAAK,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC;AAAC;AAAA5G,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACsG,qBAAqB,GAAG,gBAAeX,MAAM,EAAEC,UAAU,EAAEW,eAAe;AAAA;AAAA,CAAA9G,cAAA,GAAAoE,CAAA,WAAG,CAAC,GAAE2C,YAAY;AAAA;AAAA,CAAA/G,cAAA,GAAAoE,CAAA,WAAG,CAAC,GAAE;EAAA;EAAApE,cAAA,GAAAkE,CAAA;EACxG,MAAM,CAAC8C,OAAO,EAAEC,OAAO,CAAC;EAAA;EAAA,CAAAjH,cAAA,GAAAG,CAAA,QAAG,MAAMI,OAAO,CAAC2G,YAAY,CAAC;IACpDb,KAAK,EAAE;MACLtF,OAAO,EAAEmF,MAAM;MACf7E,WAAW,EAAE8E;IACf,CAAC;IACDgB,QAAQ,EAAE;MACR7F,iBAAiB,EAAEwF,eAAe;MAClCtF,cAAc,EAAEuF;IAClB;EACF,CAAC,CAAC;EAAC;EAAA/G,cAAA,GAAAG,CAAA;EAEH;EAAI;EAAA,CAAAH,cAAA,GAAAoE,CAAA,YAAC6C,OAAO;EAAK;EAAA,CAAAjH,cAAA,GAAAoE,CAAA,WAAA0C,eAAe,KAAK,CAAC;EAAA;EAAA,CAAA9G,cAAA,GAAAoE,CAAA,WAAI2C,YAAY,KAAK,CAAC,EAAC,EAAE;IAAA;IAAA/G,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IAC7D6G,OAAO,CAAC1F,iBAAiB,GAAG6C,UAAU,CAAC6C,OAAO,CAAC1F,iBAAiB,CAAC,GAAG6C,UAAU,CAAC2C,eAAe,CAAC;IAAC;IAAA9G,cAAA,GAAAG,CAAA;IAChG6G,OAAO,CAACxF,cAAc,GAAG2C,UAAU,CAAC6C,OAAO,CAACxF,cAAc,CAAC,GAAG2C,UAAU,CAAC4C,YAAY,CAAC;IAAC;IAAA/G,cAAA,GAAAG,CAAA;IACvF,MAAM6G,OAAO,CAAC3B,IAAI,CAAC,CAAC;EACtB,CAAC;EAAA;EAAA;IAAArF,cAAA,GAAAoE,CAAA;EAAA;EAAApE,cAAA,GAAAG,CAAA;EAED,OAAO6G,OAAO;AAChB,CAAC;AAAC;AAAAhH,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAAC6G,oBAAoB,GAAG,gBAAelB,MAAM,EAAEmB,aAAa;AAAA;AAAA,CAAArH,cAAA,GAAAoE,CAAA,WAAG,MAAM,GAAE;EAAA;EAAApE,cAAA,GAAAkE,CAAA;EAC5E;EACA;EACA,MAAMoD,QAAQ;EAAA;EAAA,CAAAtH,cAAA,GAAAG,CAAA,QAAG,MAAMI,OAAO,CAAC+F,eAAe,CAACJ,MAAM,CAAC;EAAC;EAAAlG,cAAA,GAAAG,CAAA;EAEvD,OAAOmH,QAAQ,CAACC,GAAG,CAACP,OAAO,IAAK;IAAA;IAAAhH,cAAA,GAAAkE,CAAA;IAAAlE,cAAA,GAAAG,CAAA;IAAA;MAC9BkB,WAAW,EAAE2F,OAAO,CAAC3F,WAAW;MAChCmG,SAAS,EAAER,OAAO,CAAC1F,iBAAiB;MACpCmG,MAAM,EAAET,OAAO,CAACxF,cAAc;MAC9BkG,KAAK,EAAEV,OAAO,CAACvF;MACf;IACF,CAAC;EAAD,CAAE,CAAC;AACL,CAAC;AAAC;AAAAzB,cAAA,GAAAG,CAAA;AAEFI,OAAO,CAACoH,iBAAiB,GAAG,gBAAezB,MAAM;AAAA;AAAA,CAAAlG,cAAA,GAAAoE,CAAA,WAAG,IAAI,GAAE;EAAA;EAAApE,cAAA,GAAAkE,CAAA;EACxD,MAAMmC,KAAK;EAAA;EAAA,CAAArG,cAAA,GAAAG,CAAA,QAAG;IAAE2B,SAAS,EAAE;EAAK,CAAC;EAAC;EAAA9B,cAAA,GAAAG,CAAA;EAElC,IAAI+F,MAAM,EAAE;IAAA;IAAAlG,cAAA,GAAAoE,CAAA;IAAApE,cAAA,GAAAG,CAAA;IACVkG,KAAK,CAACtF,OAAO,GAAGmF,MAAM;EACxB,CAAC;EAAA;EAAA;IAAAlG,cAAA,GAAAoE,CAAA;EAAA;EAAApE,cAAA,GAAAG,CAAA;EAED,OAAO,MAAMI,OAAO,CAACgG,OAAO,CAAC;IAC3BF,KAAK;IACLG,OAAO,EAAE,CACP;MAAEtF,KAAK,EAAEZ,IAAI;MAAEkE,EAAE,EAAE,MAAM;MAAEmC,UAAU,EAAE,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO;IAAE,CAAC,EACpE;MAAEzF,KAAK,EAAEZ,IAAI;MAAEkE,EAAE,EAAE,UAAU;MAAEmC,UAAU,EAAE,CAAC,IAAI,EAAE,UAAU;IAAE,CAAC,CAChE;IACDC,KAAK,EAAE,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC;EAC/B,CAAC,CAAC;AACJ,CAAC;;AAED;AAAA;AAAA5G,cAAA,GAAAG,CAAA;AACAI,OAAO,CAACqH,QAAQ,GAAG,gBAAeC,UAAU,EAAEC,QAAQ,EAAE3B,UAAU,EAAExB,MAAM,EAAEK,MAAM;AAAA;AAAA,CAAAhF,cAAA,GAAAoE,CAAA,WAAG,IAAI,GAAE;EAAA;EAAApE,cAAA,GAAAkE,CAAA;EACzF,MAAM6D,WAAW;EAAA;EAAA,CAAA/H,cAAA,GAAAG,CAAA,QAAG,MAAME,SAAS,CAAC0H,WAAW,CAAC,CAAC;EAAC;EAAA/H,cAAA,GAAAG,CAAA;EAElD,IAAI;IACF;IACA,MAAM6H,WAAW;IAAA;IAAA,CAAAhI,cAAA,GAAAG,CAAA,QAAG,MAAMI,OAAO,CAAC0F,cAAc,CAAC4B,UAAU,EAAE1B,UAAU,CAAC;IAAC;IAAAnG,cAAA,GAAAG,CAAA;IACzE;IAAI;IAAA,CAAAH,cAAA,GAAAoE,CAAA,YAAC4D,WAAW;IAAA;IAAA,CAAAhI,cAAA,GAAAoE,CAAA,WAAI,CAAC4D,WAAW,CAACtD,mBAAmB,CAACC,MAAM,CAAC,GAAE;MAAA;MAAA3E,cAAA,GAAAoE,CAAA;MAAApE,cAAA,GAAAG,CAAA;MAC5D,MAAM,IAAIkE,KAAK,CAAC,mCAAmC,CAAC;IACtD,CAAC;IAAA;IAAA;MAAArE,cAAA,GAAAoE,CAAA;IAAA;;IAED;IACA,MAAM6D,SAAS;IAAA;IAAA,CAAAjI,cAAA,GAAAG,CAAA,SAAG,MAAMI,OAAO,CAACsG,qBAAqB,CAACiB,QAAQ,EAAE3B,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEjF;IAAA;IAAAnG,cAAA,GAAAG,CAAA;IACA,MAAM6H,WAAW,CAACpC,eAAe,CAACjB,MAAM,EAAE,WAAW,CAAC;IAAC;IAAA3E,cAAA,GAAAG,CAAA;IACvD,MAAM8H,SAAS,CAACvC,UAAU,CAACf,MAAM,EAAE,WAAW,CAAC;;IAE/C;IACA,MAAMuD,gBAAgB;IAAA;IAAA,CAAAlI,cAAA,GAAAG,CAAA,SAAG;MACvBgI,eAAe,EAAEnD,MAAM;MACvBoD,WAAW,EAAE,IAAIhD,IAAI,CAAC,CAAC;MACvBiD,eAAe,EAAE1D;IACnB,CAAC;IAAC;IAAA3E,cAAA,GAAAG,CAAA;IAEF6H,WAAW,CAAC3F,QAAQ,GAAG;MAAE,GAAG2F,WAAW,CAAC3F,QAAQ;MAAEiG,iBAAiB,EAAEJ;IAAiB,CAAC;IAAC;IAAAlI,cAAA,GAAAG,CAAA;IACxF8H,SAAS,CAAC5F,QAAQ,GAAG;MAAE,GAAG4F,SAAS,CAAC5F,QAAQ;MAAEkG,gBAAgB,EAAEL;IAAiB,CAAC;IAAC;IAAAlI,cAAA,GAAAG,CAAA;IAEnF,MAAM6H,WAAW,CAAC3C,IAAI,CAAC;MAAE0C;IAAY,CAAC,CAAC;IAAC;IAAA/H,cAAA,GAAAG,CAAA;IACxC,MAAM8H,SAAS,CAAC5C,IAAI,CAAC;MAAE0C;IAAY,CAAC,CAAC;IAAC;IAAA/H,cAAA,GAAAG,CAAA;IAEtC,MAAM4H,WAAW,CAACS,MAAM,CAAC,CAAC;IAAC;IAAAxI,cAAA,GAAAG,CAAA;IAE3B,OAAO;MACLsI,IAAI,EAAET,WAAW;MACjBU,EAAE,EAAET,SAAS;MACbtD,MAAM;MACNtD,WAAW,EAAE8E;IACf,CAAC;EACH,CAAC,CAAC,OAAOwC,KAAK,EAAE;IAAA;IAAA3I,cAAA,GAAAG,CAAA;IACd,MAAM4H,WAAW,CAACa,QAAQ,CAAC,CAAC;IAAC;IAAA5I,cAAA,GAAAG,CAAA;IAC7B,MAAMwI,KAAK;EACb;AACF,CAAC;AAAC;AAAA3I,cAAA,GAAAG,CAAA;AAEF0I,MAAM,CAACC,OAAO,GAAGvI,OAAO","ignoreList":[]}