{"version":3,"names":["execSync","require","path","module","exports","console","log","process","env","NODE_ENV","stdio","error","message","testDirs","join","__dirname","fs","forEach","dir","mkdirSync","recursive","BCRYPT_ROUNDS","JWT_EXPIRES_IN","JWT_REFRESH_EXPIRES_IN","DISABLE_EXTERNAL_APIS","DISABLE_EMAIL_SENDING","DISABLE_SMS_SENDING","DISABLE_BLOCKCHAIN_CALLS","ENABLE_TEST_ROUTES","ENABLE_DEBUG_LOGGING","global","mockResponses","coinmarketcap","price","change_24h","binance","volume","blockchain","bitcoin","blockHeight","difficulty","ethereum","blockNumber","gasPrice","testDataTemplates","user","email","password","firstName","lastName","isVerified","isActive","role","tradingPair","baseAsset","quoteAsset","minOrderSize","maxOrderSize","tickSize","lotSize","order","type","side","quantity","status","testCounters","users","orders","trades","sessions","testUtils","generateUniqueEmail","generateUniqueOrderId","Date","now","sleep","ms","Promise","resolve","setTimeout","randomString","length","chars","result","i","charAt","Math","floor","random"],"sources":["globalSetup.js"],"sourcesContent":["const { execSync } = require('child_process');\nconst path = require('path');\n\nmodule.exports = async () => {\n  console.log('🚀 Starting global test setup...');\n  \n  try {\n    // Set test environment\n    process.env.NODE_ENV = 'test';\n    \n    // Create test databases if they don't exist\n    console.log('📊 Setting up test databases...');\n    \n    // PostgreSQL test database setup\n    try {\n      execSync('createdb cex_test', { stdio: 'ignore' });\n      console.log('✅ PostgreSQL test database created');\n    } catch (error) {\n      // Database might already exist\n      console.log('ℹ️  PostgreSQL test database already exists or creation failed');\n    }\n    \n    // MongoDB test database setup\n    try {\n      // MongoDB databases are created automatically when first accessed\n      console.log('✅ MongoDB test database will be created on first access');\n    } catch (error) {\n      console.log('⚠️  MongoDB setup warning:', error.message);\n    }\n    \n    // Redis test database setup\n    try {\n      // Redis databases are selected by number, no creation needed\n      console.log('✅ Redis test database (DB 1) ready');\n    } catch (error) {\n      console.log('⚠️  Redis setup warning:', error.message);\n    }\n    \n    // Create test directories\n    const testDirs = [\n      path.join(__dirname, '../logs/test'),\n      path.join(__dirname, '../uploads/test'),\n      path.join(__dirname, '../temp/test'),\n      path.join(__dirname, '../coverage'),\n      path.join(__dirname, '../test-results')\n    ];\n    \n    const fs = require('fs');\n    testDirs.forEach(dir => {\n      try {\n        fs.mkdirSync(dir, { recursive: true });\n        console.log(`📁 Created test directory: ${dir}`);\n      } catch (error) {\n        console.log(`ℹ️  Directory already exists: ${dir}`);\n      }\n    });\n    \n    // Set up test-specific configurations\n    console.log('⚙️  Configuring test environment...');\n    \n    // Reduce bcrypt rounds for faster tests\n    process.env.BCRYPT_ROUNDS = '1';\n    \n    // Set shorter timeouts for tests\n    process.env.JWT_EXPIRES_IN = '1h';\n    process.env.JWT_REFRESH_EXPIRES_IN = '2h';\n    \n    // Disable external services\n    process.env.DISABLE_EXTERNAL_APIS = 'true';\n    process.env.DISABLE_EMAIL_SENDING = 'true';\n    process.env.DISABLE_SMS_SENDING = 'true';\n    process.env.DISABLE_BLOCKCHAIN_CALLS = 'true';\n    \n    // Enable test-specific features\n    process.env.ENABLE_TEST_ROUTES = 'true';\n    process.env.ENABLE_DEBUG_LOGGING = 'false';\n    \n    // Set up mock services\n    console.log('🎭 Setting up mock services...');\n    \n    // Mock external API responses\n    global.mockResponses = {\n      coinmarketcap: {\n        'BTC': { price: 50000, change_24h: 2.5 },\n        'ETH': { price: 3000, change_24h: -1.2 },\n        'USDT': { price: 1, change_24h: 0.01 }\n      },\n      binance: {\n        'BTCUSDT': { price: '50000.00', volume: '1000.50' },\n        'ETHUSDT': { price: '3000.00', volume: '2000.75' }\n      },\n      blockchain: {\n        bitcoin: { blockHeight: 700000, difficulty: 20000000000000 },\n        ethereum: { blockNumber: 15000000, gasPrice: '20000000000' }\n      }\n    };\n    \n    // Set up test data templates\n    global.testDataTemplates = {\n      user: {\n        email: 'test@example.com',\n        password: 'TestPassword123!',\n        firstName: 'Test',\n        lastName: 'User',\n        isVerified: true,\n        isActive: true,\n        role: 'user'\n      },\n      tradingPair: {\n        baseAsset: 'BTC',\n        quoteAsset: 'USDT',\n        isActive: true,\n        minOrderSize: '0.001',\n        maxOrderSize: '100',\n        tickSize: '0.01',\n        lotSize: '0.001'\n      },\n      order: {\n        type: 'limit',\n        side: 'buy',\n        quantity: '1.0',\n        price: '50000.00',\n        status: 'pending'\n      }\n    };\n    \n    // Initialize test counters\n    global.testCounters = {\n      users: 0,\n      orders: 0,\n      trades: 0,\n      sessions: 0\n    };\n    \n    // Set up test utilities\n    global.testUtils = {\n      generateUniqueEmail: () => {\n        global.testCounters.users++;\n        return `test${global.testCounters.users}@example.com`;\n      },\n      generateUniqueOrderId: () => {\n        global.testCounters.orders++;\n        return `order_${Date.now()}_${global.testCounters.orders}`;\n      },\n      sleep: (ms) => new Promise(resolve => setTimeout(resolve, ms)),\n      randomString: (length = 10) => {\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        let result = '';\n        for (let i = 0; i < length; i++) {\n          result += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        return result;\n      }\n    };\n    \n    console.log('✅ Global test setup completed successfully');\n    \n  } catch (error) {\n    console.error('❌ Global test setup failed:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]}