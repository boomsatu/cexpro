{"version":3,"names":["cov_2c032ep4pn","actualCoverage","winston","s","require","DailyRotateFile","cache","query","geoip","useragent","AUDIT_LEVELS","INFO","WARN","ERROR","CRITICAL","AUDIT_EVENTS","LOGIN_SUCCESS","LOGIN_FAILED","LOGOUT","PASSWORD_CHANGE","PASSWORD_RESET","TWO_FA_ENABLED","TWO_FA_DISABLED","TWO_FA_VERIFIED","TWO_FA_FAILED","ACCOUNT_CREATED","ACCOUNT_VERIFIED","ACCOUNT_LOCKED","ACCOUNT_UNLOCKED","ACCOUNT_DELETED","ORDER_PLACED","ORDER_CANCELLED","ORDER_FILLED","TRADE_EXECUTED","WALLET_CREATED","DEPOSIT","WITHDRAWAL","WITHDRAWAL_APPROVED","WITHDRAWAL_REJECTED","SUSPICIOUS_ACTIVITY","IP_BLOCKED","RATE_LIMIT_EXCEEDED","UNAUTHORIZED_ACCESS","ADMIN_LOGIN","ADMIN_ACTION","SYSTEM_CONFIG_CHANGE","API_KEY_CREATED","API_KEY_DELETED","API_CALL","auditLogger","createLogger","level","format","combine","timestamp","errors","stack","json","transports","filename","datePattern","zippedArchive","maxSize","maxFiles","process","env","NODE_ENV","b","add","Console","colorize","simple","AuditLoggerService","constructor","f","logger","extractClientInfo","req","ip","connection","remoteAddress","socket","userAgent","get","agent","parse","geo","lookup","browser","family","major","os","device","location","country","region","city","timezone","logEvent","eventType","data","Date","toISOString","clientInfo","auditEntry","userId","sessionId","sessionID","password","undefined","token","secret","metadata","requestId","id","correlationId","source","version","log","storeInDatabase","cacheRecentEvent","error","console","sql","values","JSON","stringify","cacheKey","recentEvents","unshift","length","splice","set","logLogin","success","additionalData","logTrade","tradeData","tradeId","symbol","side","amount","price","value","logWithdrawal","withdrawalData","withdrawalId","currency","address","status","logSecurityEvent","logAdminAction","adminUserId","action","targetUserId","getRecentEvents","limit","events","slice","searchLogs","filters","offset","paramCount","push","startDate","endDate","ipAddress","result","rows","getStatistics","timeframe","timeMap","interval","auditLoggerService","module","exports"],"sources":["auditLogger.js"],"sourcesContent":["const winston = require('winston');\nconst DailyRotateFile = require('winston-daily-rotate-file');\nconst { cache } = require('../config/redis');\nconst { query } = require('../config/database');\nconst geoip = require('geoip-lite');\nconst useragent = require('useragent');\n\n// Audit log levels\nconst AUDIT_LEVELS = {\n  INFO: 'info',\n  WARN: 'warn',\n  ERROR: 'error',\n  CRITICAL: 'critical'\n};\n\n// Audit event types\nconst AUDIT_EVENTS = {\n  // Authentication events\n  LOGIN_SUCCESS: 'login_success',\n  LOGIN_FAILED: 'login_failed',\n  LOGOUT: 'logout',\n  PASSWORD_CHANGE: 'password_change',\n  PASSWORD_RESET: 'password_reset',\n  TWO_FA_ENABLED: '2fa_enabled',\n  TWO_FA_DISABLED: '2fa_disabled',\n  TWO_FA_VERIFIED: '2fa_verified',\n  TWO_FA_FAILED: '2fa_failed',\n  \n  // Account events\n  ACCOUNT_CREATED: 'account_created',\n  ACCOUNT_VERIFIED: 'account_verified',\n  ACCOUNT_LOCKED: 'account_locked',\n  ACCOUNT_UNLOCKED: 'account_unlocked',\n  ACCOUNT_DELETED: 'account_deleted',\n  \n  // Trading events\n  ORDER_PLACED: 'order_placed',\n  ORDER_CANCELLED: 'order_cancelled',\n  ORDER_FILLED: 'order_filled',\n  TRADE_EXECUTED: 'trade_executed',\n  \n  // Wallet events\n  WALLET_CREATED: 'wallet_created',\n  DEPOSIT: 'deposit',\n  WITHDRAWAL: 'withdrawal',\n  WITHDRAWAL_APPROVED: 'withdrawal_approved',\n  WITHDRAWAL_REJECTED: 'withdrawal_rejected',\n  \n  // Security events\n  SUSPICIOUS_ACTIVITY: 'suspicious_activity',\n  IP_BLOCKED: 'ip_blocked',\n  RATE_LIMIT_EXCEEDED: 'rate_limit_exceeded',\n  UNAUTHORIZED_ACCESS: 'unauthorized_access',\n  \n  // Admin events\n  ADMIN_LOGIN: 'admin_login',\n  ADMIN_ACTION: 'admin_action',\n  SYSTEM_CONFIG_CHANGE: 'system_config_change',\n  \n  // API events\n  API_KEY_CREATED: 'api_key_created',\n  API_KEY_DELETED: 'api_key_deleted',\n  API_CALL: 'api_call'\n};\n\n// Configure Winston logger for audit logs\nconst auditLogger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    // Daily rotate file for audit logs\n    new DailyRotateFile({\n      filename: 'logs/audit-%DATE%.log',\n      datePattern: 'YYYY-MM-DD',\n      zippedArchive: true,\n      maxSize: '20m',\n      maxFiles: '30d',\n      level: 'info'\n    }),\n    \n    // Separate file for critical events\n    new DailyRotateFile({\n      filename: 'logs/audit-critical-%DATE%.log',\n      datePattern: 'YYYY-MM-DD',\n      zippedArchive: true,\n      maxSize: '20m',\n      maxFiles: '90d',\n      level: 'error'\n    })\n  ]\n});\n\n// Add console transport in development\nif (process.env.NODE_ENV === 'development') {\n  auditLogger.add(new winston.transports.Console({\n    format: winston.format.combine(\n      winston.format.colorize(),\n      winston.format.simple()\n    )\n  }));\n}\n\n// Audit Logger Service\nclass AuditLoggerService {\n  constructor() {\n    this.logger = auditLogger;\n  }\n\n  // Extract client information from request\n  extractClientInfo(req) {\n    const ip = req.ip || req.connection.remoteAddress || req.socket.remoteAddress;\n    const userAgent = req.get('User-Agent') || 'Unknown';\n    const agent = useragent.parse(userAgent);\n    const geo = geoip.lookup(ip);\n    \n    return {\n      ip,\n      userAgent,\n      browser: `${agent.family} ${agent.major}`,\n      os: `${agent.os.family} ${agent.os.major}`,\n      device: agent.device.family,\n      location: geo ? {\n        country: geo.country,\n        region: geo.region,\n        city: geo.city,\n        timezone: geo.timezone\n      } : null\n    };\n  }\n\n  // Log audit event\n  async logEvent(eventType, data = {}, req = null, level = AUDIT_LEVELS.INFO) {\n    try {\n      const timestamp = new Date().toISOString();\n      const clientInfo = req ? this.extractClientInfo(req) : null;\n      \n      const auditEntry = {\n        timestamp,\n        eventType,\n        level,\n        userId: data.userId || null,\n        sessionId: data.sessionId || (req && req.sessionID) || null,\n        clientInfo,\n        data: {\n          ...data,\n          // Remove sensitive information\n          password: undefined,\n          token: undefined,\n          secret: undefined\n        },\n        metadata: {\n          requestId: req && req.id,\n          correlationId: data.correlationId || null,\n          source: 'audit_logger',\n          version: '1.0.0'\n        }\n      };\n\n      // Log to Winston\n      this.logger.log(level, 'Audit Event', auditEntry);\n\n      // Store in database for critical events\n      if (level === AUDIT_LEVELS.ERROR || level === AUDIT_LEVELS.CRITICAL) {\n        await this.storeInDatabase(auditEntry);\n      }\n\n      // Cache recent events for quick access\n      await this.cacheRecentEvent(auditEntry);\n\n      return auditEntry;\n    } catch (error) {\n      console.error('Audit logging error:', error);\n      // Don't throw error to avoid breaking main application flow\n    }\n  }\n\n  // Store audit entry in database\n  async storeInDatabase(auditEntry) {\n    try {\n      const sql = `\n        INSERT INTO audit_logs (\n          id, timestamp, event_type, level, user_id, session_id,\n          ip_address, user_agent, location, data, metadata\n        ) VALUES (\n          gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10\n        )\n      `;\n      \n      const values = [\n        auditEntry.timestamp,\n        auditEntry.eventType,\n        auditEntry.level,\n        auditEntry.userId,\n        auditEntry.sessionId,\n        auditEntry.clientInfo?.ip,\n        auditEntry.clientInfo?.userAgent,\n        JSON.stringify(auditEntry.clientInfo?.location),\n        JSON.stringify(auditEntry.data),\n        JSON.stringify(auditEntry.metadata)\n      ];\n      \n      await query(sql, values);\n    } catch (error) {\n      console.error('Database audit logging error:', error);\n    }\n  }\n\n  // Cache recent events for monitoring\n  async cacheRecentEvent(auditEntry) {\n    try {\n      const cacheKey = `audit:recent:${auditEntry.eventType}`;\n      const recentEvents = await cache.get(cacheKey) || [];\n      \n      // Keep only last 100 events per type\n      recentEvents.unshift(auditEntry);\n      if (recentEvents.length > 100) {\n        recentEvents.splice(100);\n      }\n      \n      await cache.set(cacheKey, recentEvents, 3600); // 1 hour\n    } catch (error) {\n      console.error('Cache audit logging error:', error);\n    }\n  }\n\n  // Convenience methods for common events\n  async logLogin(userId, success, req, additionalData = {}) {\n    const eventType = success ? AUDIT_EVENTS.LOGIN_SUCCESS : AUDIT_EVENTS.LOGIN_FAILED;\n    const level = success ? AUDIT_LEVELS.INFO : AUDIT_LEVELS.WARN;\n    \n    return this.logEvent(eventType, {\n      userId,\n      success,\n      ...additionalData\n    }, req, level);\n  }\n\n  async logTrade(userId, tradeData, req) {\n    return this.logEvent(AUDIT_EVENTS.TRADE_EXECUTED, {\n      userId,\n      tradeId: tradeData.id,\n      symbol: tradeData.symbol,\n      side: tradeData.side,\n      amount: tradeData.amount,\n      price: tradeData.price,\n      value: tradeData.value\n    }, req, AUDIT_LEVELS.INFO);\n  }\n\n  async logWithdrawal(userId, withdrawalData, req) {\n    return this.logEvent(AUDIT_EVENTS.WITHDRAWAL, {\n      userId,\n      withdrawalId: withdrawalData.id,\n      currency: withdrawalData.currency,\n      amount: withdrawalData.amount,\n      address: withdrawalData.address,\n      status: withdrawalData.status\n    }, req, AUDIT_LEVELS.INFO);\n  }\n\n  async logSecurityEvent(eventType, userId, req, additionalData = {}) {\n    return this.logEvent(eventType, {\n      userId,\n      ...additionalData\n    }, req, AUDIT_LEVELS.ERROR);\n  }\n\n  async logAdminAction(adminUserId, action, targetUserId, req, additionalData = {}) {\n    return this.logEvent(AUDIT_EVENTS.ADMIN_ACTION, {\n      adminUserId,\n      action,\n      targetUserId,\n      ...additionalData\n    }, req, AUDIT_LEVELS.INFO);\n  }\n\n  // Get recent events by type\n  async getRecentEvents(eventType, limit = 50) {\n    try {\n      const cacheKey = `audit:recent:${eventType}`;\n      const events = await cache.get(cacheKey) || [];\n      return events.slice(0, limit);\n    } catch (error) {\n      console.error('Get recent events error:', error);\n      return [];\n    }\n  }\n\n  // Search audit logs in database\n  async searchLogs(filters = {}, limit = 100, offset = 0) {\n    try {\n      let sql = 'SELECT * FROM audit_logs WHERE 1=1';\n      const values = [];\n      let paramCount = 0;\n\n      if (filters.userId) {\n        sql += ` AND user_id = $${++paramCount}`;\n        values.push(filters.userId);\n      }\n\n      if (filters.eventType) {\n        sql += ` AND event_type = $${++paramCount}`;\n        values.push(filters.eventType);\n      }\n\n      if (filters.level) {\n        sql += ` AND level = $${++paramCount}`;\n        values.push(filters.level);\n      }\n\n      if (filters.startDate) {\n        sql += ` AND timestamp >= $${++paramCount}`;\n        values.push(filters.startDate);\n      }\n\n      if (filters.endDate) {\n        sql += ` AND timestamp <= $${++paramCount}`;\n        values.push(filters.endDate);\n      }\n\n      if (filters.ipAddress) {\n        sql += ` AND ip_address = $${++paramCount}`;\n        values.push(filters.ipAddress);\n      }\n\n      sql += ` ORDER BY timestamp DESC LIMIT $${++paramCount} OFFSET $${++paramCount}`;\n      values.push(limit, offset);\n\n      const result = await query(sql, values);\n      return result.rows;\n    } catch (error) {\n      console.error('Search audit logs error:', error);\n      return [];\n    }\n  }\n\n  // Get audit statistics\n  async getStatistics(timeframe = '24h') {\n    try {\n      const timeMap = {\n        '1h': '1 hour',\n        '24h': '24 hours',\n        '7d': '7 days',\n        '30d': '30 days'\n      };\n\n      const interval = timeMap[timeframe] || '24 hours';\n      \n      const sql = `\n        SELECT \n          event_type,\n          level,\n          COUNT(*) as count\n        FROM audit_logs \n        WHERE timestamp >= NOW() - INTERVAL '${interval}'\n        GROUP BY event_type, level\n        ORDER BY count DESC\n      `;\n\n      const result = await query(sql);\n      return result.rows;\n    } catch (error) {\n      console.error('Get audit statistics error:', error);\n      return [];\n    }\n  }\n}\n\n// Create and export audit logger instance\nconst auditLoggerService = new AuditLoggerService();\n\nmodule.exports = {\n  auditLoggerService,\n  AuditLoggerService,\n  AUDIT_EVENTS,\n  AUDIT_LEVELS\n};"],"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","ignoreList":[]}