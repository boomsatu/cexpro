{"version":3,"names":["cov_rwvn1oq9o","actualCoverage","WebSocket","s","require","jwt","redis","User","marketDataService","orderBookManager","orderMatchingEngine","EventEmitter","WebSocketService","constructor","f","wss","clients","Map","subscriptions","userConnections","rateLimits","config","port","b","process","env","WS_PORT","maxConnections","heartbeatInterval","rateLimitWindow","maxRequestsPerWindow","maxSubscriptionsPerClient","authRequired","setupEventListeners","initialize","Server","maxPayload","perMessageDeflate","zlibDeflateOptions","level","chunkSize","threshold","concurrencyLimit","on","handleConnection","bind","handleServerError","setInterval","sendHeartbeat","console","log","data","broadcastToSubscribers","symbol","type","interval","sendToUser","userId","makerId","side","takerId","ws","request","clientId","generateClientId","clientInfo","id","authenticated","Set","lastActivity","Date","now","ip","socket","remoteAddress","userAgent","headers","size","close","set","handleMessage","code","reason","handleDisconnection","error","sendToClient","serverTime","toISOString","client","get","checkRateLimit","sendError","message","JSON","parse","toString","handleMessageByType","handleAuth","handleSubscribe","handleUnsubscribe","handlePlaceOrder","handleCancelOrder","handleGetOrderBook","handleGetTicker","handleGetCandlesticks","handleGetOrders","handleGetTrades","sendResponse","timestamp","messageId","token","decoded","verify","JWT_SECRET","user","findByPk","is_active","has","add","username","channel","isValidChannel","sendInitialData","delete","subscribers","validation","validateOrderData","valid","orderData","user_id","source","result","placeOrder","orderId","cancelOrder","orderBook","getOrderBook","depth","ticker","getTicker","getAllTickers","candlesticks","getCandlesticks","limit","startTime","endTime","orders","total","length","trades","readyState","OPEN","send","stringify","connections","sent","timeout","terminate","ping","requests","windowStart","validPatterns","some","pattern","test","includes","quantity","parseFloat","price","split","Math","random","substr","getStats","totalConnections","authenticatedConnections","Array","from","values","filter","c","totalSubscriptions","totalUsers","uptime","cleanup","clearInterval","clear","websocketService","module","exports"],"sources":["websocketService.js"],"sourcesContent":["const WebSocket = require('ws');\nconst jwt = require('jsonwebtoken');\nconst redis = require('../config/redis');\nconst User = require('../models/User');\nconst marketDataService = require('./marketDataService');\nconst orderBookManager = require('./orderBookManager');\nconst orderMatchingEngine = require('./orderMatchingEngine');\nconst EventEmitter = require('events');\n\n/**\n * WebSocket Trading Service\n * Mengelola real-time WebSocket connections untuk trading,\n * market data streaming, dan user notifications\n */\nclass WebSocketService extends EventEmitter {\n  constructor() {\n    super();\n    this.wss = null;\n    this.clients = new Map(); // clientId -> client info\n    this.subscriptions = new Map(); // subscription key -> Set of clientIds\n    this.userConnections = new Map(); // userId -> Set of clientIds\n    this.rateLimits = new Map(); // clientId -> rate limit info\n    \n    // Configuration\n    this.config = {\n      port: process.env.WS_PORT || 8080,\n      maxConnections: 10000,\n      heartbeatInterval: 30000, // 30 seconds\n      rateLimitWindow: 60000, // 1 minute\n      maxRequestsPerWindow: 100,\n      maxSubscriptionsPerClient: 50,\n      authRequired: true\n    };\n    \n    this.setupEventListeners();\n  }\n  \n  /**\n   * Initialize WebSocket server\n   */\n  initialize() {\n    this.wss = new WebSocket.Server({\n      port: this.config.port,\n      maxPayload: 16 * 1024, // 16KB\n      perMessageDeflate: {\n        zlibDeflateOptions: {\n          level: 3,\n          chunkSize: 1024\n        },\n        threshold: 1024,\n        concurrencyLimit: 10\n      }\n    });\n    \n    this.wss.on('connection', this.handleConnection.bind(this));\n    this.wss.on('error', this.handleServerError.bind(this));\n    \n    // Setup heartbeat interval\n    this.heartbeatInterval = setInterval(() => {\n      this.sendHeartbeat();\n    }, this.config.heartbeatInterval);\n    \n    console.log(`WebSocket server started on port ${this.config.port}`);\n  }\n  \n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    // Listen to market data updates\n    marketDataService.on('tickerUpdate', (data) => {\n      this.broadcastToSubscribers(`ticker:${data.symbol}`, {\n        type: 'ticker',\n        data\n      });\n    });\n    \n    marketDataService.on('tradeUpdate', (data) => {\n      this.broadcastToSubscribers(`trades:${data.symbol}`, {\n        type: 'trade',\n        data\n      });\n    });\n    \n    marketDataService.on('candlestickUpdate', (data) => {\n      this.broadcastToSubscribers(`candlesticks:${data.symbol}:${data.interval}`, {\n        type: 'candlestick',\n        data\n      });\n    });\n    \n    // Listen to order book updates\n    orderBookManager.on('orderBookUpdate', (data) => {\n      this.broadcastToSubscribers(`orderbook:${data.symbol}`, {\n        type: 'orderbook',\n        data\n      });\n    });\n    \n    // Listen to order updates\n    orderMatchingEngine.on('orderUpdate', (data) => {\n      this.sendToUser(data.userId, {\n        type: 'orderUpdate',\n        data\n      });\n    });\n    \n    orderMatchingEngine.on('tradeExecution', (data) => {\n      // Send to both maker and taker\n      this.sendToUser(data.makerId, {\n        type: 'tradeExecution',\n        data: { ...data, side: 'maker' }\n      });\n      \n      this.sendToUser(data.takerId, {\n        type: 'tradeExecution',\n        data: { ...data, side: 'taker' }\n      });\n    });\n  }\n  \n  /**\n   * Handle new WebSocket connection\n   */\n  async handleConnection(ws, request) {\n    const clientId = this.generateClientId();\n    const clientInfo = {\n      id: clientId,\n      ws,\n      userId: null,\n      authenticated: false,\n      subscriptions: new Set(),\n      lastActivity: Date.now(),\n      ip: request.socket.remoteAddress,\n      userAgent: request.headers['user-agent']\n    };\n    \n    // Check connection limit\n    if (this.clients.size >= this.config.maxConnections) {\n      ws.close(1013, 'Server overloaded');\n      return;\n    }\n    \n    this.clients.set(clientId, clientInfo);\n    \n    // Setup message handler\n    ws.on('message', (data) => {\n      this.handleMessage(clientId, data);\n    });\n    \n    // Setup close handler\n    ws.on('close', (code, reason) => {\n      this.handleDisconnection(clientId, code, reason);\n    });\n    \n    // Setup error handler\n    ws.on('error', (error) => {\n      console.error(`WebSocket error for client ${clientId}:`, error);\n      this.handleDisconnection(clientId);\n    });\n    \n    // Setup ping/pong\n    ws.on('pong', () => {\n      clientInfo.lastActivity = Date.now();\n    });\n    \n    // Send welcome message\n    this.sendToClient(clientId, {\n      type: 'welcome',\n      data: {\n        clientId,\n        serverTime: new Date().toISOString(),\n        authRequired: this.config.authRequired\n      }\n    });\n    \n    console.log(`New WebSocket connection: ${clientId} from ${clientInfo.ip}`);\n  }\n  \n  /**\n   * Handle incoming message\n   */\n  async handleMessage(clientId, data) {\n    try {\n      const client = this.clients.get(clientId);\n      if (!client) {\n        return;\n      }\n      \n      // Update last activity\n      client.lastActivity = Date.now();\n      \n      // Rate limiting\n      if (!this.checkRateLimit(clientId)) {\n        this.sendError(clientId, 'RATE_LIMIT_EXCEEDED', 'Too many requests');\n        return;\n      }\n      \n      // Parse message\n      let message;\n      try {\n        message = JSON.parse(data.toString());\n      } catch (error) {\n        this.sendError(clientId, 'INVALID_JSON', 'Invalid JSON format');\n        return;\n      }\n      \n      // Validate message structure\n      if (!message.type || !message.id) {\n        this.sendError(clientId, 'INVALID_MESSAGE', 'Message must have type and id');\n        return;\n      }\n      \n      // Handle message based on type\n      await this.handleMessageByType(clientId, message);\n      \n    } catch (error) {\n      console.error(`Error handling message from client ${clientId}:`, error);\n      this.sendError(clientId, 'INTERNAL_ERROR', 'Internal server error');\n    }\n  }\n  \n  /**\n   * Handle message by type\n   */\n  async handleMessageByType(clientId, message) {\n    const client = this.clients.get(clientId);\n    const { type, id, data } = message;\n    \n    switch (type) {\n      case 'auth':\n        await this.handleAuth(clientId, id, data);\n        break;\n        \n      case 'subscribe':\n        await this.handleSubscribe(clientId, id, data);\n        break;\n        \n      case 'unsubscribe':\n        await this.handleUnsubscribe(clientId, id, data);\n        break;\n        \n      case 'placeOrder':\n        await this.handlePlaceOrder(clientId, id, data);\n        break;\n        \n      case 'cancelOrder':\n        await this.handleCancelOrder(clientId, id, data);\n        break;\n        \n      case 'getOrderBook':\n        await this.handleGetOrderBook(clientId, id, data);\n        break;\n        \n      case 'getTicker':\n        await this.handleGetTicker(clientId, id, data);\n        break;\n        \n      case 'getCandlesticks':\n        await this.handleGetCandlesticks(clientId, id, data);\n        break;\n        \n      case 'getOrders':\n        await this.handleGetOrders(clientId, id, data);\n        break;\n        \n      case 'getTrades':\n        await this.handleGetTrades(clientId, id, data);\n        break;\n        \n      case 'ping':\n        this.sendResponse(clientId, id, 'pong', { timestamp: Date.now() });\n        break;\n        \n      default:\n        this.sendError(clientId, 'UNKNOWN_MESSAGE_TYPE', `Unknown message type: ${type}`, id);\n    }\n  }\n  \n  /**\n   * Handle authentication\n   */\n  async handleAuth(clientId, messageId, data) {\n    try {\n      const client = this.clients.get(clientId);\n      \n      if (!data.token) {\n        this.sendError(clientId, 'MISSING_TOKEN', 'Authentication token required', messageId);\n        return;\n      }\n      \n      // Verify JWT token\n      const decoded = jwt.verify(data.token, process.env.JWT_SECRET);\n      \n      // Get user from database\n      const user = await User.findByPk(decoded.userId);\n      \n      if (!user || !user.is_active) {\n        this.sendError(clientId, 'INVALID_USER', 'User not found or inactive', messageId);\n        return;\n      }\n      \n      // Update client info\n      client.userId = user.id;\n      client.authenticated = true;\n      \n      // Add to user connections\n      if (!this.userConnections.has(user.id)) {\n        this.userConnections.set(user.id, new Set());\n      }\n      this.userConnections.get(user.id).add(clientId);\n      \n      // Send success response\n      this.sendResponse(clientId, messageId, 'authSuccess', {\n        userId: user.id,\n        username: user.username\n      });\n      \n      console.log(`Client ${clientId} authenticated as user ${user.id}`);\n      \n    } catch (error) {\n      console.error(`Authentication error for client ${clientId}:`, error);\n      this.sendError(clientId, 'AUTH_FAILED', 'Authentication failed', messageId);\n    }\n  }\n  \n  /**\n   * Handle subscription\n   */\n  async handleSubscribe(clientId, messageId, data) {\n    try {\n      const client = this.clients.get(clientId);\n      \n      if (!data.channel) {\n        this.sendError(clientId, 'MISSING_CHANNEL', 'Channel required for subscription', messageId);\n        return;\n      }\n      \n      // Check subscription limit\n      if (client.subscriptions.size >= this.config.maxSubscriptionsPerClient) {\n        this.sendError(clientId, 'SUBSCRIPTION_LIMIT', 'Maximum subscriptions exceeded', messageId);\n        return;\n      }\n      \n      // Validate channel format\n      if (!this.isValidChannel(data.channel)) {\n        this.sendError(clientId, 'INVALID_CHANNEL', 'Invalid channel format', messageId);\n        return;\n      }\n      \n      // Add subscription\n      client.subscriptions.add(data.channel);\n      \n      if (!this.subscriptions.has(data.channel)) {\n        this.subscriptions.set(data.channel, new Set());\n      }\n      this.subscriptions.get(data.channel).add(clientId);\n      \n      // Send success response\n      this.sendResponse(clientId, messageId, 'subscribed', {\n        channel: data.channel\n      });\n      \n      // Send initial data if available\n      await this.sendInitialData(clientId, data.channel);\n      \n    } catch (error) {\n      console.error(`Subscription error for client ${clientId}:`, error);\n      this.sendError(clientId, 'SUBSCRIPTION_FAILED', 'Subscription failed', messageId);\n    }\n  }\n  \n  /**\n   * Handle unsubscription\n   */\n  async handleUnsubscribe(clientId, messageId, data) {\n    try {\n      const client = this.clients.get(clientId);\n      \n      if (!data.channel) {\n        this.sendError(clientId, 'MISSING_CHANNEL', 'Channel required for unsubscription', messageId);\n        return;\n      }\n      \n      // Remove subscription\n      client.subscriptions.delete(data.channel);\n      \n      const subscribers = this.subscriptions.get(data.channel);\n      if (subscribers) {\n        subscribers.delete(clientId);\n        if (subscribers.size === 0) {\n          this.subscriptions.delete(data.channel);\n        }\n      }\n      \n      // Send success response\n      this.sendResponse(clientId, messageId, 'unsubscribed', {\n        channel: data.channel\n      });\n      \n    } catch (error) {\n      console.error(`Unsubscription error for client ${clientId}:`, error);\n      this.sendError(clientId, 'UNSUBSCRIPTION_FAILED', 'Unsubscription failed', messageId);\n    }\n  }\n  \n  /**\n   * Handle place order\n   */\n  async handlePlaceOrder(clientId, messageId, data) {\n    try {\n      const client = this.clients.get(clientId);\n      \n      if (!client.authenticated) {\n        this.sendError(clientId, 'NOT_AUTHENTICATED', 'Authentication required', messageId);\n        return;\n      }\n      \n      // Validate order data\n      const validation = this.validateOrderData(data);\n      if (!validation.valid) {\n        this.sendError(clientId, 'INVALID_ORDER_DATA', validation.error, messageId);\n        return;\n      }\n      \n      // Place order through matching engine\n      const orderData = {\n        ...data,\n        user_id: client.userId,\n        source: 'websocket'\n      };\n      \n      const result = await orderMatchingEngine.placeOrder(orderData);\n      \n      // Send response\n      this.sendResponse(clientId, messageId, 'orderPlaced', result);\n      \n    } catch (error) {\n      console.error(`Place order error for client ${clientId}:`, error);\n      this.sendError(clientId, 'ORDER_FAILED', error.message, messageId);\n    }\n  }\n  \n  /**\n   * Handle cancel order\n   */\n  async handleCancelOrder(clientId, messageId, data) {\n    try {\n      const client = this.clients.get(clientId);\n      \n      if (!client.authenticated) {\n        this.sendError(clientId, 'NOT_AUTHENTICATED', 'Authentication required', messageId);\n        return;\n      }\n      \n      if (!data.orderId) {\n        this.sendError(clientId, 'MISSING_ORDER_ID', 'Order ID required', messageId);\n        return;\n      }\n      \n      // Cancel order through matching engine\n      const result = await orderMatchingEngine.cancelOrder(data.orderId, client.userId);\n      \n      // Send response\n      this.sendResponse(clientId, messageId, 'orderCancelled', result);\n      \n    } catch (error) {\n      console.error(`Cancel order error for client ${clientId}:`, error);\n      this.sendError(clientId, 'CANCEL_FAILED', error.message, messageId);\n    }\n  }\n  \n  /**\n   * Handle get order book\n   */\n  async handleGetOrderBook(clientId, messageId, data) {\n    try {\n      if (!data.symbol) {\n        this.sendError(clientId, 'MISSING_SYMBOL', 'Symbol required', messageId);\n        return;\n      }\n      \n      const orderBook = await orderBookManager.getOrderBook(data.symbol, data.depth || 20);\n      \n      this.sendResponse(clientId, messageId, 'orderBook', {\n        symbol: data.symbol,\n        ...orderBook\n      });\n      \n    } catch (error) {\n      console.error(`Get order book error for client ${clientId}:`, error);\n      this.sendError(clientId, 'ORDERBOOK_FAILED', error.message, messageId);\n    }\n  }\n  \n  /**\n   * Handle get ticker\n   */\n  async handleGetTicker(clientId, messageId, data) {\n    try {\n      let ticker;\n      \n      if (data.symbol) {\n        ticker = await marketDataService.getTicker(data.symbol);\n      } else {\n        ticker = await marketDataService.getAllTickers();\n      }\n      \n      this.sendResponse(clientId, messageId, 'ticker', ticker);\n      \n    } catch (error) {\n      console.error(`Get ticker error for client ${clientId}:`, error);\n      this.sendError(clientId, 'TICKER_FAILED', error.message, messageId);\n    }\n  }\n  \n  /**\n   * Handle get candlesticks\n   */\n  async handleGetCandlesticks(clientId, messageId, data) {\n    try {\n      if (!data.symbol || !data.interval) {\n        this.sendError(clientId, 'MISSING_PARAMS', 'Symbol and interval required', messageId);\n        return;\n      }\n      \n      const candlesticks = await marketDataService.getCandlesticks(\n        data.symbol,\n        data.interval,\n        data.limit,\n        data.startTime,\n        data.endTime\n      );\n      \n      this.sendResponse(clientId, messageId, 'candlesticks', {\n        symbol: data.symbol,\n        interval: data.interval,\n        data: candlesticks\n      });\n      \n    } catch (error) {\n      console.error(`Get candlesticks error for client ${clientId}:`, error);\n      this.sendError(clientId, 'CANDLESTICKS_FAILED', error.message, messageId);\n    }\n  }\n  \n  /**\n   * Handle get orders\n   */\n  async handleGetOrders(clientId, messageId, data) {\n    try {\n      const client = this.clients.get(clientId);\n      \n      if (!client.authenticated) {\n        this.sendError(clientId, 'NOT_AUTHENTICATED', 'Authentication required', messageId);\n        return;\n      }\n      \n      // This would integrate with order service\n      // For now, return mock data\n      const orders = [];\n      \n      this.sendResponse(clientId, messageId, 'orders', {\n        orders,\n        total: orders.length\n      });\n      \n    } catch (error) {\n      console.error(`Get orders error for client ${clientId}:`, error);\n      this.sendError(clientId, 'ORDERS_FAILED', error.message, messageId);\n    }\n  }\n  \n  /**\n   * Handle get trades\n   */\n  async handleGetTrades(clientId, messageId, data) {\n    try {\n      const client = this.clients.get(clientId);\n      \n      if (!client.authenticated) {\n        this.sendError(clientId, 'NOT_AUTHENTICATED', 'Authentication required', messageId);\n        return;\n      }\n      \n      // This would integrate with trade service\n      // For now, return mock data\n      const trades = [];\n      \n      this.sendResponse(clientId, messageId, 'trades', {\n        trades,\n        total: trades.length\n      });\n      \n    } catch (error) {\n      console.error(`Get trades error for client ${clientId}:`, error);\n      this.sendError(clientId, 'TRADES_FAILED', error.message, messageId);\n    }\n  }\n  \n  /**\n   * Handle disconnection\n   */\n  handleDisconnection(clientId, code, reason) {\n    const client = this.clients.get(clientId);\n    \n    if (client) {\n      // Remove from user connections\n      if (client.userId) {\n        const userConnections = this.userConnections.get(client.userId);\n        if (userConnections) {\n          userConnections.delete(clientId);\n          if (userConnections.size === 0) {\n            this.userConnections.delete(client.userId);\n          }\n        }\n      }\n      \n      // Remove subscriptions\n      for (const channel of client.subscriptions) {\n        const subscribers = this.subscriptions.get(channel);\n        if (subscribers) {\n          subscribers.delete(clientId);\n          if (subscribers.size === 0) {\n            this.subscriptions.delete(channel);\n          }\n        }\n      }\n      \n      // Remove client\n      this.clients.delete(clientId);\n      \n      console.log(`Client ${clientId} disconnected (code: ${code}, reason: ${reason})`);\n    }\n    \n    // Clean up rate limit\n    this.rateLimits.delete(clientId);\n  }\n  \n  /**\n   * Send message to specific client\n   */\n  sendToClient(clientId, message) {\n    const client = this.clients.get(clientId);\n    \n    if (client && client.ws.readyState === WebSocket.OPEN) {\n      try {\n        client.ws.send(JSON.stringify(message));\n        return true;\n      } catch (error) {\n        console.error(`Error sending message to client ${clientId}:`, error);\n        this.handleDisconnection(clientId);\n        return false;\n      }\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Send message to user (all connections)\n   */\n  sendToUser(userId, message) {\n    const connections = this.userConnections.get(userId);\n    \n    if (connections) {\n      let sent = 0;\n      for (const clientId of connections) {\n        if (this.sendToClient(clientId, message)) {\n          sent++;\n        }\n      }\n      return sent;\n    }\n    \n    return 0;\n  }\n  \n  /**\n   * Broadcast to subscribers\n   */\n  broadcastToSubscribers(channel, message) {\n    const subscribers = this.subscriptions.get(channel);\n    \n    if (subscribers) {\n      let sent = 0;\n      for (const clientId of subscribers) {\n        if (this.sendToClient(clientId, message)) {\n          sent++;\n        }\n      }\n      return sent;\n    }\n    \n    return 0;\n  }\n  \n  /**\n   * Send response\n   */\n  sendResponse(clientId, messageId, type, data) {\n    this.sendToClient(clientId, {\n      id: messageId,\n      type,\n      data,\n      timestamp: new Date().toISOString()\n    });\n  }\n  \n  /**\n   * Send error\n   */\n  sendError(clientId, code, message, messageId = null) {\n    this.sendToClient(clientId, {\n      id: messageId,\n      type: 'error',\n      error: {\n        code,\n        message\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n  \n  /**\n   * Send heartbeat\n   */\n  sendHeartbeat() {\n    const now = Date.now();\n    const timeout = this.config.heartbeatInterval * 2;\n    \n    for (const [clientId, client] of this.clients) {\n      if (client.ws.readyState === WebSocket.OPEN) {\n        // Check if client is still alive\n        if (now - client.lastActivity > timeout) {\n          console.log(`Client ${clientId} timed out`);\n          client.ws.terminate();\n          this.handleDisconnection(clientId);\n        } else {\n          // Send ping\n          client.ws.ping();\n        }\n      } else {\n        this.handleDisconnection(clientId);\n      }\n    }\n  }\n  \n  /**\n   * Check rate limit\n   */\n  checkRateLimit(clientId) {\n    const now = Date.now();\n    const limit = this.rateLimits.get(clientId) || {\n      requests: 0,\n      windowStart: now\n    };\n    \n    // Reset window if expired\n    if (now - limit.windowStart > this.config.rateLimitWindow) {\n      limit.requests = 0;\n      limit.windowStart = now;\n    }\n    \n    // Check limit\n    if (limit.requests >= this.config.maxRequestsPerWindow) {\n      return false;\n    }\n    \n    // Increment counter\n    limit.requests++;\n    this.rateLimits.set(clientId, limit);\n    \n    return true;\n  }\n  \n  /**\n   * Validate channel format\n   */\n  isValidChannel(channel) {\n    const validPatterns = [\n      /^ticker:[A-Z]+$/,\n      /^trades:[A-Z]+$/,\n      /^orderbook:[A-Z]+$/,\n      /^candlesticks:[A-Z]+:(1m|5m|15m|30m|1h|4h|1d|1w)$/\n    ];\n    \n    return validPatterns.some(pattern => pattern.test(channel));\n  }\n  \n  /**\n   * Validate order data\n   */\n  validateOrderData(data) {\n    if (!data.symbol) {\n      return { valid: false, error: 'Symbol required' };\n    }\n    \n    if (!data.side || !['buy', 'sell'].includes(data.side)) {\n      return { valid: false, error: 'Valid side required (buy/sell)' };\n    }\n    \n    if (!data.type || !['market', 'limit', 'stop', 'stop_limit'].includes(data.type)) {\n      return { valid: false, error: 'Valid order type required' };\n    }\n    \n    if (!data.quantity || parseFloat(data.quantity) <= 0) {\n      return { valid: false, error: 'Valid quantity required' };\n    }\n    \n    if (data.type !== 'market' && (!data.price || parseFloat(data.price) <= 0)) {\n      return { valid: false, error: 'Valid price required for non-market orders' };\n    }\n    \n    return { valid: true };\n  }\n  \n  /**\n   * Send initial data for subscription\n   */\n  async sendInitialData(clientId, channel) {\n    try {\n      const [type, symbol, interval] = channel.split(':');\n      \n      switch (type) {\n        case 'ticker':\n          const ticker = await marketDataService.getTicker(symbol);\n          if (ticker) {\n            this.sendToClient(clientId, {\n              type: 'ticker',\n              data: ticker\n            });\n          }\n          break;\n          \n        case 'orderbook':\n          const orderBook = await orderBookManager.getOrderBook(symbol, 20);\n          if (orderBook) {\n            this.sendToClient(clientId, {\n              type: 'orderbook',\n              data: { symbol, ...orderBook }\n            });\n          }\n          break;\n          \n        case 'candlesticks':\n          if (interval) {\n            const candlesticks = await marketDataService.getCandlesticks(symbol, interval, 100);\n            if (candlesticks && candlesticks.length > 0) {\n              this.sendToClient(clientId, {\n                type: 'candlestick',\n                data: {\n                  symbol,\n                  interval,\n                  data: candlesticks\n                }\n              });\n            }\n          }\n          break;\n      }\n    } catch (error) {\n      console.error(`Error sending initial data for ${channel}:`, error);\n    }\n  }\n  \n  /**\n   * Generate unique client ID\n   */\n  generateClientId() {\n    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  /**\n   * Handle server error\n   */\n  handleServerError(error) {\n    console.error('WebSocket server error:', error);\n  }\n  \n  /**\n   * Get connection statistics\n   */\n  getStats() {\n    return {\n      totalConnections: this.clients.size,\n      authenticatedConnections: Array.from(this.clients.values()).filter(c => c.authenticated).length,\n      totalSubscriptions: this.subscriptions.size,\n      totalUsers: this.userConnections.size,\n      uptime: process.uptime()\n    };\n  }\n  \n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    // Clear heartbeat interval\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n    \n    // Close all connections\n    for (const [clientId, client] of this.clients) {\n      client.ws.close(1001, 'Server shutting down');\n    }\n    \n    // Close server\n    if (this.wss) {\n      this.wss.close();\n    }\n    \n    // Clear maps\n    this.clients.clear();\n    this.subscriptions.clear();\n    this.userConnections.clear();\n    this.rateLimits.clear();\n    \n    console.log('WebSocket service cleaned up');\n  }\n}\n\n// Create singleton instance\nconst websocketService = new WebSocketService();\n\nmodule.exports = websocketService;"],"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","ignoreList":[]}