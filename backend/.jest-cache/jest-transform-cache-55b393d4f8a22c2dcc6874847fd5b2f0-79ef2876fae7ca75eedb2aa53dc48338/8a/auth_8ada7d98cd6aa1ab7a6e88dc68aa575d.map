{"version":3,"names":["cov_2jdnoqzkw","actualCoverage","jwt","s","require","User","cache","session","crypto","JWT_SECRET","b","process","env","JWT_EXPIRES_IN","JWT_REFRESH_EXPIRES_IN","generateTokens","user","f","payload","id","email","username","role","kycLevel","twoFactorEnabled","accessToken","sign","expiresIn","issuer","audience","refreshToken","type","verifyToken","token","verify","error","Error","extractToken","req","headers","authorization","startsWith","substring","cookies","query","isTokenBlacklisted","tokenHash","createHash","update","digest","exists","blacklistToken","set","requireAuth","res","next","status","json","code","decoded","findByPk","isLocked","lockUntil","lastActivity","Date","tokenPayload","name","console","optionalAuth","requireRole","roles","userRoles","Array","isArray","requiredRoles","hasRole","some","includes","required","current","requireKYCLevel","minLevel","require2FA","twoFactorVerified","requireEmailVerification","emailVerified","userRateLimit","maxRequests","windowMs","key","route","path","incr","expire","Math","ceil","retryAfter","ttl","max","now","requireSession","userId","destroy","module","exports"],"sources":["auth.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\nconst User = require('../models/User');\nconst { cache, session } = require('../config/redis');\nconst crypto = require('crypto');\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key';\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '15m';\nconst JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || '7d';\n\n// Generate JWT tokens\nconst generateTokens = (user) => {\n  const payload = {\n    id: user.id,\n    email: user.email,\n    username: user.username,\n    role: user.role,\n    kycLevel: user.kycLevel,\n    twoFactorEnabled: user.twoFactorEnabled\n  };\n\n  const accessToken = jwt.sign(payload, JWT_SECRET, {\n    expiresIn: JWT_EXPIRES_IN,\n    issuer: 'cex-exchange',\n    audience: 'cex-users'\n  });\n\n  const refreshToken = jwt.sign(\n    { id: user.id, type: 'refresh' },\n    JWT_SECRET,\n    {\n      expiresIn: JWT_REFRESH_EXPIRES_IN,\n      issuer: 'cex-exchange',\n      audience: 'cex-users'\n    }\n  );\n\n  return { accessToken, refreshToken };\n};\n\n// Verify JWT token\nconst verifyToken = (token) => {\n  try {\n    return jwt.verify(token, JWT_SECRET, {\n      issuer: 'cex-exchange',\n      audience: 'cex-users'\n    });\n  } catch (error) {\n    throw new Error('Invalid token');\n  }\n};\n\n// Extract token from request\nconst extractToken = (req) => {\n  let token = null;\n\n  // Check Authorization header\n  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer ')) {\n    token = req.headers.authorization.substring(7);\n  }\n  // Check cookies\n  else if (req.cookies && req.cookies.accessToken) {\n    token = req.cookies.accessToken;\n  }\n  // Check query parameter (for WebSocket connections)\n  else if (req.query && req.query.token) {\n    token = req.query.token;\n  }\n\n  return token;\n};\n\n// Check if token is blacklisted\nconst isTokenBlacklisted = async (token) => {\n  const tokenHash = crypto.createHash('sha256').update(token).digest('hex');\n  return await cache.exists(`blacklist:${tokenHash}`);\n};\n\n// Blacklist token\nconst blacklistToken = async (token, expiresIn = 900) => {\n  const tokenHash = crypto.createHash('sha256').update(token).digest('hex');\n  await cache.set(`blacklist:${tokenHash}`, true, expiresIn);\n};\n\n// Authentication middleware\nconst requireAuth = async (req, res, next) => {\n  try {\n    const token = extractToken(req);\n\n    if (!token) {\n      return res.status(401).json({\n        error: 'Access token required',\n        code: 'TOKEN_REQUIRED'\n      });\n    }\n\n    // Check if token is blacklisted\n    if (await isTokenBlacklisted(token)) {\n      return res.status(401).json({\n        error: 'Token has been revoked',\n        code: 'TOKEN_REVOKED'\n      });\n    }\n\n    // Verify token\n    const decoded = verifyToken(token);\n\n    // Check if it's a refresh token (shouldn't be used for API access)\n    if (decoded.type === 'refresh') {\n      return res.status(401).json({\n        error: 'Invalid token type',\n        code: 'INVALID_TOKEN_TYPE'\n      });\n    }\n\n    // Get user from database\n    const user = await User.findByPk(decoded.id);\n    if (!user) {\n      return res.status(401).json({\n        error: 'User not found',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n\n    // Check user status\n    if (user.status !== 'active') {\n      return res.status(401).json({\n        error: 'Account is not active',\n        code: 'ACCOUNT_INACTIVE',\n        status: user.status\n      });\n    }\n\n    // Check if account is locked\n    if (user.isLocked()) {\n      return res.status(401).json({\n        error: 'Account is temporarily locked',\n        code: 'ACCOUNT_LOCKED',\n        lockUntil: user.lockUntil\n      });\n    }\n\n    // Update last activity in session\n    if (req.session) {\n      req.session.lastActivity = new Date();\n    }\n\n    // Attach user to request\n    req.user = user;\n    req.token = token;\n    req.tokenPayload = decoded;\n\n    next();\n  } catch (error) {\n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        error: 'Token has expired',\n        code: 'TOKEN_EXPIRED'\n      });\n    }\n\n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({\n        error: 'Invalid token',\n        code: 'INVALID_TOKEN'\n      });\n    }\n\n    console.error('Auth middleware error:', error);\n    return res.status(500).json({\n      error: 'Authentication error',\n      code: 'AUTH_ERROR'\n    });\n  }\n};\n\n// Optional authentication middleware (doesn't fail if no token)\nconst optionalAuth = async (req, res, next) => {\n  try {\n    const token = extractToken(req);\n\n    if (!token) {\n      return next();\n    }\n\n    // Check if token is blacklisted\n    if (await isTokenBlacklisted(token)) {\n      return next();\n    }\n\n    // Verify token\n    const decoded = verifyToken(token);\n\n    // Get user from database\n    const user = await User.findByPk(decoded.id);\n    if (user && user.status === 'active' && !user.isLocked()) {\n      req.user = user;\n      req.token = token;\n      req.tokenPayload = decoded;\n    }\n\n    next();\n  } catch (error) {\n    // Ignore errors in optional auth\n    next();\n  }\n};\n\n// Role-based access control\nconst requireRole = (roles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        code: 'AUTH_REQUIRED'\n      });\n    }\n\n    const userRoles = Array.isArray(req.user.role) ? req.user.role : [req.user.role];\n    const requiredRoles = Array.isArray(roles) ? roles : [roles];\n\n    const hasRole = requiredRoles.some(role => userRoles.includes(role));\n\n    if (!hasRole) {\n      return res.status(403).json({\n        error: 'Insufficient permissions',\n        code: 'INSUFFICIENT_PERMISSIONS',\n        required: requiredRoles,\n        current: userRoles\n      });\n    }\n\n    next();\n  };\n};\n\n// KYC level requirement\nconst requireKYCLevel = (minLevel) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        code: 'AUTH_REQUIRED'\n      });\n    }\n\n    if (req.user.kycLevel < minLevel) {\n      return res.status(403).json({\n        error: 'Higher KYC level required',\n        code: 'KYC_LEVEL_REQUIRED',\n        required: minLevel,\n        current: req.user.kycLevel\n      });\n    }\n\n    next();\n  };\n};\n\n// 2FA requirement\nconst require2FA = (req, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({\n      error: 'Authentication required',\n      code: 'AUTH_REQUIRED'\n    });\n  }\n\n  if (!req.user.twoFactorEnabled) {\n    return res.status(403).json({\n      error: '2FA is required for this action',\n      code: 'TWO_FA_REQUIRED'\n    });\n  }\n\n  // Check if 2FA was verified in this session\n  if (!req.session || !req.session.twoFactorVerified) {\n    return res.status(403).json({\n      error: '2FA verification required',\n      code: 'TWO_FA_VERIFICATION_REQUIRED'\n    });\n  }\n\n  next();\n};\n\n// Email verification requirement\nconst requireEmailVerification = (req, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({\n      error: 'Authentication required',\n      code: 'AUTH_REQUIRED'\n    });\n  }\n\n  if (!req.user.emailVerified) {\n    return res.status(403).json({\n      error: 'Email verification required',\n      code: 'EMAIL_VERIFICATION_REQUIRED'\n    });\n  }\n\n  next();\n};\n\n// Rate limiting per user\nconst userRateLimit = (maxRequests, windowMs) => {\n  return async (req, res, next) => {\n    if (!req.user) {\n      return next();\n    }\n\n    const key = `rate_limit:user:${req.user.id}:${req.route.path}`;\n    const current = await cache.incr(key);\n\n    if (current === 1) {\n      await cache.expire(key, Math.ceil(windowMs / 1000));\n    }\n\n    if (current > maxRequests) {\n      return res.status(429).json({\n        error: 'Rate limit exceeded',\n        code: 'USER_RATE_LIMIT_EXCEEDED',\n        retryAfter: await cache.ttl(key)\n      });\n    }\n\n    res.set('X-RateLimit-Limit', maxRequests);\n    res.set('X-RateLimit-Remaining', Math.max(0, maxRequests - current));\n    res.set('X-RateLimit-Reset', new Date(Date.now() + (await cache.ttl(key) * 1000)));\n\n    next();\n  };\n};\n\n// Session-based authentication (for admin panel)\nconst requireSession = async (req, res, next) => {\n  try {\n    if (!req.session || !req.session.userId) {\n      return res.status(401).json({\n        error: 'Session required',\n        code: 'SESSION_REQUIRED'\n      });\n    }\n\n    // Get user from database\n    const user = await User.findByPk(req.session.userId);\n    if (!user) {\n      req.session.destroy();\n      return res.status(401).json({\n        error: 'User not found',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n\n    // Check user status\n    if (user.status !== 'active') {\n      req.session.destroy();\n      return res.status(401).json({\n        error: 'Account is not active',\n        code: 'ACCOUNT_INACTIVE'\n      });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error('Session auth error:', error);\n    return res.status(500).json({\n      error: 'Authentication error',\n      code: 'AUTH_ERROR'\n    });\n  }\n};\n\nmodule.exports = {\n  generateTokens,\n  verifyToken,\n  extractToken,\n  blacklistToken,\n  requireAuth,\n  optionalAuth,\n  requireRole,\n  requireKYCLevel,\n  require2FA,\n  requireEmailVerification,\n  requireSession,\n  userRateLimit\n};"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ,MAAME,GAAG;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMC,IAAI;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,MAAM;EAAEE,KAAK;EAAEC;AAAQ,CAAC;AAAA;AAAA,CAAAP,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,iBAAiB,CAAC;AACrD,MAAMI,MAAM;AAAA;AAAA,CAAAR,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEhC;AACA,MAAMK,UAAU;AAAA;AAAA,CAAAT,aAAA,GAAAG,CAAA;AAAG;AAAA,CAAAH,aAAA,GAAAU,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACH,UAAU;AAAA;AAAA,CAAAT,aAAA,GAAAU,CAAA,UAAI,2BAA2B;AACxE,MAAMG,cAAc;AAAA;AAAA,CAAAb,aAAA,GAAAG,CAAA;AAAG;AAAA,CAAAH,aAAA,GAAAU,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACC,cAAc;AAAA;AAAA,CAAAb,aAAA,GAAAU,CAAA,UAAI,KAAK;AAC1D,MAAMI,sBAAsB;AAAA;AAAA,CAAAd,aAAA,GAAAG,CAAA;AAAG;AAAA,CAAAH,aAAA,GAAAU,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACE,sBAAsB;AAAA;AAAA,CAAAd,aAAA,GAAAU,CAAA,UAAI,IAAI;;AAEzE;AAAA;AAAAV,aAAA,GAAAG,CAAA;AACA,MAAMY,cAAc,GAAIC,IAAI,IAAK;EAAA;EAAAhB,aAAA,GAAAiB,CAAA;EAC/B,MAAMC,OAAO;EAAA;EAAA,CAAAlB,aAAA,GAAAG,CAAA,OAAG;IACdgB,EAAE,EAAEH,IAAI,CAACG,EAAE;IACXC,KAAK,EAAEJ,IAAI,CAACI,KAAK;IACjBC,QAAQ,EAAEL,IAAI,CAACK,QAAQ;IACvBC,IAAI,EAAEN,IAAI,CAACM,IAAI;IACfC,QAAQ,EAAEP,IAAI,CAACO,QAAQ;IACvBC,gBAAgB,EAAER,IAAI,CAACQ;EACzB,CAAC;EAED,MAAMC,WAAW;EAAA;EAAA,CAAAzB,aAAA,GAAAG,CAAA,OAAGD,GAAG,CAACwB,IAAI,CAACR,OAAO,EAAET,UAAU,EAAE;IAChDkB,SAAS,EAAEd,cAAc;IACzBe,MAAM,EAAE,cAAc;IACtBC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,YAAY;EAAA;EAAA,CAAA9B,aAAA,GAAAG,CAAA,QAAGD,GAAG,CAACwB,IAAI,CAC3B;IAAEP,EAAE,EAAEH,IAAI,CAACG,EAAE;IAAEY,IAAI,EAAE;EAAU,CAAC,EAChCtB,UAAU,EACV;IACEkB,SAAS,EAAEb,sBAAsB;IACjCc,MAAM,EAAE,cAAc;IACtBC,QAAQ,EAAE;EACZ,CACF,CAAC;EAAC;EAAA7B,aAAA,GAAAG,CAAA;EAEF,OAAO;IAAEsB,WAAW;IAAEK;EAAa,CAAC;AACtC,CAAC;;AAED;AAAA;AAAA9B,aAAA,GAAAG,CAAA;AACA,MAAM6B,WAAW,GAAIC,KAAK,IAAK;EAAA;EAAAjC,aAAA,GAAAiB,CAAA;EAAAjB,aAAA,GAAAG,CAAA;EAC7B,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACF,OAAOD,GAAG,CAACgC,MAAM,CAACD,KAAK,EAAExB,UAAU,EAAE;MACnCmB,MAAM,EAAE,cAAc;MACtBC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,KAAK,EAAE;IAAA;IAAAnC,aAAA,GAAAG,CAAA;IACd,MAAM,IAAIiC,KAAK,CAAC,eAAe,CAAC;EAClC;AACF,CAAC;;AAED;AAAA;AAAApC,aAAA,GAAAG,CAAA;AACA,MAAMkC,YAAY,GAAIC,GAAG,IAAK;EAAA;EAAAtC,aAAA,GAAAiB,CAAA;EAC5B,IAAIgB,KAAK;EAAA;EAAA,CAAAjC,aAAA,GAAAG,CAAA,QAAG,IAAI;;EAEhB;EAAA;EAAAH,aAAA,GAAAG,CAAA;EACA;EAAI;EAAA,CAAAH,aAAA,GAAAU,CAAA,UAAA4B,GAAG,CAACC,OAAO,CAACC,aAAa;EAAA;EAAA,CAAAxC,aAAA,GAAAU,CAAA,UAAI4B,GAAG,CAACC,OAAO,CAACC,aAAa,CAACC,UAAU,CAAC,SAAS,CAAC,GAAE;IAAA;IAAAzC,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAG,CAAA;IAChF8B,KAAK,GAAGK,GAAG,CAACC,OAAO,CAACC,aAAa,CAACE,SAAS,CAAC,CAAC,CAAC;EAChD;EACA;EAAA,KACK;IAAA;IAAA1C,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAG,CAAA;IAAA;IAAI;IAAA,CAAAH,aAAA,GAAAU,CAAA,UAAA4B,GAAG,CAACK,OAAO;IAAA;IAAA,CAAA3C,aAAA,GAAAU,CAAA,UAAI4B,GAAG,CAACK,OAAO,CAAClB,WAAW,GAAE;MAAA;MAAAzB,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAC/C8B,KAAK,GAAGK,GAAG,CAACK,OAAO,CAAClB,WAAW;IACjC;IACA;IAAA,KACK;MAAA;MAAAzB,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA;MAAI;MAAA,CAAAH,aAAA,GAAAU,CAAA,UAAA4B,GAAG,CAACM,KAAK;MAAA;MAAA,CAAA5C,aAAA,GAAAU,CAAA,UAAI4B,GAAG,CAACM,KAAK,CAACX,KAAK,GAAE;QAAA;QAAAjC,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACrC8B,KAAK,GAAGK,GAAG,CAACM,KAAK,CAACX,KAAK;MACzB,CAAC;MAAA;MAAA;QAAAjC,aAAA,GAAAU,CAAA;MAAA;IAAD;EAAA;EAAC;EAAAV,aAAA,GAAAG,CAAA;EAED,OAAO8B,KAAK;AACd,CAAC;;AAED;AAAA;AAAAjC,aAAA,GAAAG,CAAA;AACA,MAAM0C,kBAAkB,GAAG,MAAOZ,KAAK,IAAK;EAAA;EAAAjC,aAAA,GAAAiB,CAAA;EAC1C,MAAM6B,SAAS;EAAA;EAAA,CAAA9C,aAAA,GAAAG,CAAA,QAAGK,MAAM,CAACuC,UAAU,CAAC,QAAQ,CAAC,CAACC,MAAM,CAACf,KAAK,CAAC,CAACgB,MAAM,CAAC,KAAK,CAAC;EAAC;EAAAjD,aAAA,GAAAG,CAAA;EAC1E,OAAO,MAAMG,KAAK,CAAC4C,MAAM,CAAC,aAAaJ,SAAS,EAAE,CAAC;AACrD,CAAC;;AAED;AAAA;AAAA9C,aAAA,GAAAG,CAAA;AACA,MAAMgD,cAAc,GAAG,MAAAA,CAAOlB,KAAK,EAAEN,SAAS;AAAA;AAAA,CAAA3B,aAAA,GAAAU,CAAA,UAAG,GAAG,MAAK;EAAA;EAAAV,aAAA,GAAAiB,CAAA;EACvD,MAAM6B,SAAS;EAAA;EAAA,CAAA9C,aAAA,GAAAG,CAAA,QAAGK,MAAM,CAACuC,UAAU,CAAC,QAAQ,CAAC,CAACC,MAAM,CAACf,KAAK,CAAC,CAACgB,MAAM,CAAC,KAAK,CAAC;EAAC;EAAAjD,aAAA,GAAAG,CAAA;EAC1E,MAAMG,KAAK,CAAC8C,GAAG,CAAC,aAAaN,SAAS,EAAE,EAAE,IAAI,EAAEnB,SAAS,CAAC;AAC5D,CAAC;;AAED;AAAA;AAAA3B,aAAA,GAAAG,CAAA;AACA,MAAMkD,WAAW,GAAG,MAAAA,CAAOf,GAAG,EAAEgB,GAAG,EAAEC,IAAI,KAAK;EAAA;EAAAvD,aAAA,GAAAiB,CAAA;EAAAjB,aAAA,GAAAG,CAAA;EAC5C,IAAI;IACF,MAAM8B,KAAK;IAAA;IAAA,CAAAjC,aAAA,GAAAG,CAAA,QAAGkC,YAAY,CAACC,GAAG,CAAC;IAAC;IAAAtC,aAAA,GAAAG,CAAA;IAEhC,IAAI,CAAC8B,KAAK,EAAE;MAAA;MAAAjC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACV,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,uBAAuB;QAC9BuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;;IAED;IAAAV,aAAA,GAAAG,CAAA;IACA,IAAI,MAAM0C,kBAAkB,CAACZ,KAAK,CAAC,EAAE;MAAA;MAAAjC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACnC,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,wBAAwB;QAC/BuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;;IAED;IACA,MAAMiD,OAAO;IAAA;IAAA,CAAA3D,aAAA,GAAAG,CAAA,QAAG6B,WAAW,CAACC,KAAK,CAAC;;IAElC;IAAA;IAAAjC,aAAA,GAAAG,CAAA;IACA,IAAIwD,OAAO,CAAC5B,IAAI,KAAK,SAAS,EAAE;MAAA;MAAA/B,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAC9B,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,oBAAoB;QAC3BuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;;IAED;IACA,MAAMM,IAAI;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAG,MAAME,IAAI,CAACuD,QAAQ,CAACD,OAAO,CAACxC,EAAE,CAAC;IAAC;IAAAnB,aAAA,GAAAG,CAAA;IAC7C,IAAI,CAACa,IAAI,EAAE;MAAA;MAAAhB,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACT,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,gBAAgB;QACvBuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;;IAED;IAAAV,aAAA,GAAAG,CAAA;IACA,IAAIa,IAAI,CAACwC,MAAM,KAAK,QAAQ,EAAE;MAAA;MAAAxD,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAC5B,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,uBAAuB;QAC9BuB,IAAI,EAAE,kBAAkB;QACxBF,MAAM,EAAExC,IAAI,CAACwC;MACf,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAxD,aAAA,GAAAU,CAAA;IAAA;;IAED;IAAAV,aAAA,GAAAG,CAAA;IACA,IAAIa,IAAI,CAAC6C,QAAQ,CAAC,CAAC,EAAE;MAAA;MAAA7D,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACnB,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,+BAA+B;QACtCuB,IAAI,EAAE,gBAAgB;QACtBI,SAAS,EAAE9C,IAAI,CAAC8C;MAClB,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA9D,aAAA,GAAAU,CAAA;IAAA;;IAED;IAAAV,aAAA,GAAAG,CAAA;IACA,IAAImC,GAAG,CAAC/B,OAAO,EAAE;MAAA;MAAAP,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACfmC,GAAG,CAAC/B,OAAO,CAACwD,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC;IACvC,CAAC;IAAA;IAAA;MAAAhE,aAAA,GAAAU,CAAA;IAAA;;IAED;IAAAV,aAAA,GAAAG,CAAA;IACAmC,GAAG,CAACtB,IAAI,GAAGA,IAAI;IAAC;IAAAhB,aAAA,GAAAG,CAAA;IAChBmC,GAAG,CAACL,KAAK,GAAGA,KAAK;IAAC;IAAAjC,aAAA,GAAAG,CAAA;IAClBmC,GAAG,CAAC2B,YAAY,GAAGN,OAAO;IAAC;IAAA3D,aAAA,GAAAG,CAAA;IAE3BoD,IAAI,CAAC,CAAC;EACR,CAAC,CAAC,OAAOpB,KAAK,EAAE;IAAA;IAAAnC,aAAA,GAAAG,CAAA;IACd,IAAIgC,KAAK,CAAC+B,IAAI,KAAK,mBAAmB,EAAE;MAAA;MAAAlE,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACtC,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,mBAAmB;QAC1BuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAED,IAAIgC,KAAK,CAAC+B,IAAI,KAAK,mBAAmB,EAAE;MAAA;MAAAlE,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACtC,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,eAAe;QACtBuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAEDgE,OAAO,CAAChC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAAC;IAAAnC,aAAA,GAAAG,CAAA;IAC/C,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BtB,KAAK,EAAE,sBAAsB;MAC7BuB,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AAAA;AAAA1D,aAAA,GAAAG,CAAA;AACA,MAAMiE,YAAY,GAAG,MAAAA,CAAO9B,GAAG,EAAEgB,GAAG,EAAEC,IAAI,KAAK;EAAA;EAAAvD,aAAA,GAAAiB,CAAA;EAAAjB,aAAA,GAAAG,CAAA;EAC7C,IAAI;IACF,MAAM8B,KAAK;IAAA;IAAA,CAAAjC,aAAA,GAAAG,CAAA,QAAGkC,YAAY,CAACC,GAAG,CAAC;IAAC;IAAAtC,aAAA,GAAAG,CAAA;IAEhC,IAAI,CAAC8B,KAAK,EAAE;MAAA;MAAAjC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACV,OAAOoD,IAAI,CAAC,CAAC;IACf,CAAC;IAAA;IAAA;MAAAvD,aAAA,GAAAU,CAAA;IAAA;;IAED;IAAAV,aAAA,GAAAG,CAAA;IACA,IAAI,MAAM0C,kBAAkB,CAACZ,KAAK,CAAC,EAAE;MAAA;MAAAjC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACnC,OAAOoD,IAAI,CAAC,CAAC;IACf,CAAC;IAAA;IAAA;MAAAvD,aAAA,GAAAU,CAAA;IAAA;;IAED;IACA,MAAMiD,OAAO;IAAA;IAAA,CAAA3D,aAAA,GAAAG,CAAA,QAAG6B,WAAW,CAACC,KAAK,CAAC;;IAElC;IACA,MAAMjB,IAAI;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAG,MAAME,IAAI,CAACuD,QAAQ,CAACD,OAAO,CAACxC,EAAE,CAAC;IAAC;IAAAnB,aAAA,GAAAG,CAAA;IAC7C;IAAI;IAAA,CAAAH,aAAA,GAAAU,CAAA,WAAAM,IAAI;IAAA;IAAA,CAAAhB,aAAA,GAAAU,CAAA,WAAIM,IAAI,CAACwC,MAAM,KAAK,QAAQ;IAAA;IAAA,CAAAxD,aAAA,GAAAU,CAAA,WAAI,CAACM,IAAI,CAAC6C,QAAQ,CAAC,CAAC,GAAE;MAAA;MAAA7D,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACxDmC,GAAG,CAACtB,IAAI,GAAGA,IAAI;MAAC;MAAAhB,aAAA,GAAAG,CAAA;MAChBmC,GAAG,CAACL,KAAK,GAAGA,KAAK;MAAC;MAAAjC,aAAA,GAAAG,CAAA;MAClBmC,GAAG,CAAC2B,YAAY,GAAGN,OAAO;IAC5B,CAAC;IAAA;IAAA;MAAA3D,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAEDoD,IAAI,CAAC,CAAC;EACR,CAAC,CAAC,OAAOpB,KAAK,EAAE;IAAA;IAAAnC,aAAA,GAAAG,CAAA;IACd;IACAoD,IAAI,CAAC,CAAC;EACR;AACF,CAAC;;AAED;AAAA;AAAAvD,aAAA,GAAAG,CAAA;AACA,MAAMkE,WAAW,GAAIC,KAAK,IAAK;EAAA;EAAAtE,aAAA,GAAAiB,CAAA;EAAAjB,aAAA,GAAAG,CAAA;EAC7B,OAAO,CAACmC,GAAG,EAAEgB,GAAG,EAAEC,IAAI,KAAK;IAAA;IAAAvD,aAAA,GAAAiB,CAAA;IAAAjB,aAAA,GAAAG,CAAA;IACzB,IAAI,CAACmC,GAAG,CAACtB,IAAI,EAAE;MAAA;MAAAhB,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACb,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,yBAAyB;QAChCuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;IAED,MAAM6D,SAAS;IAAA;IAAA,CAAAvE,aAAA,GAAAG,CAAA,QAAGqE,KAAK,CAACC,OAAO,CAACnC,GAAG,CAACtB,IAAI,CAACM,IAAI,CAAC;IAAA;IAAA,CAAAtB,aAAA,GAAAU,CAAA,WAAG4B,GAAG,CAACtB,IAAI,CAACM,IAAI;IAAA;IAAA,CAAAtB,aAAA,GAAAU,CAAA,WAAG,CAAC4B,GAAG,CAACtB,IAAI,CAACM,IAAI,CAAC;IAChF,MAAMoD,aAAa;IAAA;IAAA,CAAA1E,aAAA,GAAAG,CAAA,QAAGqE,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC;IAAA;IAAA,CAAAtE,aAAA,GAAAU,CAAA,WAAG4D,KAAK;IAAA;IAAA,CAAAtE,aAAA,GAAAU,CAAA,WAAG,CAAC4D,KAAK,CAAC;IAE5D,MAAMK,OAAO;IAAA;IAAA,CAAA3E,aAAA,GAAAG,CAAA,QAAGuE,aAAa,CAACE,IAAI,CAACtD,IAAI,IAAI;MAAA;MAAAtB,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAAoE,SAAS,CAACM,QAAQ,CAACvD,IAAI,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IAErE,IAAI,CAACwE,OAAO,EAAE;MAAA;MAAA3E,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACZ,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,0BAA0B;QACjCuB,IAAI,EAAE,0BAA0B;QAChCoB,QAAQ,EAAEJ,aAAa;QACvBK,OAAO,EAAER;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAEDoD,IAAI,CAAC,CAAC;EACR,CAAC;AACH,CAAC;;AAED;AAAA;AAAAvD,aAAA,GAAAG,CAAA;AACA,MAAM6E,eAAe,GAAIC,QAAQ,IAAK;EAAA;EAAAjF,aAAA,GAAAiB,CAAA;EAAAjB,aAAA,GAAAG,CAAA;EACpC,OAAO,CAACmC,GAAG,EAAEgB,GAAG,EAAEC,IAAI,KAAK;IAAA;IAAAvD,aAAA,GAAAiB,CAAA;IAAAjB,aAAA,GAAAG,CAAA;IACzB,IAAI,CAACmC,GAAG,CAACtB,IAAI,EAAE;MAAA;MAAAhB,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACb,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,yBAAyB;QAChCuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAED,IAAImC,GAAG,CAACtB,IAAI,CAACO,QAAQ,GAAG0D,QAAQ,EAAE;MAAA;MAAAjF,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAChC,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,2BAA2B;QAClCuB,IAAI,EAAE,oBAAoB;QAC1BoB,QAAQ,EAAEG,QAAQ;QAClBF,OAAO,EAAEzC,GAAG,CAACtB,IAAI,CAACO;MACpB,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvB,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAEDoD,IAAI,CAAC,CAAC;EACR,CAAC;AACH,CAAC;;AAED;AAAA;AAAAvD,aAAA,GAAAG,CAAA;AACA,MAAM+E,UAAU,GAAGA,CAAC5C,GAAG,EAAEgB,GAAG,EAAEC,IAAI,KAAK;EAAA;EAAAvD,aAAA,GAAAiB,CAAA;EAAAjB,aAAA,GAAAG,CAAA;EACrC,IAAI,CAACmC,GAAG,CAACtB,IAAI,EAAE;IAAA;IAAAhB,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAG,CAAA;IACb,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BtB,KAAK,EAAE,yBAAyB;MAChCuB,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1D,aAAA,GAAAU,CAAA;EAAA;EAAAV,aAAA,GAAAG,CAAA;EAED,IAAI,CAACmC,GAAG,CAACtB,IAAI,CAACQ,gBAAgB,EAAE;IAAA;IAAAxB,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAG,CAAA;IAC9B,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BtB,KAAK,EAAE,iCAAiC;MACxCuB,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1D,aAAA,GAAAU,CAAA;EAAA;;EAED;EAAAV,aAAA,GAAAG,CAAA;EACA;EAAI;EAAA,CAAAH,aAAA,GAAAU,CAAA,YAAC4B,GAAG,CAAC/B,OAAO;EAAA;EAAA,CAAAP,aAAA,GAAAU,CAAA,WAAI,CAAC4B,GAAG,CAAC/B,OAAO,CAAC4E,iBAAiB,GAAE;IAAA;IAAAnF,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAG,CAAA;IAClD,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BtB,KAAK,EAAE,2BAA2B;MAClCuB,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1D,aAAA,GAAAU,CAAA;EAAA;EAAAV,aAAA,GAAAG,CAAA;EAEDoD,IAAI,CAAC,CAAC;AACR,CAAC;;AAED;AAAA;AAAAvD,aAAA,GAAAG,CAAA;AACA,MAAMiF,wBAAwB,GAAGA,CAAC9C,GAAG,EAAEgB,GAAG,EAAEC,IAAI,KAAK;EAAA;EAAAvD,aAAA,GAAAiB,CAAA;EAAAjB,aAAA,GAAAG,CAAA;EACnD,IAAI,CAACmC,GAAG,CAACtB,IAAI,EAAE;IAAA;IAAAhB,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAG,CAAA;IACb,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BtB,KAAK,EAAE,yBAAyB;MAChCuB,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1D,aAAA,GAAAU,CAAA;EAAA;EAAAV,aAAA,GAAAG,CAAA;EAED,IAAI,CAACmC,GAAG,CAACtB,IAAI,CAACqE,aAAa,EAAE;IAAA;IAAArF,aAAA,GAAAU,CAAA;IAAAV,aAAA,GAAAG,CAAA;IAC3B,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BtB,KAAK,EAAE,6BAA6B;MACpCuB,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1D,aAAA,GAAAU,CAAA;EAAA;EAAAV,aAAA,GAAAG,CAAA;EAEDoD,IAAI,CAAC,CAAC;AACR,CAAC;;AAED;AAAA;AAAAvD,aAAA,GAAAG,CAAA;AACA,MAAMmF,aAAa,GAAGA,CAACC,WAAW,EAAEC,QAAQ,KAAK;EAAA;EAAAxF,aAAA,GAAAiB,CAAA;EAAAjB,aAAA,GAAAG,CAAA;EAC/C,OAAO,OAAOmC,GAAG,EAAEgB,GAAG,EAAEC,IAAI,KAAK;IAAA;IAAAvD,aAAA,GAAAiB,CAAA;IAAAjB,aAAA,GAAAG,CAAA;IAC/B,IAAI,CAACmC,GAAG,CAACtB,IAAI,EAAE;MAAA;MAAAhB,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACb,OAAOoD,IAAI,CAAC,CAAC;IACf,CAAC;IAAA;IAAA;MAAAvD,aAAA,GAAAU,CAAA;IAAA;IAED,MAAM+E,GAAG;IAAA;IAAA,CAAAzF,aAAA,GAAAG,CAAA,SAAG,mBAAmBmC,GAAG,CAACtB,IAAI,CAACG,EAAE,IAAImB,GAAG,CAACoD,KAAK,CAACC,IAAI,EAAE;IAC9D,MAAMZ,OAAO;IAAA;IAAA,CAAA/E,aAAA,GAAAG,CAAA,SAAG,MAAMG,KAAK,CAACsF,IAAI,CAACH,GAAG,CAAC;IAAC;IAAAzF,aAAA,GAAAG,CAAA;IAEtC,IAAI4E,OAAO,KAAK,CAAC,EAAE;MAAA;MAAA/E,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACjB,MAAMG,KAAK,CAACuF,MAAM,CAACJ,GAAG,EAAEK,IAAI,CAACC,IAAI,CAACP,QAAQ,GAAG,IAAI,CAAC,CAAC;IACrD,CAAC;IAAA;IAAA;MAAAxF,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAED,IAAI4E,OAAO,GAAGQ,WAAW,EAAE;MAAA;MAAAvF,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACzB,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,qBAAqB;QAC5BuB,IAAI,EAAE,0BAA0B;QAChCsC,UAAU,EAAE,MAAM1F,KAAK,CAAC2F,GAAG,CAACR,GAAG;MACjC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAzF,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAEDmD,GAAG,CAACF,GAAG,CAAC,mBAAmB,EAAEmC,WAAW,CAAC;IAAC;IAAAvF,aAAA,GAAAG,CAAA;IAC1CmD,GAAG,CAACF,GAAG,CAAC,uBAAuB,EAAE0C,IAAI,CAACI,GAAG,CAAC,CAAC,EAAEX,WAAW,GAAGR,OAAO,CAAC,CAAC;IAAC;IAAA/E,aAAA,GAAAG,CAAA;IACrEmD,GAAG,CAACF,GAAG,CAAC,mBAAmB,EAAE,IAAIY,IAAI,CAACA,IAAI,CAACmC,GAAG,CAAC,CAAC,GAAI,OAAM7F,KAAK,CAAC2F,GAAG,CAACR,GAAG,CAAC,IAAG,IAAK,CAAC,CAAC;IAAC;IAAAzF,aAAA,GAAAG,CAAA;IAEnFoD,IAAI,CAAC,CAAC;EACR,CAAC;AACH,CAAC;;AAED;AAAA;AAAAvD,aAAA,GAAAG,CAAA;AACA,MAAMiG,cAAc,GAAG,MAAAA,CAAO9D,GAAG,EAAEgB,GAAG,EAAEC,IAAI,KAAK;EAAA;EAAAvD,aAAA,GAAAiB,CAAA;EAAAjB,aAAA,GAAAG,CAAA;EAC/C,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACF;IAAI;IAAA,CAAAH,aAAA,GAAAU,CAAA,YAAC4B,GAAG,CAAC/B,OAAO;IAAA;IAAA,CAAAP,aAAA,GAAAU,CAAA,WAAI,CAAC4B,GAAG,CAAC/B,OAAO,CAAC8F,MAAM,GAAE;MAAA;MAAArG,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACvC,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,kBAAkB;QACzBuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;;IAED;IACA,MAAMM,IAAI;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,SAAG,MAAME,IAAI,CAACuD,QAAQ,CAACtB,GAAG,CAAC/B,OAAO,CAAC8F,MAAM,CAAC;IAAC;IAAArG,aAAA,GAAAG,CAAA;IACrD,IAAI,CAACa,IAAI,EAAE;MAAA;MAAAhB,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACTmC,GAAG,CAAC/B,OAAO,CAAC+F,OAAO,CAAC,CAAC;MAAC;MAAAtG,aAAA,GAAAG,CAAA;MACtB,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,gBAAgB;QACvBuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;;IAED;IAAAV,aAAA,GAAAG,CAAA;IACA,IAAIa,IAAI,CAACwC,MAAM,KAAK,QAAQ,EAAE;MAAA;MAAAxD,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAC5BmC,GAAG,CAAC/B,OAAO,CAAC+F,OAAO,CAAC,CAAC;MAAC;MAAAtG,aAAA,GAAAG,CAAA;MACtB,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BtB,KAAK,EAAE,uBAAuB;QAC9BuB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1D,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAEDmC,GAAG,CAACtB,IAAI,GAAGA,IAAI;IAAC;IAAAhB,aAAA,GAAAG,CAAA;IAChBoD,IAAI,CAAC,CAAC;EACR,CAAC,CAAC,OAAOpB,KAAK,EAAE;IAAA;IAAAnC,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAAChC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAAC;IAAAnC,aAAA,GAAAG,CAAA;IAC5C,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BtB,KAAK,EAAE,sBAAsB;MAC7BuB,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;AACF,CAAC;AAAC;AAAA1D,aAAA,GAAAG,CAAA;AAEFoG,MAAM,CAACC,OAAO,GAAG;EACfzF,cAAc;EACdiB,WAAW;EACXK,YAAY;EACZc,cAAc;EACdE,WAAW;EACXe,YAAY;EACZC,WAAW;EACXW,eAAe;EACfE,UAAU;EACVE,wBAAwB;EACxBgB,cAAc;EACdd;AACF,CAAC","ignoreList":[]}