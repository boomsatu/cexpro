{"version":3,"names":["execSync","require","fs","path","module","exports","console","log","stdio","error","MongoClient","client","process","env","MONGODB_URI","connect","db","dropDatabase","close","message","redis","createClient","url","REDIS_URL","flushDb","quit","testDirs","join","__dirname","forEach","dir","existsSync","rmSync","recursive","force","tempFiles","file","unlinkSync","global","mockResponses","testDataTemplates","testCounters","testUtils","testEnvVars","envVar","summaryPath","summary","timestamp","Date","toISOString","environment","cleanup","databases","files","globals","status","writeFileSync","JSON","stringify","cleanupIssues","processes","encoding","testProcesses","split","filter","line","includes","length","openHandles","_getActiveHandles","openRequests","_getActiveRequests","setTimeout","exit"],"sources":["globalTeardown.js"],"sourcesContent":["const { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = async () => {\n  console.log('🧹 Starting global test teardown...');\n  \n  try {\n    // Clean up test databases\n    console.log('🗑️  Cleaning up test databases...');\n    \n    // PostgreSQL cleanup\n    try {\n      execSync('dropdb cex_test', { stdio: 'ignore' });\n      console.log('✅ PostgreSQL test database dropped');\n    } catch (error) {\n      console.log('ℹ️  PostgreSQL test database cleanup skipped (might not exist)');\n    }\n    \n    // MongoDB cleanup\n    try {\n      const { MongoClient } = require('mongodb');\n      const client = new MongoClient(process.env.MONGODB_URI || 'mongodb://localhost:27017');\n      await client.connect();\n      await client.db('cex_test').dropDatabase();\n      await client.close();\n      console.log('✅ MongoDB test database dropped');\n    } catch (error) {\n      console.log('ℹ️  MongoDB test database cleanup skipped:', error.message);\n    }\n    \n    // Redis cleanup\n    try {\n      const redis = require('redis');\n      const client = redis.createClient({\n        url: process.env.REDIS_URL || 'redis://localhost:6379/1'\n      });\n      await client.connect();\n      await client.flushDb();\n      await client.quit();\n      console.log('✅ Redis test database flushed');\n    } catch (error) {\n      console.log('ℹ️  Redis test database cleanup skipped:', error.message);\n    }\n    \n    // Clean up test files and directories\n    console.log('📁 Cleaning up test files...');\n    \n    const testDirs = [\n      path.join(__dirname, '../logs/test'),\n      path.join(__dirname, '../uploads/test'),\n      path.join(__dirname, '../temp/test')\n    ];\n    \n    testDirs.forEach(dir => {\n      try {\n        if (fs.existsSync(dir)) {\n          fs.rmSync(dir, { recursive: true, force: true });\n          console.log(`🗑️  Removed test directory: ${dir}`);\n        }\n      } catch (error) {\n        console.log(`⚠️  Failed to remove directory ${dir}:`, error.message);\n      }\n    });\n    \n    // Clean up temporary test files\n    const tempFiles = [\n      path.join(__dirname, '../test-session.json'),\n      path.join(__dirname, '../test-cache.json'),\n      path.join(__dirname, '../test-locks.json')\n    ];\n    \n    tempFiles.forEach(file => {\n      try {\n        if (fs.existsSync(file)) {\n          fs.unlinkSync(file);\n          console.log(`🗑️  Removed temp file: ${file}`);\n        }\n      } catch (error) {\n        console.log(`⚠️  Failed to remove file ${file}:`, error.message);\n      }\n    });\n    \n    // Clear global test variables\n    console.log('🧹 Clearing global test variables...');\n    \n    delete global.mockResponses;\n    delete global.testDataTemplates;\n    delete global.testCounters;\n    delete global.testUtils;\n    \n    // Clear environment variables\n    const testEnvVars = [\n      'TEST_TIMEOUT',\n      'TEST_DB_SYNC',\n      'TEST_CLEAR_DB',\n      'DISABLE_EXTERNAL_APIS',\n      'DISABLE_EMAIL_SENDING',\n      'DISABLE_SMS_SENDING',\n      'DISABLE_BLOCKCHAIN_CALLS',\n      'ENABLE_TEST_ROUTES',\n      'ENABLE_DEBUG_LOGGING'\n    ];\n    \n    testEnvVars.forEach(envVar => {\n      delete process.env[envVar];\n    });\n    \n    // Generate test summary\n    console.log('📊 Generating test summary...');\n    \n    const summaryPath = path.join(__dirname, '../test-results/test-summary.json');\n    const summary = {\n      timestamp: new Date().toISOString(),\n      environment: 'test',\n      cleanup: {\n        databases: 'cleaned',\n        files: 'cleaned',\n        globals: 'cleared',\n        environment: 'reset'\n      },\n      status: 'completed'\n    };\n    \n    try {\n      fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2));\n      console.log(`📄 Test summary written to: ${summaryPath}`);\n    } catch (error) {\n      console.log('⚠️  Failed to write test summary:', error.message);\n    }\n    \n    // Final cleanup verification\n    console.log('🔍 Verifying cleanup...');\n    \n    let cleanupIssues = 0;\n    \n    // Check for remaining test processes\n    try {\n      const processes = execSync('tasklist /FI \"IMAGENAME eq node.exe\"', { encoding: 'utf8' });\n      const testProcesses = processes.split('\\n').filter(line => \n        line.includes('node.exe') && line.includes('test')\n      );\n      \n      if (testProcesses.length > 0) {\n        console.log('⚠️  Warning: Test processes may still be running');\n        cleanupIssues++;\n      }\n    } catch (error) {\n      // Ignore process check errors on non-Windows systems\n    }\n    \n    // Check for open file handles\n    const openHandles = process._getActiveHandles();\n    const openRequests = process._getActiveRequests();\n    \n    if (openHandles.length > 0 || openRequests.length > 0) {\n      console.log(`⚠️  Warning: ${openHandles.length} handles and ${openRequests.length} requests still open`);\n      cleanupIssues++;\n    }\n    \n    if (cleanupIssues === 0) {\n      console.log('✅ All cleanup verification passed');\n    } else {\n      console.log(`⚠️  Cleanup completed with ${cleanupIssues} minor issues`);\n    }\n    \n    console.log('✅ Global test teardown completed successfully');\n    \n  } catch (error) {\n    console.error('❌ Global test teardown failed:', error);\n    // Don't throw error to avoid masking test results\n  }\n  \n  // Force exit to ensure clean shutdown\n  setTimeout(() => {\n    process.exit(0);\n  }, 1000);\n};"],"mappings":"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","ignoreList":[]}