{"version":3,"names":["cov_e2714gbcn","actualCoverage","client","redis","s","require","Op","Trade","Market","EventEmitter","MarketDataService","constructor","f","tickers","Map","candlesticks","subscribers","intervals","config","tickerUpdateInterval","candlestickIntervals","redisExpiry","maxCandlesticks","priceChangeWindow","setupEventListeners","initializeIntervals","on","handleNewTrade","bind","handleMarketUpdate","set","setInterval","updateAllTickers","updateAllCandlesticks","trade","market","updateTicker","symbol","updateCandlesticks","broadcastTradeData","type","data","price","parseFloat","quantity","side","timestamp","created_at","error","console","marketSymbol","b","findOne","where","Error","stats24h","get24hStats","ticker","get","lastPrice","last_price","volume24h","high24h","low24h","change24h","changePercent24h","bid","ask","bidSize","askSize","Date","toISOString","volume","high","low","change","changePercent","orderBookStats","getOrderBookStats","bestBid","bestAsk","JSON","stringify","EX","broadcastTickerData","now","yesterday","getTime","trades","findAll","trading_pair_id","id","gte","order","attributes","length","openPrice","prices","map","t","volumes","Math","max","min","reduce","sum","vol","currentPrice","tradeTime","interval","updateCandlestickForInterval","candlestickTime","getCandlestickTime","key","currentCandle","find","c","open","close","push","sort","a","slice","broadcastCandlestickData","time","setSeconds","setMinutes","floor","getMinutes","setHours","getHours","dayOfWeek","getDay","setDate","getDate","getTicker","cached","parse","getAllTickers","markets","is_active","Promise","all","getCandlesticks","limit","startTime","endTime","includes","generateCandlesticksFromDB","filtered","filter","intervalMs","getIntervalMs","candlestickMap","candleTime","has","candle","Array","from","values","subscribe","dataType","callback","Set","add","delete","size","update","tradeData","candlestick","log","updateTickerFromTrade","updateCandlestickFromTrade","broadcastToSubscribers","updateData","updateMarketPrice","updateMarketVolume","warn","lastUpdate","oldPrice","candlestickKey","getCandleTime","message","emit","getMarketStats","stats","totalMarkets","Object","keys","totalVolume24h","topGainers","topLosers","tickerArray","sortedByChange","undefined","reverse","cleanup","name","clearInterval","clear","marketDataService","module","exports"],"sources":["marketDataService.js"],"sourcesContent":["const { client: redis } = require('../config/redis');\nconst { Op } = require('sequelize');\nconst Trade = require('../models/Trade');\nconst Market = require('../models/Market');\nconst EventEmitter = require('events');\n\n/**\n * Market Data Service\n * Mengelola distribusi real-time market data, candlestick generation,\n * dan ticker updates\n */\nclass MarketDataService extends EventEmitter {\n  constructor() {\n    super();\n    this.tickers = new Map(); // Current ticker data\n    this.candlesticks = new Map(); // Candlestick data cache\n    this.subscribers = new Map(); // WebSocket subscribers\n    this.intervals = new Map(); // Update intervals\n    \n    // Configuration\n    this.config = {\n      tickerUpdateInterval: 1000, // 1 second\n      candlestickIntervals: ['1m', '5m', '15m', '30m', '1h', '4h', '1d', '1w'],\n      redisExpiry: 3600, // 1 hour\n      maxCandlesticks: 1000,\n      priceChangeWindow: 24 * 60 * 60 * 1000 // 24 hours in ms\n    };\n    \n    this.setupEventListeners();\n    this.initializeIntervals();\n  }\n  \n  setupEventListeners() {\n    // Listen for new trades\n    this.on('newTrade', this.handleNewTrade.bind(this));\n    \n    // Listen for market updates\n    this.on('marketUpdate', this.handleMarketUpdate.bind(this));\n  }\n  \n  /**\n   * Initialize update intervals\n   */\n  initializeIntervals() {\n    // Ticker updates\n    this.intervals.set('ticker', setInterval(() => {\n      this.updateAllTickers();\n    }, this.config.tickerUpdateInterval));\n    \n    // Candlestick updates\n    this.intervals.set('candlestick', setInterval(() => {\n      this.updateAllCandlesticks();\n    }, 60000)); // Every minute\n  }\n  \n  /**\n   * Handle new trade\n   */\n  async handleNewTrade({ trade, market }) {\n    try {\n      // Update ticker\n      await this.updateTicker(market.symbol, trade);\n      \n      // Update candlesticks\n      await this.updateCandlesticks(market.symbol, trade);\n      \n      // Broadcast trade data\n      this.broadcastTradeData(market.symbol, {\n        type: 'trade',\n        data: {\n          price: parseFloat(trade.price),\n          quantity: parseFloat(trade.quantity),\n          side: trade.side,\n          timestamp: trade.created_at\n        }\n      });\n      \n    } catch (error) {\n      console.error(`Error handling new trade for ${market.symbol}:`, error);\n    }\n  }\n  \n  /**\n   * Update ticker data\n   */\n  async updateTicker(marketSymbol, trade = null) {\n    try {\n      const market = await Market.findOne({ where: { symbol: marketSymbol } });\n      \n      if (!market) {\n        throw new Error(`Market ${marketSymbol} not found`);\n      }\n      \n      // Get 24h statistics\n      const stats24h = await this.get24hStats(marketSymbol);\n      \n      // Current ticker data\n      let ticker = this.tickers.get(marketSymbol) || {\n        symbol: marketSymbol,\n        lastPrice: parseFloat(market.last_price),\n        volume24h: 0,\n        high24h: 0,\n        low24h: 0,\n        change24h: 0,\n        changePercent24h: 0,\n        bid: 0,\n        ask: 0,\n        bidSize: 0,\n        askSize: 0,\n        timestamp: new Date().toISOString()\n      };\n      \n      // Update with trade data if provided\n      if (trade) {\n        ticker.lastPrice = parseFloat(trade.price);\n        ticker.timestamp = new Date().toISOString();\n      }\n      \n      // Update with 24h stats\n      if (stats24h) {\n        ticker.volume24h = stats24h.volume;\n        ticker.high24h = stats24h.high;\n        ticker.low24h = stats24h.low;\n        ticker.change24h = stats24h.change;\n        ticker.changePercent24h = stats24h.changePercent;\n      }\n      \n      // Get best bid/ask from order book\n      const orderBookStats = await this.getOrderBookStats(marketSymbol);\n      if (orderBookStats) {\n        ticker.bid = orderBookStats.bestBid || 0;\n        ticker.ask = orderBookStats.bestAsk || 0;\n        ticker.bidSize = orderBookStats.bidSize || 0;\n        ticker.askSize = orderBookStats.askSize || 0;\n      }\n      \n      // Cache ticker\n      this.tickers.set(marketSymbol, ticker);\n      \n      // Cache in Redis\n      await redis.set(\n        `ticker:${marketSymbol}`,\n        JSON.stringify(ticker),\n        { EX: this.config.redisExpiry }\n      );\n      \n      // Broadcast ticker update\n      this.broadcastTickerData(marketSymbol, ticker);\n      \n      return ticker;\n      \n    } catch (error) {\n      console.error(`Error updating ticker for ${marketSymbol}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get 24h statistics\n   */\n  async get24hStats(marketSymbol) {\n    try {\n      const market = await Market.findOne({ where: { symbol: marketSymbol } });\n      \n      if (!market) {\n        return null;\n      }\n      \n      const now = new Date();\n      const yesterday = new Date(now.getTime() - this.config.priceChangeWindow);\n      \n      // Get trades from last 24 hours\n      const trades = await Trade.findAll({\n        where: {\n          trading_pair_id: market.id,\n          created_at: {\n            [Op.gte]: yesterday\n          }\n        },\n        order: [['created_at', 'ASC']],\n        attributes: ['price', 'quantity', 'created_at']\n      });\n      \n      if (trades.length === 0) {\n        return {\n          volume: 0,\n          high: parseFloat(market.last_price),\n          low: parseFloat(market.last_price),\n          change: 0,\n          changePercent: 0,\n          openPrice: parseFloat(market.last_price)\n        };\n      }\n      \n      // Calculate statistics\n      const prices = trades.map(t => parseFloat(t.price));\n      const volumes = trades.map(t => parseFloat(t.quantity));\n      \n      const high = Math.max(...prices);\n      const low = Math.min(...prices);\n      const volume = volumes.reduce((sum, vol) => sum + vol, 0);\n      const openPrice = prices[0];\n      const currentPrice = parseFloat(market.last_price);\n      const change = currentPrice - openPrice;\n      const changePercent = openPrice > 0 ? (change / openPrice) * 100 : 0;\n      \n      return {\n        volume,\n        high,\n        low,\n        change,\n        changePercent,\n        openPrice\n      };\n      \n    } catch (error) {\n      console.error(`Error getting 24h stats for ${marketSymbol}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update candlesticks\n   */\n  async updateCandlesticks(marketSymbol, trade) {\n    try {\n      const tradeTime = new Date(trade.created_at);\n      const price = parseFloat(trade.price);\n      const volume = parseFloat(trade.quantity);\n      \n      // Update candlesticks for all intervals\n      for (const interval of this.config.candlestickIntervals) {\n        await this.updateCandlestickForInterval(marketSymbol, interval, tradeTime, price, volume);\n      }\n      \n    } catch (error) {\n      console.error(`Error updating candlesticks for ${marketSymbol}:`, error);\n    }\n  }\n  \n  /**\n   * Update candlestick for specific interval\n   */\n  async updateCandlestickForInterval(marketSymbol, interval, tradeTime, price, volume) {\n    try {\n      const candlestickTime = this.getCandlestickTime(tradeTime, interval);\n      const key = `${marketSymbol}:${interval}`;\n      \n      // Get current candlesticks\n      let candlesticks = this.candlesticks.get(key) || [];\n      \n      // Find or create current candlestick\n      let currentCandle = candlesticks.find(c => c.timestamp === candlestickTime.getTime());\n      \n      if (!currentCandle) {\n        // Create new candlestick\n        currentCandle = {\n          timestamp: candlestickTime.getTime(),\n          open: price,\n          high: price,\n          low: price,\n          close: price,\n          volume: 0,\n          trades: 0\n        };\n        \n        candlesticks.push(currentCandle);\n        \n        // Sort by timestamp\n        candlesticks.sort((a, b) => a.timestamp - b.timestamp);\n        \n        // Limit array size\n        if (candlesticks.length > this.config.maxCandlesticks) {\n          candlesticks = candlesticks.slice(-this.config.maxCandlesticks);\n        }\n      }\n      \n      // Update candlestick\n      currentCandle.high = Math.max(currentCandle.high, price);\n      currentCandle.low = Math.min(currentCandle.low, price);\n      currentCandle.close = price;\n      currentCandle.volume += volume;\n      currentCandle.trades += 1;\n      \n      // Cache updated candlesticks\n      this.candlesticks.set(key, candlesticks);\n      \n      // Cache in Redis\n      await redis.set(\n        `candlesticks:${key}`,\n        JSON.stringify(candlesticks.slice(-100)), // Store last 100 candles\n        { EX: this.config.redisExpiry }\n      );\n      \n      // Broadcast candlestick update\n      this.broadcastCandlestickData(marketSymbol, interval, currentCandle);\n      \n    } catch (error) {\n      console.error(`Error updating candlestick for ${marketSymbol} ${interval}:`, error);\n    }\n  }\n  \n  /**\n   * Get candlestick time based on interval\n   */\n  getCandlestickTime(tradeTime, interval) {\n    const time = new Date(tradeTime);\n    \n    switch (interval) {\n      case '1m':\n        time.setSeconds(0, 0);\n        break;\n      case '5m':\n        time.setMinutes(Math.floor(time.getMinutes() / 5) * 5, 0, 0);\n        break;\n      case '15m':\n        time.setMinutes(Math.floor(time.getMinutes() / 15) * 15, 0, 0);\n        break;\n      case '30m':\n        time.setMinutes(Math.floor(time.getMinutes() / 30) * 30, 0, 0);\n        break;\n      case '1h':\n        time.setMinutes(0, 0, 0);\n        break;\n      case '4h':\n        time.setHours(Math.floor(time.getHours() / 4) * 4, 0, 0, 0);\n        break;\n      case '1d':\n        time.setHours(0, 0, 0, 0);\n        break;\n      case '1w':\n        const dayOfWeek = time.getDay();\n        time.setDate(time.getDate() - dayOfWeek);\n        time.setHours(0, 0, 0, 0);\n        break;\n      default:\n        time.setSeconds(0, 0);\n    }\n    \n    return time;\n  }\n  \n  /**\n   * Get ticker data\n   */\n  async getTicker(marketSymbol) {\n    try {\n      // Try memory cache first\n      let ticker = this.tickers.get(marketSymbol);\n      \n      if (!ticker) {\n        // Try Redis cache\n        const cached = await redis.get(`ticker:${marketSymbol}`);\n        if (cached) {\n          ticker = JSON.parse(cached);\n          this.tickers.set(marketSymbol, ticker);\n        } else {\n          // Generate fresh ticker\n          ticker = await this.updateTicker(marketSymbol);\n        }\n      }\n      \n      return ticker;\n      \n    } catch (error) {\n      console.error(`Error getting ticker for ${marketSymbol}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get all tickers\n   */\n  async getAllTickers() {\n    try {\n      const markets = await Market.findAll({\n        where: { is_active: true },\n        attributes: ['symbol']\n      });\n      \n      const tickers = {};\n      \n      await Promise.all(\n        markets.map(async (market) => {\n          try {\n            tickers[market.symbol] = await this.getTicker(market.symbol);\n          } catch (error) {\n            console.error(`Error getting ticker for ${market.symbol}:`, error);\n          }\n        })\n      );\n      \n      return tickers;\n      \n    } catch (error) {\n      console.error('Error getting all tickers:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get candlesticks\n   */\n  async getCandlesticks(marketSymbol, interval, limit = 100, startTime = null, endTime = null) {\n    try {\n      if (!this.config.candlestickIntervals.includes(interval)) {\n        throw new Error(`Invalid interval: ${interval}`);\n      }\n      \n      const key = `${marketSymbol}:${interval}`;\n      \n      // Try memory cache first\n      let candlesticks = this.candlesticks.get(key);\n      \n      if (!candlesticks) {\n        // Try Redis cache\n        const cached = await redis.get(`candlesticks:${key}`);\n        if (cached) {\n          candlesticks = JSON.parse(cached);\n          this.candlesticks.set(key, candlesticks);\n        } else {\n          // Generate from database\n          candlesticks = await this.generateCandlesticksFromDB(marketSymbol, interval, limit);\n        }\n      }\n      \n      if (!candlesticks) {\n        return [];\n      }\n      \n      // Apply filters\n      let filtered = candlesticks;\n      \n      if (startTime) {\n        filtered = filtered.filter(c => c.timestamp >= startTime);\n      }\n      \n      if (endTime) {\n        filtered = filtered.filter(c => c.timestamp <= endTime);\n      }\n      \n      // Apply limit\n      if (limit) {\n        filtered = filtered.slice(-limit);\n      }\n      \n      return filtered;\n      \n    } catch (error) {\n      console.error(`Error getting candlesticks for ${marketSymbol} ${interval}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate candlesticks from database\n   */\n  async generateCandlesticksFromDB(marketSymbol, interval, limit) {\n    try {\n      const market = await Market.findOne({ where: { symbol: marketSymbol } });\n      \n      if (!market) {\n        throw new Error(`Market ${marketSymbol} not found`);\n      }\n      \n      // Calculate time range\n      const now = new Date();\n      const intervalMs = this.getIntervalMs(interval);\n      const startTime = new Date(now.getTime() - (limit * intervalMs));\n      \n      // Get trades\n      const trades = await Trade.findAll({\n        where: {\n          trading_pair_id: market.id,\n          created_at: {\n            [Op.gte]: startTime\n          }\n        },\n        order: [['created_at', 'ASC']],\n        attributes: ['price', 'quantity', 'created_at']\n      });\n      \n      // Group trades by candlestick periods\n      const candlestickMap = new Map();\n      \n      for (const trade of trades) {\n        const candleTime = this.getCandlestickTime(trade.created_at, interval);\n        const key = candleTime.getTime();\n        const price = parseFloat(trade.price);\n        const volume = parseFloat(trade.quantity);\n        \n        if (!candlestickMap.has(key)) {\n          candlestickMap.set(key, {\n            timestamp: key,\n            open: price,\n            high: price,\n            low: price,\n            close: price,\n            volume: 0,\n            trades: 0\n          });\n        }\n        \n        const candle = candlestickMap.get(key);\n        candle.high = Math.max(candle.high, price);\n        candle.low = Math.min(candle.low, price);\n        candle.close = price;\n        candle.volume += volume;\n        candle.trades += 1;\n      }\n      \n      // Convert to array and sort\n      const candlesticks = Array.from(candlestickMap.values())\n        .sort((a, b) => a.timestamp - b.timestamp);\n      \n      // Cache the result\n      const key = `${marketSymbol}:${interval}`;\n      this.candlesticks.set(key, candlesticks);\n      \n      return candlesticks;\n      \n    } catch (error) {\n      console.error(`Error generating candlesticks from DB for ${marketSymbol} ${interval}:`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get interval in milliseconds\n   */\n  getIntervalMs(interval) {\n    const intervals = {\n      '1m': 60 * 1000,\n      '5m': 5 * 60 * 1000,\n      '15m': 15 * 60 * 1000,\n      '30m': 30 * 60 * 1000,\n      '1h': 60 * 60 * 1000,\n      '4h': 4 * 60 * 60 * 1000,\n      '1d': 24 * 60 * 60 * 1000,\n      '1w': 7 * 24 * 60 * 60 * 1000\n    };\n    \n    return intervals[interval] || 60 * 1000;\n  }\n  \n  /**\n   * Get order book statistics\n   */\n  async getOrderBookStats(marketSymbol) {\n    try {\n      // This would integrate with OrderBookManager\n      // For now, return mock data\n      return {\n        bestBid: 0,\n        bestAsk: 0,\n        bidSize: 0,\n        askSize: 0\n      };\n    } catch (error) {\n      console.error(`Error getting order book stats for ${marketSymbol}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Subscribe to market data updates\n   */\n  subscribe(marketSymbol, dataType, callback) {\n    const key = `${marketSymbol}:${dataType}`;\n    \n    if (!this.subscribers.has(key)) {\n      this.subscribers.set(key, new Set());\n    }\n    \n    this.subscribers.get(key).add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      const subscribers = this.subscribers.get(key);\n      if (subscribers) {\n        subscribers.delete(callback);\n        if (subscribers.size === 0) {\n          this.subscribers.delete(key);\n        }\n      }\n    };\n  }\n  \n  /**\n   * Broadcast ticker data\n   */\n  broadcastTickerData(marketSymbol, ticker) {\n    const key = `${marketSymbol}:ticker`;\n    const subscribers = this.subscribers.get(key);\n    \n    if (subscribers && subscribers.size > 0) {\n      const update = {\n        type: 'ticker',\n        symbol: marketSymbol,\n        data: ticker,\n        timestamp: new Date().toISOString()\n      };\n      \n      for (const callback of subscribers) {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error('Error broadcasting ticker data:', error);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Broadcast trade data\n   */\n  broadcastTradeData(marketSymbol, tradeData) {\n    const key = `${marketSymbol}:trades`;\n    const subscribers = this.subscribers.get(key);\n    \n    if (subscribers && subscribers.size > 0) {\n      const update = {\n        ...tradeData,\n        symbol: marketSymbol,\n        timestamp: new Date().toISOString()\n      };\n      \n      for (const callback of subscribers) {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error('Error broadcasting trade data:', error);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Broadcast candlestick data\n   */\n  broadcastCandlestickData(marketSymbol, interval, candlestick) {\n    const key = `${marketSymbol}:candlesticks:${interval}`;\n    const subscribers = this.subscribers.get(key);\n    \n    if (subscribers && subscribers.size > 0) {\n      const update = {\n        type: 'candlestick',\n        symbol: marketSymbol,\n        interval,\n        data: candlestick,\n        timestamp: new Date().toISOString()\n      };\n      \n      for (const callback of subscribers) {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error('Error broadcasting candlestick data:', error);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Update all tickers\n   */\n  async updateAllTickers() {\n    try {\n      const markets = await Market.findAll({\n        where: { is_active: true },\n        attributes: ['symbol']\n      });\n      \n      await Promise.all(\n        markets.map(async (market) => {\n          try {\n            await this.updateTicker(market.symbol);\n          } catch (error) {\n            console.error(`Error updating ticker for ${market.symbol}:`, error);\n          }\n        })\n      );\n      \n    } catch (error) {\n      console.error('Error updating all tickers:', error);\n    }\n  }\n  \n  /**\n   * Update all candlesticks\n   */\n  async updateAllCandlesticks() {\n    try {\n      // This would be called periodically to ensure candlesticks are up to date\n      // Implementation depends on specific requirements\n      console.log('Updating all candlesticks...');\n    } catch (error) {\n      console.error('Error updating all candlesticks:', error);\n    }\n  }\n  \n  /**\n   * Handle new trade event\n   */\n  async handleNewTrade(tradeData) {\n    try {\n      const { marketSymbol, price, quantity, timestamp } = tradeData;\n      \n      // Update ticker with new trade\n      await this.updateTickerFromTrade(marketSymbol, price, quantity, timestamp);\n      \n      // Update candlestick data\n      await this.updateCandlestickFromTrade(marketSymbol, price, quantity, timestamp);\n      \n      // Broadcast to subscribers\n      this.broadcastToSubscribers('trade', {\n        symbol: marketSymbol,\n        price,\n        quantity,\n        timestamp\n      });\n      \n    } catch (error) {\n      console.error('Error handling new trade:', error);\n    }\n  }\n  \n  /**\n   * Handle market update event\n   */\n  async handleMarketUpdate(updateData) {\n    try {\n      const { marketSymbol, type, data } = updateData;\n      \n      switch (type) {\n        case 'price_update':\n          await this.updateMarketPrice(marketSymbol, data.price);\n          break;\n        case 'volume_update':\n          await this.updateMarketVolume(marketSymbol, data.volume);\n          break;\n        case 'ticker_update':\n          await this.updateTicker(marketSymbol, data);\n          break;\n        default:\n          console.warn('Unknown market update type:', type);\n      }\n      \n      // Broadcast to subscribers\n      this.broadcastToSubscribers('market_update', {\n        symbol: marketSymbol,\n        type,\n        data,\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Error handling market update:', error);\n    }\n  }\n  \n  /**\n   * Update ticker from trade data\n   */\n  async updateTickerFromTrade(marketSymbol, price, quantity, timestamp) {\n    try {\n      const ticker = this.tickers.get(marketSymbol) || {\n        symbol: marketSymbol,\n        price: 0,\n        volume24h: 0,\n        high24h: 0,\n        low24h: 0,\n        change24h: 0,\n        changePercent24h: 0,\n        lastUpdate: timestamp\n      };\n      \n      // Update price\n      const oldPrice = ticker.price;\n      ticker.price = price;\n      ticker.lastUpdate = timestamp;\n      \n      // Update 24h stats (simplified - in production, use proper time windows)\n      if (price > ticker.high24h || ticker.high24h === 0) {\n        ticker.high24h = price;\n      }\n      if (price < ticker.low24h || ticker.low24h === 0) {\n        ticker.low24h = price;\n      }\n      \n      // Update volume\n      ticker.volume24h += quantity;\n      \n      // Calculate change\n      if (oldPrice > 0) {\n        ticker.change24h = price - oldPrice;\n        ticker.changePercent24h = ((price - oldPrice) / oldPrice) * 100;\n      }\n      \n      this.tickers.set(marketSymbol, ticker);\n      \n    } catch (error) {\n      console.error('Error updating ticker from trade:', error);\n    }\n  }\n  \n  /**\n   * Update candlestick from trade data\n   */\n  async updateCandlestickFromTrade(marketSymbol, price, quantity, timestamp) {\n    try {\n      const intervals = ['1m', '5m', '15m', '1h', '4h', '1d'];\n      \n      for (const interval of intervals) {\n        const candlestickKey = `${marketSymbol}:${interval}`;\n        let candlesticks = this.candlesticks.get(candlestickKey) || [];\n        \n        const candleTime = this.getCandleTime(timestamp, interval);\n        \n        // Find or create current candle\n        let currentCandle = candlesticks.find(c => c.timestamp === candleTime);\n        \n        if (!currentCandle) {\n          currentCandle = {\n            timestamp: candleTime,\n            open: price,\n            high: price,\n            low: price,\n            close: price,\n            volume: 0\n          };\n          candlesticks.push(currentCandle);\n        }\n        \n        // Update candle\n        currentCandle.close = price;\n        currentCandle.high = Math.max(currentCandle.high, price);\n        currentCandle.low = Math.min(currentCandle.low, price);\n        currentCandle.volume += quantity;\n        \n        // Keep only last 1000 candles\n        if (candlesticks.length > 1000) {\n          candlesticks = candlesticks.slice(-1000);\n        }\n        \n        this.candlesticks.set(candlestickKey, candlesticks);\n      }\n      \n    } catch (error) {\n      console.error('Error updating candlestick from trade:', error);\n    }\n  }\n  \n  /**\n   * Broadcast data to subscribers\n   */\n  broadcastToSubscribers(type, data) {\n    try {\n      const message = {\n        type,\n        data,\n        timestamp: new Date().toISOString()\n      };\n      \n      // In a real implementation, this would broadcast via WebSocket\n      // For now, we'll emit an event that can be listened to\n      this.emit('broadcast', message);\n      \n    } catch (error) {\n      console.error('Error broadcasting to subscribers:', error);\n    }\n  }\n\n  /**\n   * Get market statistics\n   */\n  async getMarketStats() {\n    try {\n      const tickers = await this.getAllTickers();\n      \n      const stats = {\n        totalMarkets: Object.keys(tickers).length,\n        totalVolume24h: 0,\n        topGainers: [],\n        topLosers: [],\n        timestamp: new Date().toISOString()\n      };\n      \n      // Calculate statistics\n      const tickerArray = Object.values(tickers);\n      \n      stats.totalVolume24h = tickerArray.reduce((sum, ticker) => {\n        return sum + (ticker.volume24h || 0);\n      }, 0);\n      \n      // Top gainers and losers\n      const sortedByChange = tickerArray\n        .filter(ticker => ticker.changePercent24h !== undefined)\n        .sort((a, b) => b.changePercent24h - a.changePercent24h);\n      \n      stats.topGainers = sortedByChange.slice(0, 10);\n      stats.topLosers = sortedByChange.slice(-10).reverse();\n      \n      return stats;\n      \n    } catch (error) {\n      console.error('Error getting market stats:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    // Clear all intervals\n    for (const [name, interval] of this.intervals) {\n      clearInterval(interval);\n    }\n    \n    // Clear caches\n    this.tickers.clear();\n    this.candlesticks.clear();\n    this.subscribers.clear();\n    this.intervals.clear();\n    \n    console.log('Market data service cleaned up');\n  }\n}\n\n// Create singleton instance\nconst marketDataService = new MarketDataService();\n\nmodule.exports = marketDataService;"],"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","ignoreList":[]}