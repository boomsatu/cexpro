ae61ab165cac748c2fce2986eb9a8c74
/* istanbul ignore next */
function cov_1kmb4pr7l9() {
  var path = "C:\\Users\\mawan\\OneDrive\\Desktop\\CexProject\\backend\\src\\routes\\trading.js";
  var hash = "a08c8325f779debc48421a0a036bb1c65b705d18";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\mawan\\OneDrive\\Desktop\\CexProject\\backend\\src\\routes\\trading.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 31
        },
        end: {
          line: 2,
          column: 59
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 69
        }
      },
      "3": {
        start: {
          line: 4,
          column: 55
        },
        end: {
          line: 4,
          column: 84
        }
      },
      "4": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "5": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "6": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 61,
          column: 1
        }
      },
      "7": {
        start: {
          line: 63,
          column: 25
        },
        end: {
          line: 71,
          column: 1
        }
      },
      "8": {
        start: {
          line: 73,
          column: 26
        },
        end: {
          line: 79,
          column: 1
        }
      },
      "9": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 87,
          column: 1
        }
      },
      "10": {
        start: {
          line: 89,
          column: 29
        },
        end: {
          line: 99,
          column: 1
        }
      },
      "11": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 111,
          column: 1
        }
      },
      "12": {
        start: {
          line: 120,
          column: 0
        },
        end: {
          line: 126,
          column: 2
        }
      },
      "13": {
        start: {
          line: 133,
          column: 0
        },
        end: {
          line: 138,
          column: 2
        }
      },
      "14": {
        start: {
          line: 145,
          column: 0
        },
        end: {
          line: 149,
          column: 2
        }
      },
      "15": {
        start: {
          line: 156,
          column: 0
        },
        end: {
          line: 162,
          column: 2
        }
      },
      "16": {
        start: {
          line: 169,
          column: 0
        },
        end: {
          line: 174,
          column: 2
        }
      },
      "17": {
        start: {
          line: 183,
          column: 0
        },
        end: {
          line: 189,
          column: 2
        }
      },
      "18": {
        start: {
          line: 198,
          column: 0
        },
        end: {
          line: 209,
          column: 2
        }
      },
      "19": {
        start: {
          line: 216,
          column: 0
        },
        end: {
          line: 227,
          column: 2
        }
      },
      "20": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 252,
          column: 2
        }
      },
      "21": {
        start: {
          line: 259,
          column: 0
        },
        end: {
          line: 270,
          column: 2
        }
      },
      "22": {
        start: {
          line: 277,
          column: 0
        },
        end: {
          line: 281,
          column: 2
        }
      },
      "23": {
        start: {
          line: 290,
          column: 0
        },
        end: {
          line: 301,
          column: 2
        }
      },
      "24": {
        start: {
          line: 308,
          column: 0
        },
        end: {
          line: 324,
          column: 2
        }
      },
      "25": {
        start: {
          line: 331,
          column: 0
        },
        end: {
          line: 349,
          column: 2
        }
      },
      "26": {
        start: {
          line: 356,
          column: 0
        },
        end: {
          line: 361,
          column: 2
        }
      },
      "27": {
        start: {
          line: 364,
          column: 0
        },
        end: {
          line: 385,
          column: 3
        }
      },
      "28": {
        start: {
          line: 365,
          column: 2
        },
        end: {
          line: 365,
          column: 47
        }
      },
      "29": {
        start: {
          line: 367,
          column: 2
        },
        end: {
          line: 372,
          column: 3
        }
      },
      "30": {
        start: {
          line: 368,
          column: 4
        },
        end: {
          line: 371,
          column: 7
        }
      },
      "31": {
        start: {
          line: 374,
          column: 2
        },
        end: {
          line: 379,
          column: 3
        }
      },
      "32": {
        start: {
          line: 375,
          column: 4
        },
        end: {
          line: 378,
          column: 7
        }
      },
      "33": {
        start: {
          line: 381,
          column: 2
        },
        end: {
          line: 384,
          column: 5
        }
      },
      "34": {
        start: {
          line: 387,
          column: 0
        },
        end: {
          line: 387,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 364,
            column: 11
          },
          end: {
            line: 364,
            column: 12
          }
        },
        loc: {
          start: {
            line: 364,
            column: 38
          },
          end: {
            line: 385,
            column: 1
          }
        },
        line: 364
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 367,
            column: 2
          },
          end: {
            line: 372,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 2
          },
          end: {
            line: 372,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "1": {
        loc: {
          start: {
            line: 374,
            column: 2
          },
          end: {
            line: 379,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 2
          },
          end: {
            line: 379,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a08c8325f779debc48421a0a036bb1c65b705d18"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kmb4pr7l9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kmb4pr7l9();
const express =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[0]++, require('express'));
const {
  body,
  param,
  query
} =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[1]++, require('express-validator'));
const tradingController =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[2]++, require('../controllers/tradingController'));
const {
  requireAuth,
  optionalAuth,
  requireKYCLevel
} =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[3]++, require('../middleware/auth'));
const {
  tradingRateLimit,
  orderRateLimit,
  marketDataRateLimit,
  createRateLimiter
} =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[4]++, require('../middleware/rateLimit'));
const router =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[5]++, express.Router());

// Validation rules
const orderValidation =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[6]++, [body('symbol').notEmpty().withMessage('Symbol is required').isString().withMessage('Symbol must be a string').isLength({
  min: 3,
  max: 20
}).withMessage('Symbol must be between 3 and 20 characters'), body('side').notEmpty().withMessage('Side is required').isIn(['buy', 'sell']).withMessage('Side must be buy or sell'), body('type').notEmpty().withMessage('Type is required').isIn(['market', 'limit', 'stop', 'stop_limit']).withMessage('Type must be market, limit, stop, or stop_limit'), body('quantity').notEmpty().withMessage('Quantity is required').isFloat({
  gt: 0
}).withMessage('Quantity must be a positive number'), body('price').optional().isFloat({
  gt: 0
}).withMessage('Price must be a positive number'), body('stopPrice').optional().isFloat({
  gt: 0
}).withMessage('Stop price must be a positive number'), body('timeInForce').optional().isIn(['GTC', 'IOC', 'FOK']).withMessage('Time in force must be GTC, IOC, or FOK'), body('clientOrderId').optional().isString().isLength({
  max: 64
}).withMessage('Client order ID must be a string with max 64 characters')]);
const symbolValidation =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[7]++, [param('symbol').notEmpty().withMessage('Symbol is required').isString().withMessage('Symbol must be a string').isLength({
  min: 3,
  max: 20
}).withMessage('Symbol must be between 3 and 20 characters')]);
const orderIdValidation =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[8]++, [param('orderId').notEmpty().withMessage('Order ID is required').isString().withMessage('Order ID must be a string')]);
const walletIdValidation =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[9]++, [param('walletId').notEmpty().withMessage('Wallet ID is required').isInt({
  gt: 0
}).withMessage('Wallet ID must be a positive integer')]);
const paginationValidation =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[10]++, [query('limit').optional().isInt({
  min: 1,
  max: 1000
}).withMessage('Limit must be between 1 and 1000'), query('offset').optional().isInt({
  min: 0
}).withMessage('Offset must be a non-negative integer')]);
const timeRangeValidation =
/* istanbul ignore next */
(cov_1kmb4pr7l9().s[11]++, [query('startTime').optional().isInt({
  gt: 0
}).withMessage('Start time must be a positive timestamp'), query('endTime').optional().isInt({
  gt: 0
}).withMessage('End time must be a positive timestamp')]);

// Order Management Routes

/**
 * @route   POST /api/trading/orders
 * @desc    Place a new order
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[12]++;
router.post('/orders', requireAuth, requireKYCLevel(1),
// Minimal KYC level 1 untuk trading
orderRateLimit, orderValidation, tradingController.placeOrder);

/**
 * @route   DELETE /api/trading/orders/:orderId
 * @desc    Cancel an order
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[13]++;
router.delete('/orders/:orderId', requireAuth, orderRateLimit, orderIdValidation, tradingController.cancelOrder);

/**
 * @route   DELETE /api/trading/orders
 * @desc    Cancel all orders
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[14]++;
router.delete('/orders', requireAuth, createRateLimiter({
  windowMs: 60000,
  max: 10
}), tradingController.cancelAllOrders);

/**
 * @route   GET /api/trading/orders
 * @desc    Get user orders
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[15]++;
router.get('/orders', requireAuth, tradingRateLimit, paginationValidation, timeRangeValidation, tradingController.getUserOrders);

/**
 * @route   GET /api/trading/orders/:orderId
 * @desc    Get order by ID
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[16]++;
router.get('/orders/:orderId', requireAuth, tradingRateLimit, orderIdValidation, tradingController.getOrderById);

// Trade History Routes

/**
 * @route   GET /api/trading/trades
 * @desc    Get user trades
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[17]++;
router.get('/trades', requireAuth, tradingRateLimit, paginationValidation, timeRangeValidation, tradingController.getUserTrades);

// Market Data Routes (Public)

/**
 * @route   GET /api/trading/orderbook/:symbol
 * @desc    Get order book for a symbol
 * @access  Public
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[18]++;
router.get('/orderbook/:symbol', optionalAuth, marketDataRateLimit, symbolValidation, [query('depth').optional().isInt({
  min: 1,
  max: 100
}).withMessage('Depth must be between 1 and 100')], tradingController.getOrderBook);

/**
 * @route   GET /api/trading/ticker/:symbol?
 * @desc    Get ticker for a symbol or all symbols
 * @access  Public
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[19]++;
router.get('/ticker/:symbol?', optionalAuth, marketDataRateLimit, [param('symbol').optional().isString().isLength({
  min: 3,
  max: 20
}).withMessage('Symbol must be between 3 and 20 characters')], tradingController.getTicker);

/**
 * @route   GET /api/trading/candlesticks/:symbol
 * @desc    Get candlestick data for a symbol
 * @access  Public
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[20]++;
router.get('/candlesticks/:symbol', optionalAuth, marketDataRateLimit, symbolValidation, [query('interval').notEmpty().withMessage('Interval is required').isIn(['1m', '5m', '15m', '30m', '1h', '4h', '1d', '1w']).withMessage('Invalid interval'), query('limit').optional().isInt({
  min: 1,
  max: 1000
}).withMessage('Limit must be between 1 and 1000')], timeRangeValidation, tradingController.getCandlesticks);

/**
 * @route   GET /api/trading/trades/:symbol
 * @desc    Get recent trades for a symbol
 * @access  Public
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[21]++;
router.get('/trades/:symbol', optionalAuth, marketDataRateLimit, symbolValidation, [query('limit').optional().isInt({
  min: 1,
  max: 1000
}).withMessage('Limit must be between 1 and 1000')], tradingController.getRecentTrades);

/**
 * @route   GET /api/trading/stats
 * @desc    Get market statistics
 * @access  Public
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[22]++;
router.get('/stats', optionalAuth, marketDataRateLimit, tradingController.getMarketStats);

// Balance and Wallet Routes

/**
 * @route   GET /api/trading/balances
 * @desc    Get user balances
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[23]++;
router.get('/balances', requireAuth, tradingRateLimit, [query('currency').optional().isString().isLength({
  min: 2,
  max: 10
}).withMessage('Currency must be between 2 and 10 characters')], tradingController.getUserBalances);

/**
 * @route   GET /api/trading/wallets
 * @desc    Get user wallets
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[24]++;
router.get('/wallets', requireAuth, tradingRateLimit, [query('currency').optional().isString().isLength({
  min: 2,
  max: 10
}).withMessage('Currency must be between 2 and 10 characters'), query('walletType').optional().isIn(['hot', 'warm', 'cold']).withMessage('Wallet type must be hot, warm, or cold')], tradingController.getUserWallets);

/**
 * @route   POST /api/trading/wallets
 * @desc    Create a new wallet
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[25]++;
router.post('/wallets', requireAuth, requireKYCLevel(2),
// KYC level 2 untuk membuat wallet
createRateLimiter({
  windowMs: 60000,
  max: 10
}), [body('currency').notEmpty().withMessage('Currency is required').isString().isLength({
  min: 2,
  max: 10
}).withMessage('Currency must be between 2 and 10 characters'), body('walletType').optional().isIn(['hot', 'warm', 'cold']).withMessage('Wallet type must be hot, warm, or cold')], tradingController.createWallet);

/**
 * @route   POST /api/trading/wallets/:walletId/address
 * @desc    Generate new address for wallet
 * @access  Private
 */
/* istanbul ignore next */
cov_1kmb4pr7l9().s[26]++;
router.post('/wallets/:walletId/address', requireAuth, createRateLimiter({
  windowMs: 60000,
  max: 20
}), walletIdValidation, tradingController.generateNewAddress);

// Error handling middleware
/* istanbul ignore next */
cov_1kmb4pr7l9().s[27]++;
router.use((error, req, res, next) => {
  /* istanbul ignore next */
  cov_1kmb4pr7l9().f[0]++;
  cov_1kmb4pr7l9().s[28]++;
  console.error('Trading route error:', error);
  /* istanbul ignore next */
  cov_1kmb4pr7l9().s[29]++;
  if (error.type === 'entity.parse.failed') {
    /* istanbul ignore next */
    cov_1kmb4pr7l9().b[0][0]++;
    cov_1kmb4pr7l9().s[30]++;
    return res.status(400).json({
      success: false,
      message: 'Invalid JSON format'
    });
  } else
  /* istanbul ignore next */
  {
    cov_1kmb4pr7l9().b[0][1]++;
  }
  cov_1kmb4pr7l9().s[31]++;
  if (error.type === 'entity.too.large') {
    /* istanbul ignore next */
    cov_1kmb4pr7l9().b[1][0]++;
    cov_1kmb4pr7l9().s[32]++;
    return res.status(413).json({
      success: false,
      message: 'Request entity too large'
    });
  } else
  /* istanbul ignore next */
  {
    cov_1kmb4pr7l9().b[1][1]++;
  }
  cov_1kmb4pr7l9().s[33]++;
  res.status(500).json({
    success: false,
    message: 'Internal server error'
  });
});
/* istanbul ignore next */
cov_1kmb4pr7l9().s[34]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,