{"version":3,"names":["WebSocket","require","Server","app","User","TradingPair","Order","jwt","describe","server","wsServer","testUser","tradingPair","accessToken","WS_PORT","beforeAll","listen","WebSocketService","afterAll","close","beforeEach","testUtils","createTestUser","email","username","createTestTradingPair","symbol","base_currency","quote_currency","generateTestToken","id","it","done","ws","on","expect","readyState","toBe","OPEN","error","send","JSON","stringify","type","token","data","message","parse","toString","user_id","toContain","afterEach","channel","createTestBalance","then","event","order","status","setTimeout","create","trading_pair_id","side","quantity","price","filled_quantity","remaining_quantity","update","balance","currency","available_balance","total_balance","messageCount","rateLimited","i","Error","connections","connectedCount","totalConnections","push","forEach","conn","terminate"],"sources":["websocket.test.js"],"sourcesContent":["const WebSocket = require('ws');\nconst { Server } = require('http');\nconst app = require('../../src/server');\nconst { User, TradingPair, Order } = require('../../src/models');\nconst jwt = require('jsonwebtoken');\n\ndescribe('WebSocket Integration Tests', () => {\n  let server, wsServer, testUser, tradingPair, accessToken;\n  const WS_PORT = 3003;\n\n  beforeAll(async () => {\n    // Create HTTP server for WebSocket\n    server = new Server(app);\n    server.listen(WS_PORT);\n    \n    // Initialize WebSocket server (assuming it's exported from your WebSocket service)\n    const WebSocketService = require('../../src/services/websocketService');\n    wsServer = new WebSocketService(server);\n  });\n\n  afterAll(async () => {\n    if (server) {\n      server.close();\n    }\n  });\n\n  beforeEach(async () => {\n    // Create test user and trading pair\n    testUser = await testUtils.createTestUser({\n      email: 'wstest@example.com',\n      username: 'wstest'\n    });\n    \n    tradingPair = await testUtils.createTestTradingPair({\n      symbol: 'BTC/USDT',\n      base_currency: 'BTC',\n      quote_currency: 'USDT'\n    });\n    \n    accessToken = testUtils.generateTestToken(testUser.id);\n  });\n\n  describe('WebSocket Connection', () => {\n    it('should establish WebSocket connection successfully', (done) => {\n      const ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n      \n      ws.on('open', () => {\n        expect(ws.readyState).toBe(WebSocket.OPEN);\n        ws.close();\n        done();\n      });\n      \n      ws.on('error', (error) => {\n        done(error);\n      });\n    });\n\n    it('should authenticate WebSocket connection with valid token', (done) => {\n      const ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n      \n      ws.on('open', () => {\n        ws.send(JSON.stringify({\n          type: 'auth',\n          token: accessToken\n        }));\n      });\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'auth_success') {\n          expect(message.user_id).toBe(testUser.id);\n          ws.close();\n          done();\n        }\n      });\n      \n      ws.on('error', (error) => {\n        done(error);\n      });\n    });\n\n    it('should reject WebSocket connection with invalid token', (done) => {\n      const ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n      \n      ws.on('open', () => {\n        ws.send(JSON.stringify({\n          type: 'auth',\n          token: 'invalid-token'\n        }));\n      });\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'auth_error') {\n          expect(message.error).toContain('Invalid token');\n          ws.close();\n          done();\n        }\n      });\n      \n      ws.on('error', (error) => {\n        done(error);\n      });\n    });\n  });\n\n  describe('Market Data Subscription', () => {\n    let ws;\n\n    beforeEach((done) => {\n      ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n      \n      ws.on('open', () => {\n        // Authenticate first\n        ws.send(JSON.stringify({\n          type: 'auth',\n          token: accessToken\n        }));\n      });\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        if (message.type === 'auth_success') {\n          done();\n        }\n      });\n    });\n\n    afterEach(() => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    });\n\n    it('should subscribe to ticker updates', (done) => {\n      ws.send(JSON.stringify({\n        type: 'subscribe',\n        channel: 'ticker',\n        symbol: 'BTC/USDT'\n      }));\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'subscription_success') {\n          expect(message.channel).toBe('ticker');\n          expect(message.symbol).toBe('BTC/USDT');\n          done();\n        }\n      });\n    });\n\n    it('should subscribe to order book updates', (done) => {\n      ws.send(JSON.stringify({\n        type: 'subscribe',\n        channel: 'orderbook',\n        symbol: 'BTC/USDT'\n      }));\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'subscription_success') {\n          expect(message.channel).toBe('orderbook');\n          expect(message.symbol).toBe('BTC/USDT');\n          done();\n        }\n      });\n    });\n\n    it('should subscribe to trade updates', (done) => {\n      ws.send(JSON.stringify({\n        type: 'subscribe',\n        channel: 'trades',\n        symbol: 'BTC/USDT'\n      }));\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'subscription_success') {\n          expect(message.channel).toBe('trades');\n          expect(message.symbol).toBe('BTC/USDT');\n          done();\n        }\n      });\n    });\n\n    it('should reject subscription to invalid symbol', (done) => {\n      ws.send(JSON.stringify({\n        type: 'subscribe',\n        channel: 'ticker',\n        symbol: 'INVALID/PAIR'\n      }));\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'subscription_error') {\n          expect(message.error).toContain('Invalid symbol');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('Order Updates', () => {\n    let ws;\n\n    beforeEach((done) => {\n      ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n      \n      ws.on('open', () => {\n        ws.send(JSON.stringify({\n          type: 'auth',\n          token: accessToken\n        }));\n      });\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        if (message.type === 'auth_success') {\n          // Subscribe to user orders\n          ws.send(JSON.stringify({\n            type: 'subscribe',\n            channel: 'orders'\n          }));\n        } else if (message.type === 'subscription_success' && message.channel === 'orders') {\n          done();\n        }\n      });\n    });\n\n    afterEach(() => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    });\n\n    it('should receive order creation updates', (done) => {\n      // Create balance for user\n      testUtils.createTestBalance(testUser.id, 'USDT', '50000').then(() => {\n        // Listen for order updates\n        ws.on('message', (data) => {\n          const message = JSON.parse(data.toString());\n          \n          if (message.type === 'order_update' && message.event === 'created') {\n            expect(message.order.user_id).toBe(testUser.id);\n            expect(message.order.symbol).toBe('BTC/USDT');\n            expect(message.order.status).toBe('open');\n            done();\n          }\n        });\n        \n        // Create order via API\n        setTimeout(() => {\n          Order.create({\n            user_id: testUser.id,\n            trading_pair_id: tradingPair.id,\n            symbol: 'BTC/USDT',\n            side: 'buy',\n            type: 'limit',\n            quantity: '0.1',\n            price: '45000',\n            status: 'open',\n            filled_quantity: '0',\n            remaining_quantity: '0.1'\n          });\n        }, 100);\n      });\n    });\n\n    it('should receive order cancellation updates', (done) => {\n      // Create an order first\n      Order.create({\n        user_id: testUser.id,\n        trading_pair_id: tradingPair.id,\n        symbol: 'BTC/USDT',\n        side: 'buy',\n        type: 'limit',\n        quantity: '0.1',\n        price: '45000',\n        status: 'open',\n        filled_quantity: '0',\n        remaining_quantity: '0.1'\n      }).then((order) => {\n        ws.on('message', (data) => {\n          const message = JSON.parse(data.toString());\n          \n          if (message.type === 'order_update' && message.event === 'cancelled') {\n            expect(message.order.id).toBe(order.id);\n            expect(message.order.status).toBe('cancelled');\n            done();\n          }\n        });\n        \n        // Cancel order\n        setTimeout(() => {\n          order.update({ status: 'cancelled' });\n        }, 100);\n      });\n    });\n  });\n\n  describe('Balance Updates', () => {\n    let ws;\n\n    beforeEach((done) => {\n      ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n      \n      ws.on('open', () => {\n        ws.send(JSON.stringify({\n          type: 'auth',\n          token: accessToken\n        }));\n      });\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        if (message.type === 'auth_success') {\n          // Subscribe to balance updates\n          ws.send(JSON.stringify({\n            type: 'subscribe',\n            channel: 'balances'\n          }));\n        } else if (message.type === 'subscription_success' && message.channel === 'balances') {\n          done();\n        }\n      });\n    });\n\n    afterEach(() => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    });\n\n    it('should receive balance updates', (done) => {\n      // Create initial balance\n      testUtils.createTestBalance(testUser.id, 'BTC', '1.0').then((balance) => {\n        ws.on('message', (data) => {\n          const message = JSON.parse(data.toString());\n          \n          if (message.type === 'balance_update') {\n            expect(message.balance.user_id).toBe(testUser.id);\n            expect(message.balance.currency).toBe('BTC');\n            expect(message.balance.available_balance).toBe('1.5');\n            done();\n          }\n        });\n        \n        // Update balance\n        setTimeout(() => {\n          balance.update({ \n            available_balance: '1.5',\n            total_balance: '1.5'\n          });\n        }, 100);\n      });\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should enforce WebSocket rate limiting', (done) => {\n      const ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n      let messageCount = 0;\n      let rateLimited = false;\n      \n      ws.on('open', () => {\n        ws.send(JSON.stringify({\n          type: 'auth',\n          token: accessToken\n        }));\n      });\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'auth_success') {\n          // Send many messages quickly\n          for (let i = 0; i < 100; i++) {\n            ws.send(JSON.stringify({\n              type: 'ping'\n            }));\n          }\n        } else if (message.type === 'rate_limit_exceeded') {\n          rateLimited = true;\n          expect(message.error).toContain('rate limit');\n          ws.close();\n          done();\n        } else if (message.type === 'pong') {\n          messageCount++;\n          // If we get too many responses without rate limiting, fail\n          if (messageCount > 50 && !rateLimited) {\n            ws.close();\n            done(new Error('Rate limiting not enforced'));\n          }\n        }\n      });\n      \n      // Timeout if rate limiting doesn't kick in\n      setTimeout(() => {\n        if (!rateLimited) {\n          ws.close();\n          done(new Error('Rate limiting timeout'));\n        }\n      }, 5000);\n    });\n  });\n\n  describe('Connection Management', () => {\n    it('should handle multiple concurrent connections', (done) => {\n      const connections = [];\n      let connectedCount = 0;\n      const totalConnections = 5;\n      \n      for (let i = 0; i < totalConnections; i++) {\n        const ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n        connections.push(ws);\n        \n        ws.on('open', () => {\n          connectedCount++;\n          \n          if (connectedCount === totalConnections) {\n            // All connections established\n            expect(connectedCount).toBe(totalConnections);\n            \n            // Close all connections\n            connections.forEach(conn => conn.close());\n            done();\n          }\n        });\n        \n        ws.on('error', (error) => {\n          done(error);\n        });\n      }\n    });\n\n    it('should handle connection cleanup on disconnect', (done) => {\n      const ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n      \n      ws.on('open', () => {\n        ws.send(JSON.stringify({\n          type: 'auth',\n          token: accessToken\n        }));\n      });\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'auth_success') {\n          // Subscribe to a channel\n          ws.send(JSON.stringify({\n            type: 'subscribe',\n            channel: 'ticker',\n            symbol: 'BTC/USDT'\n          }));\n        } else if (message.type === 'subscription_success') {\n          // Close connection abruptly\n          ws.terminate();\n          \n          // Wait a bit for cleanup\n          setTimeout(() => {\n            // Connection should be cleaned up\n            // This test verifies that the server doesn't crash\n            done();\n          }, 1000);\n        }\n      });\n    });\n  });\n\n  describe('Message Validation', () => {\n    let ws;\n\n    beforeEach((done) => {\n      ws = new WebSocket(`ws://localhost:${WS_PORT}`);\n      \n      ws.on('open', () => {\n        ws.send(JSON.stringify({\n          type: 'auth',\n          token: accessToken\n        }));\n      });\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        if (message.type === 'auth_success') {\n          done();\n        }\n      });\n    });\n\n    afterEach(() => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    });\n\n    it('should reject invalid JSON messages', (done) => {\n      ws.send('invalid json');\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'error') {\n          expect(message.error).toContain('Invalid JSON');\n          done();\n        }\n      });\n    });\n\n    it('should reject messages without type', (done) => {\n      ws.send(JSON.stringify({\n        data: 'test'\n      }));\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'error') {\n          expect(message.error).toContain('Missing message type');\n          done();\n        }\n      });\n    });\n\n    it('should reject unknown message types', (done) => {\n      ws.send(JSON.stringify({\n        type: 'unknown_type'\n      }));\n      \n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'error') {\n          expect(message.error).toContain('Unknown message type');\n          done();\n        }\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}