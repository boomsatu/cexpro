{"version":3,"names":["cov_1rv5683l4r","actualCoverage","client","redis","s","require","Op","Order","Market","EventEmitter","OrderBookManager","constructor","f","orderBooks","Map","subscribers","updateIntervals","config","maxDepth","updateInterval","redisExpiry","aggregationLevels","setupEventListeners","on","handleOrderUpdate","bind","handleTradeExecuted","handleOrderCancelled","initializeOrderBook","marketSymbol","market","findOne","where","symbol","b","Error","orderBook","loadOrderBookFromDB","id","set","cacheOrderBookInRedis","startPeriodicUpdates","console","log","error","marketId","bids","asks","Promise","all","findAll","market_id","side","status","quantity_remaining","gt","order","limit","attributes","processOrders","timestamp","Date","toISOString","sequence","now","orders","priceMap","price","parseFloat","quantity","has","get","Array","from","entries","map","getOrderBook","depth","aggregation","getOrderBookFromRedis","limitedOrderBook","slice","includes","aggregateOrderBook","cached","JSON","parse","stringify","EX","action","updateOrderBookInMemory","broadcastOrderBookUpdate","type","trade","refreshOrderBook","created_at","priceLevel","find","level","push","sortOrderBook","index","indexOf","splice","sort","a","tickSize","aggregateSide","aggregated","aggregatedPrice","Math","floor","getOrderBookStats","length","bestBid","bestAsk","spread","spreadPercent","bidDepth","reduce","sum","askDepth","totalDepth","subscribe","callback","Set","add","delete","size","stopPeriodicUpdates","update","interval","setInterval","data","clearInterval","getMultipleOrderBooks","marketSymbols","clearCache","del","clear","keys","getCacheStats","inMemoryMarkets","activeSubscriptions","activeUpdates","markets","cleanup","orderBookManager","module","exports"],"sources":["orderBookManager.js"],"sourcesContent":["const { client: redis } = require('../config/redis');\nconst { Op } = require('sequelize');\nconst Order = require('../models/Order');\nconst Market = require('../models/Market');\nconst EventEmitter = require('events');\n\n/**\n * Order Book Management System\n * Mengelola real-time order book dengan Redis caching\n * dan WebSocket broadcasting\n */\nclass OrderBookManager extends EventEmitter {\n  constructor() {\n    super();\n    this.orderBooks = new Map(); // In-memory cache\n    this.subscribers = new Map(); // WebSocket subscribers per market\n    this.updateIntervals = new Map(); // Update intervals per market\n    \n    // Configuration\n    this.config = {\n      maxDepth: 50,\n      updateInterval: 100, // ms\n      redisExpiry: 300, // 5 minutes\n      aggregationLevels: [0.00000001, 0.0000001, 0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1, 1]\n    };\n    \n    this.setupEventListeners();\n  }\n  \n  setupEventListeners() {\n    // Listen for order updates\n    this.on('orderUpdate', this.handleOrderUpdate.bind(this));\n    \n    // Listen for trade executions\n    this.on('tradeExecuted', this.handleTradeExecuted.bind(this));\n    \n    // Listen for order cancellations\n    this.on('orderCancelled', this.handleOrderCancelled.bind(this));\n  }\n  \n  /**\n   * Initialize order book for a market\n   */\n  async initializeOrderBook(marketSymbol) {\n    try {\n      const market = await Market.findOne({ where: { symbol: marketSymbol } });\n      \n      if (!market) {\n        throw new Error(`Market ${marketSymbol} not found`);\n      }\n      \n      // Load order book from database\n      const orderBook = await this.loadOrderBookFromDB(market.id);\n      \n      // Cache in memory\n      this.orderBooks.set(marketSymbol, orderBook);\n      \n      // Cache in Redis\n      await this.cacheOrderBookInRedis(marketSymbol, orderBook);\n      \n      // Start periodic updates\n      this.startPeriodicUpdates(marketSymbol);\n      \n      console.log(`Order book initialized for ${marketSymbol}`);\n      \n      return orderBook;\n      \n    } catch (error) {\n      console.error(`Error initializing order book for ${marketSymbol}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Load order book from database\n   */\n  async loadOrderBookFromDB(marketId) {\n    const [bids, asks] = await Promise.all([\n      // Buy orders (bids) - highest price first\n      Order.findAll({\n        where: {\n          market_id: marketId,\n          side: 'buy',\n          status: 'open',\n          quantity_remaining: { [Op.gt]: 0 }\n        },\n        order: [['price', 'DESC'], ['created_at', 'ASC']],\n        limit: this.config.maxDepth,\n        attributes: ['id', 'price', 'quantity_remaining', 'created_at']\n      }),\n      \n      // Sell orders (asks) - lowest price first\n      Order.findAll({\n        where: {\n          market_id: marketId,\n          side: 'sell',\n          status: 'open',\n          quantity_remaining: { [Op.gt]: 0 }\n        },\n        order: [['price', 'ASC'], ['created_at', 'ASC']],\n        limit: this.config.maxDepth,\n        attributes: ['id', 'price', 'quantity_remaining', 'created_at']\n      })\n    ]);\n    \n    return {\n      bids: this.processOrders(bids),\n      asks: this.processOrders(asks),\n      timestamp: new Date().toISOString(),\n      sequence: Date.now()\n    };\n  }\n  \n  /**\n   * Process orders into order book format\n   */\n  processOrders(orders) {\n    const priceMap = new Map();\n    \n    // Aggregate orders by price level\n    for (const order of orders) {\n      const price = parseFloat(order.price);\n      const quantity = parseFloat(order.quantity_remaining);\n      \n      if (priceMap.has(price)) {\n        priceMap.set(price, priceMap.get(price) + quantity);\n      } else {\n        priceMap.set(price, quantity);\n      }\n    }\n    \n    // Convert to array format [price, quantity]\n    return Array.from(priceMap.entries()).map(([price, quantity]) => [price, quantity]);\n  }\n  \n  /**\n   * Get order book for a market\n   */\n  async getOrderBook(marketSymbol, depth = 20, aggregation = null) {\n    try {\n      // Try to get from memory cache first\n      let orderBook = this.orderBooks.get(marketSymbol);\n      \n      if (!orderBook) {\n        // Try to get from Redis cache\n        orderBook = await this.getOrderBookFromRedis(marketSymbol);\n        \n        if (!orderBook) {\n          // Initialize from database\n          orderBook = await this.initializeOrderBook(marketSymbol);\n        } else {\n          // Cache in memory\n          this.orderBooks.set(marketSymbol, orderBook);\n        }\n      }\n      \n      // Apply depth limit\n      const limitedOrderBook = {\n        ...orderBook,\n        bids: orderBook.bids.slice(0, depth),\n        asks: orderBook.asks.slice(0, depth)\n      };\n      \n      // Apply price aggregation if requested\n      if (aggregation && this.config.aggregationLevels.includes(aggregation)) {\n        return this.aggregateOrderBook(limitedOrderBook, aggregation);\n      }\n      \n      return limitedOrderBook;\n      \n    } catch (error) {\n      console.error(`Error getting order book for ${marketSymbol}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get order book from Redis cache\n   */\n  async getOrderBookFromRedis(marketSymbol) {\n    try {\n      const cached = await redis.get(`orderbook:${marketSymbol}`);\n      return cached ? JSON.parse(cached) : null;\n    } catch (error) {\n      console.error(`Error getting order book from Redis for ${marketSymbol}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Cache order book in Redis\n   */\n  async cacheOrderBookInRedis(marketSymbol, orderBook) {\n    try {\n      await redis.set(\n        `orderbook:${marketSymbol}`,\n        JSON.stringify(orderBook),\n        { EX: this.config.redisExpiry }\n      );\n    } catch (error) {\n      console.error(`Error caching order book in Redis for ${marketSymbol}:`, error);\n      // Continue without caching to prevent unhandled rejection\n    }\n  }\n  \n  /**\n   * Handle order update\n   */\n  async handleOrderUpdate({ order, market, action }) {\n    const marketSymbol = market.symbol;\n    \n    try {\n      // Update in-memory order book\n      await this.updateOrderBookInMemory(marketSymbol, order, action);\n      \n      // Broadcast update to subscribers\n      this.broadcastOrderBookUpdate(marketSymbol, {\n        type: 'orderUpdate',\n        action,\n        order: {\n          id: order.id,\n          side: order.side,\n          price: order.price,\n          quantity: order.quantity_remaining\n        },\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error(`Error handling order update for ${marketSymbol}:`, error);\n    }\n  }\n  \n  /**\n   * Handle trade execution\n   */\n  async handleTradeExecuted({ trade, market }) {\n    const marketSymbol = market.symbol;\n    \n    try {\n      // Refresh order book after trade\n      await this.refreshOrderBook(marketSymbol);\n      \n      // Broadcast trade update\n      this.broadcastOrderBookUpdate(marketSymbol, {\n        type: 'trade',\n        trade: {\n          price: trade.price,\n          quantity: trade.quantity,\n          side: trade.side,\n          timestamp: trade.created_at\n        },\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error(`Error handling trade execution for ${marketSymbol}:`, error);\n    }\n  }\n  \n  /**\n   * Handle order cancellation\n   */\n  async handleOrderCancelled({ order, market }) {\n    const marketSymbol = market.symbol;\n    \n    try {\n      // Remove order from order book\n      await this.updateOrderBookInMemory(marketSymbol, order, 'remove');\n      \n      // Broadcast cancellation\n      this.broadcastOrderBookUpdate(marketSymbol, {\n        type: 'orderCancelled',\n        order: {\n          id: order.id,\n          side: order.side,\n          price: order.price\n        },\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error(`Error handling order cancellation for ${marketSymbol}:`, error);\n    }\n  }\n  \n  /**\n   * Update order book in memory\n   */\n  async updateOrderBookInMemory(marketSymbol, order, action) {\n    const orderBook = this.orderBooks.get(marketSymbol);\n    \n    if (!orderBook) {\n      // Initialize if not exists\n      await this.initializeOrderBook(marketSymbol);\n      return;\n    }\n    \n    const price = parseFloat(order.price);\n    const quantity = parseFloat(order.quantity_remaining);\n    const side = order.side === 'buy' ? 'bids' : 'asks';\n    \n    // Find price level\n    const priceLevel = orderBook[side].find(level => level[0] === price);\n    \n    switch (action) {\n      case 'add':\n        if (priceLevel) {\n          priceLevel[1] += quantity;\n        } else {\n          orderBook[side].push([price, quantity]);\n          // Re-sort\n          this.sortOrderBook(orderBook, side);\n        }\n        break;\n        \n      case 'update':\n        if (priceLevel) {\n          priceLevel[1] = quantity;\n          if (quantity <= 0) {\n            // Remove empty price level\n            const index = orderBook[side].indexOf(priceLevel);\n            orderBook[side].splice(index, 1);\n          }\n        }\n        break;\n        \n      case 'remove':\n        if (priceLevel) {\n          const index = orderBook[side].indexOf(priceLevel);\n          orderBook[side].splice(index, 1);\n        }\n        break;\n    }\n    \n    // Update timestamp and sequence\n    orderBook.timestamp = new Date().toISOString();\n    orderBook.sequence = Date.now();\n    \n    // Limit depth\n    orderBook.bids = orderBook.bids.slice(0, this.config.maxDepth);\n    orderBook.asks = orderBook.asks.slice(0, this.config.maxDepth);\n  }\n  \n  /**\n   * Sort order book\n   */\n  sortOrderBook(orderBook, side) {\n    if (side === 'bids') {\n      // Bids: highest price first\n      orderBook.bids.sort((a, b) => b[0] - a[0]);\n    } else {\n      // Asks: lowest price first\n      orderBook.asks.sort((a, b) => a[0] - b[0]);\n    }\n  }\n  \n  /**\n   * Refresh order book from database\n   */\n  async refreshOrderBook(marketSymbol) {\n    try {\n      const market = await Market.findOne({ where: { symbol: marketSymbol } });\n      \n      if (!market) {\n        throw new Error(`Market ${marketSymbol} not found`);\n      }\n      \n      const orderBook = await this.loadOrderBookFromDB(market.id);\n      \n      // Update caches\n      this.orderBooks.set(marketSymbol, orderBook);\n      await this.cacheOrderBookInRedis(marketSymbol, orderBook);\n      \n      return orderBook;\n      \n    } catch (error) {\n      console.error(`Error refreshing order book for ${marketSymbol}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Aggregate order book by price levels\n   */\n  aggregateOrderBook(orderBook, tickSize) {\n    const aggregateSide = (orders) => {\n      const aggregated = new Map();\n      \n      for (const [price, quantity] of orders) {\n        const aggregatedPrice = Math.floor(price / tickSize) * tickSize;\n        \n        if (aggregated.has(aggregatedPrice)) {\n          aggregated.set(aggregatedPrice, aggregated.get(aggregatedPrice) + quantity);\n        } else {\n          aggregated.set(aggregatedPrice, quantity);\n        }\n      }\n      \n      return Array.from(aggregated.entries());\n    };\n    \n    return {\n      ...orderBook,\n      bids: aggregateSide(orderBook.bids).sort((a, b) => b[0] - a[0]),\n      asks: aggregateSide(orderBook.asks).sort((a, b) => a[0] - b[0])\n    };\n  }\n  \n  /**\n   * Get order book statistics\n   */\n  async getOrderBookStats(marketSymbol) {\n    const orderBook = await this.getOrderBook(marketSymbol);\n    \n    if (!orderBook || !orderBook.bids.length || !orderBook.asks.length) {\n      return null;\n    }\n    \n    const bestBid = orderBook.bids[0];\n    const bestAsk = orderBook.asks[0];\n    const spread = bestAsk[0] - bestBid[0];\n    const spreadPercent = (spread / bestBid[0]) * 100;\n    \n    // Calculate depth\n    const bidDepth = orderBook.bids.reduce((sum, [, quantity]) => sum + quantity, 0);\n    const askDepth = orderBook.asks.reduce((sum, [, quantity]) => sum + quantity, 0);\n    \n    return {\n      symbol: marketSymbol,\n      bestBid: bestBid[0],\n      bestAsk: bestAsk[0],\n      spread,\n      spreadPercent,\n      bidDepth,\n      askDepth,\n      totalDepth: bidDepth + askDepth,\n      timestamp: orderBook.timestamp\n    };\n  }\n  \n  /**\n   * Subscribe to order book updates\n   */\n  subscribe(marketSymbol, callback) {\n    if (!this.subscribers.has(marketSymbol)) {\n      this.subscribers.set(marketSymbol, new Set());\n    }\n    \n    this.subscribers.get(marketSymbol).add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      const subscribers = this.subscribers.get(marketSymbol);\n      if (subscribers) {\n        subscribers.delete(callback);\n        if (subscribers.size === 0) {\n          this.subscribers.delete(marketSymbol);\n          this.stopPeriodicUpdates(marketSymbol);\n        }\n      }\n    };\n  }\n  \n  /**\n   * Broadcast order book update to subscribers\n   */\n  broadcastOrderBookUpdate(marketSymbol, update) {\n    const subscribers = this.subscribers.get(marketSymbol);\n    \n    if (subscribers && subscribers.size > 0) {\n      for (const callback of subscribers) {\n        try {\n          callback(update);\n        } catch (error) {\n          console.error('Error broadcasting order book update:', error);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Start periodic updates for a market\n   */\n  startPeriodicUpdates(marketSymbol) {\n    if (this.updateIntervals.has(marketSymbol)) {\n      return; // Already running\n    }\n    \n    const interval = setInterval(async () => {\n      try {\n        const orderBook = this.orderBooks.get(marketSymbol);\n        if (orderBook && this.subscribers.has(marketSymbol)) {\n          // Cache in Redis periodically\n          await this.cacheOrderBookInRedis(marketSymbol, orderBook);\n          \n          // Broadcast full order book update\n          this.broadcastOrderBookUpdate(marketSymbol, {\n            type: 'snapshot',\n            data: await this.getOrderBook(marketSymbol, 20),\n            timestamp: new Date().toISOString()\n          });\n        }\n      } catch (error) {\n        console.error(`Error in periodic update for ${marketSymbol}:`, error);\n      }\n    }, this.config.updateInterval);\n    \n    this.updateIntervals.set(marketSymbol, interval);\n  }\n  \n  /**\n   * Stop periodic updates for a market\n   */\n  stopPeriodicUpdates(marketSymbol) {\n    const interval = this.updateIntervals.get(marketSymbol);\n    \n    if (interval) {\n      clearInterval(interval);\n      this.updateIntervals.delete(marketSymbol);\n    }\n  }\n  \n  /**\n   * Get multiple order books\n   */\n  async getMultipleOrderBooks(marketSymbols, depth = 10) {\n    const orderBooks = {};\n    \n    await Promise.all(\n      marketSymbols.map(async (symbol) => {\n        try {\n          orderBooks[symbol] = await this.getOrderBook(symbol, depth);\n        } catch (error) {\n          console.error(`Error getting order book for ${symbol}:`, error);\n          orderBooks[symbol] = null;\n        }\n      })\n    );\n    \n    return orderBooks;\n  }\n  \n  /**\n   * Clear order book cache\n   */\n  async clearCache(marketSymbol = null) {\n    if (marketSymbol) {\n      // Clear specific market\n      this.orderBooks.delete(marketSymbol);\n      await redis.del(`orderbook:${marketSymbol}`);\n    } else {\n      // Clear all\n      this.orderBooks.clear();\n      const keys = await redis.keys('orderbook:*');\n      if (keys.length > 0) {\n        await redis.del(...keys);\n      }\n    }\n  }\n  \n  /**\n   * Get cache statistics\n   */\n  getCacheStats() {\n    return {\n      inMemoryMarkets: this.orderBooks.size,\n      activeSubscriptions: this.subscribers.size,\n      activeUpdates: this.updateIntervals.size,\n      markets: Array.from(this.orderBooks.keys())\n    };\n  }\n  \n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    // Stop all periodic updates\n    for (const [marketSymbol] of this.updateIntervals) {\n      this.stopPeriodicUpdates(marketSymbol);\n    }\n    \n    // Clear all caches\n    this.orderBooks.clear();\n    this.subscribers.clear();\n    \n    console.log('Order book manager cleaned up');\n  }\n}\n\n// Create singleton instance\nconst orderBookManager = new OrderBookManager();\n\nmodule.exports = orderBookManager;"],"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","ignoreList":[]}