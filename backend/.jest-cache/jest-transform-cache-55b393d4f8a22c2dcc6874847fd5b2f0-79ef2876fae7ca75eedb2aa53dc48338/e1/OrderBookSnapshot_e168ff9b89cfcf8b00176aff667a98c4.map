{"version":3,"names":["cov_vbe5zcott","actualCoverage","DataTypes","s","require","sequelize","Market","OrderBookSnapshot","define","id","type","UUID","defaultValue","UUIDV4","primaryKey","trading_pair_id","allowNull","references","model","key","comment","snapshot_time","DATE","sequence_number","BIGINT","bids","JSONB","asks","best_bid","DECIMAL","best_ask","spread","spread_percent","bid_depth","ask_depth","total_depth","liquidity_score","market_impact_1pct","imbalance_ratio","created_at","NOW","tableName","timestamps","createdAt","updatedAt","indexes","fields","prototype","getMidPrice","f","b","parseFloat","getSpreadBps","getBidAskRatio","getTopNLevels","n","slice","calculateMarketImpact","orderSize","side","orders","remainingSize","totalCost","weightedPrice","price","quantity","levelPrice","levelQuantity","fillQuantity","Math","min","midPrice","weighted_price","market_impact","abs","slippage","createSnapshot","tradingPairId","sequenceNumber","bestBid","length","bestAsk","spreadPercent","bidDepth","reduce","sum","qty","askDepth","totalDepth","imbalanceRatio","liquidityScore","log10","create","Date","getLatestSnapshot","findOne","where","order","getSnapshotHistory","limit","startTime","endTime","Op","gte","lte","findAll","getLiquidityMetrics","timeRange","timeRangeMap","hoursBack","now","snapshots","attributes","fn","col","raw","cleanupOldSnapshots","retentionDays","cutoffDate","destroy","lt","module","exports"],"sources":["OrderBookSnapshot.js"],"sourcesContent":["const { DataTypes } = require('sequelize');\nconst { sequelize } = require('../config/database');\nconst Market = require('./Market');\n\n/**\n * Model OrderBookSnapshot untuk menyimpan snapshot order book\n * Berguna untuk analisis likuiditas dan rekonstruksi order book historis\n */\nconst OrderBookSnapshot = sequelize.define('OrderBookSnapshot', {\n  id: {\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n    primaryKey: true\n  },\n  \n  // Foreign key\n  trading_pair_id: {\n    type: DataTypes.UUID,\n    allowNull: false,\n    references: {\n      model: 'trading_pairs',\n      key: 'id'\n    },\n    comment: 'Trading pair reference'\n  },\n  \n  // Snapshot metadata\n  snapshot_time: {\n    type: DataTypes.DATE,\n    allowNull: false,\n    comment: 'When the snapshot was taken'\n  },\n  \n  sequence_number: {\n    type: DataTypes.BIGINT,\n    allowNull: false,\n    comment: 'Sequence number for ordering snapshots'\n  },\n  \n  // Order book data\n  bids: {\n    type: DataTypes.JSONB,\n    allowNull: false,\n    comment: 'Buy orders array [[price, quantity], ...]'\n  },\n  \n  asks: {\n    type: DataTypes.JSONB,\n    allowNull: false,\n    comment: 'Sell orders array [[price, quantity], ...]'\n  },\n  \n  // Calculated metrics\n  best_bid: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Highest bid price'\n  },\n  \n  best_ask: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Lowest ask price'\n  },\n  \n  spread: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Bid-ask spread'\n  },\n  \n  spread_percent: {\n    type: DataTypes.DECIMAL(10, 6),\n    allowNull: true,\n    comment: 'Bid-ask spread percentage'\n  },\n  \n  bid_depth: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Total bid volume'\n  },\n  \n  ask_depth: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Total ask volume'\n  },\n  \n  total_depth: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Total order book depth'\n  },\n  \n  // Liquidity metrics\n  liquidity_score: {\n    type: DataTypes.DECIMAL(10, 6),\n    allowNull: true,\n    comment: 'Calculated liquidity score'\n  },\n  \n  market_impact_1pct: {\n    type: DataTypes.DECIMAL(10, 6),\n    allowNull: true,\n    comment: 'Market impact for 1% of daily volume'\n  },\n  \n  // Order book imbalance\n  imbalance_ratio: {\n    type: DataTypes.DECIMAL(10, 6),\n    allowNull: true,\n    comment: 'Bid/ask volume imbalance ratio'\n  },\n  \n  // Timestamps\n  created_at: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW,\n    allowNull: false\n  }\n}, {\n  tableName: 'order_book_snapshots',\n  timestamps: true,\n  createdAt: 'created_at',\n  updatedAt: false,\n  indexes: [\n    {\n      fields: ['trading_pair_id', 'snapshot_time']\n    },\n    {\n      fields: ['trading_pair_id', 'sequence_number']\n    },\n    {\n      fields: ['snapshot_time']\n    },\n    {\n      fields: ['sequence_number']\n    },\n    {\n      fields: ['best_bid']\n    },\n    {\n      fields: ['best_ask']\n    }\n  ]\n});\n\n// Associations\n// Associations are defined in models/index.js\n\n// Instance methods\nOrderBookSnapshot.prototype.getMidPrice = function() {\n  if (!this.best_bid || !this.best_ask) return null;\n  return (parseFloat(this.best_bid) + parseFloat(this.best_ask)) / 2;\n};\n\nOrderBookSnapshot.prototype.getSpreadBps = function() {\n  if (!this.spread_percent) return null;\n  return parseFloat(this.spread_percent) * 100; // Convert to basis points\n};\n\nOrderBookSnapshot.prototype.getBidAskRatio = function() {\n  if (parseFloat(this.ask_depth) === 0) return null;\n  return parseFloat(this.bid_depth) / parseFloat(this.ask_depth);\n};\n\nOrderBookSnapshot.prototype.getTopNLevels = function(n = 10) {\n  return {\n    bids: this.bids.slice(0, n),\n    asks: this.asks.slice(0, n)\n  };\n};\n\nOrderBookSnapshot.prototype.calculateMarketImpact = function(orderSize, side = 'buy') {\n  const orders = side === 'buy' ? this.asks : this.bids;\n  let remainingSize = parseFloat(orderSize);\n  let totalCost = 0;\n  let weightedPrice = 0;\n  \n  for (const [price, quantity] of orders) {\n    const levelPrice = parseFloat(price);\n    const levelQuantity = parseFloat(quantity);\n    \n    if (remainingSize <= 0) break;\n    \n    const fillQuantity = Math.min(remainingSize, levelQuantity);\n    totalCost += fillQuantity * levelPrice;\n    remainingSize -= fillQuantity;\n  }\n  \n  if (remainingSize > 0) {\n    // Not enough liquidity\n    return null;\n  }\n  \n  weightedPrice = totalCost / parseFloat(orderSize);\n  const midPrice = this.getMidPrice();\n  \n  if (!midPrice) return null;\n  \n  return {\n    weighted_price: weightedPrice,\n    market_impact: Math.abs(weightedPrice - midPrice) / midPrice,\n    slippage: (weightedPrice - midPrice) / midPrice\n  };\n};\n\n// Static methods\nOrderBookSnapshot.createSnapshot = async function(tradingPairId, bids, asks, sequenceNumber) {\n  // Calculate metrics\n  const bestBid = bids.length > 0 ? parseFloat(bids[0][0]) : null;\n  const bestAsk = asks.length > 0 ? parseFloat(asks[0][0]) : null;\n  \n  const spread = (bestBid && bestAsk) ? bestAsk - bestBid : null;\n  const spreadPercent = (spread && bestBid) ? (spread / bestBid) * 100 : null;\n  \n  const bidDepth = bids.reduce((sum, [price, qty]) => sum + parseFloat(qty), 0);\n  const askDepth = asks.reduce((sum, [price, qty]) => sum + parseFloat(qty), 0);\n  const totalDepth = bidDepth + askDepth;\n  \n  const imbalanceRatio = askDepth > 0 ? bidDepth / askDepth : null;\n  \n  // Calculate liquidity score (simplified)\n  const liquidityScore = totalDepth > 0 ? Math.min(100, Math.log10(totalDepth) * 20) : 0;\n  \n  return await OrderBookSnapshot.create({\n    trading_pair_id: tradingPairId,\n    snapshot_time: new Date(),\n    sequence_number: sequenceNumber,\n    bids: bids,\n    asks: asks,\n    best_bid: bestBid,\n    best_ask: bestAsk,\n    spread: spread,\n    spread_percent: spreadPercent,\n    bid_depth: bidDepth,\n    ask_depth: askDepth,\n    total_depth: totalDepth,\n    imbalance_ratio: imbalanceRatio,\n    liquidity_score: liquidityScore\n  });\n};\n\nOrderBookSnapshot.getLatestSnapshot = async function(tradingPairId) {\n  return await OrderBookSnapshot.findOne({\n    where: { trading_pair_id: tradingPairId },\n    order: [['sequence_number', 'DESC']]\n  });\n};\n\nOrderBookSnapshot.getSnapshotHistory = async function(tradingPairId, limit = 100, startTime = null, endTime = null) {\n  const where = { trading_pair_id: tradingPairId };\n  \n  if (startTime || endTime) {\n    where.snapshot_time = {};\n    if (startTime) where.snapshot_time[sequelize.Op.gte] = startTime;\n    if (endTime) where.snapshot_time[sequelize.Op.lte] = endTime;\n  }\n  \n  return await OrderBookSnapshot.findAll({\n    where,\n    order: [['snapshot_time', 'DESC']],\n    limit\n  });\n};\n\nOrderBookSnapshot.getLiquidityMetrics = async function(tradingPairId, timeRange = '1h') {\n  const timeRangeMap = {\n    '1h': 1,\n    '4h': 4,\n    '1d': 24,\n    '7d': 168\n  };\n  \n  const hoursBack = timeRangeMap[timeRange] || 1;\n  const startTime = new Date(Date.now() - hoursBack * 60 * 60 * 1000);\n  \n  const snapshots = await OrderBookSnapshot.findAll({\n    where: {\n      trading_pair_id: tradingPairId,\n      snapshot_time: { [sequelize.Op.gte]: startTime }\n    },\n    attributes: [\n      [sequelize.fn('AVG', sequelize.col('spread_percent')), 'avg_spread'],\n      [sequelize.fn('AVG', sequelize.col('total_depth')), 'avg_depth'],\n      [sequelize.fn('AVG', sequelize.col('liquidity_score')), 'avg_liquidity_score'],\n      [sequelize.fn('AVG', sequelize.col('imbalance_ratio')), 'avg_imbalance'],\n      [sequelize.fn('MIN', sequelize.col('spread_percent')), 'min_spread'],\n      [sequelize.fn('MAX', sequelize.col('spread_percent')), 'max_spread']\n    ],\n    raw: true\n  });\n  \n  return snapshots[0] || {};\n};\n\nOrderBookSnapshot.cleanupOldSnapshots = async function(retentionDays = 30) {\n  const cutoffDate = new Date(Date.now() - retentionDays * 24 * 60 * 60 * 1000);\n  \n  return await OrderBookSnapshot.destroy({\n    where: {\n      snapshot_time: { [sequelize.Op.lt]: cutoffDate }\n    }\n  });\n};\n\nmodule.exports = OrderBookSnapshot;"],"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","ignoreList":[]}