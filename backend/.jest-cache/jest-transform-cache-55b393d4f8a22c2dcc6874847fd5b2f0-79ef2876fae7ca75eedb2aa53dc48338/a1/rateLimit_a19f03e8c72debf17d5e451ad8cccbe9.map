{"version":3,"names":["cov_2kywy0k40x","actualCoverage","redis","s","require","crypto","RateLimiter","constructor","options","b","f","windowMs","max","keyGenerator","defaultKeyGenerator","skipSuccessfulRequests","skipFailedRequests","message","standardHeaders","legacyHeaders","store","req","ip","connection","remoteAddress","userKeyGenerator","user","id","combinedKeyGenerator","getCurrentCount","key","count","cache","get","parseInt","error","console","incrementCount","multi","incr","expire","Math","ceil","results","exec","getTTL","ttl","middleware","res","next","current","resetTime","Date","now","set","toISOString","getTime","status","json","success","retryAfter","newCount","remaining","createRateLimiter","limiter","apiRateLimit","authRateLimit","identifier","body","email","username","tradingRateLimit","orderRateLimit","marketDataRateLimit","wsConnectionRateLimit","adminRateLimit","withdrawalRateLimit","passwordResetRateLimit","twoFARateLimit","module","exports"],"sources":["rateLimit.js"],"sourcesContent":["const redis = require('../config/redis');\nconst crypto = require('crypto');\n\n/**\n * Rate limiting middleware dengan konfigurasi yang fleksibel\n * Mendukung rate limiting berdasarkan IP, user, atau kombinasi keduanya\n */\nclass RateLimiter {\n  constructor(options = {}) {\n    this.windowMs = options.windowMs || 60000; // 1 minute default\n    this.max = options.max || 100; // 100 requests default\n    this.keyGenerator = options.keyGenerator || this.defaultKeyGenerator;\n    this.skipSuccessfulRequests = options.skipSuccessfulRequests || false;\n    this.skipFailedRequests = options.skipFailedRequests || false;\n    this.message = options.message || 'Too many requests, please try again later.';\n    this.standardHeaders = options.standardHeaders !== false;\n    this.legacyHeaders = options.legacyHeaders !== false;\n    this.store = options.store || 'redis';\n  }\n\n  // Default key generator menggunakan IP address\n  defaultKeyGenerator(req) {\n    return req.ip || req.connection.remoteAddress;\n  }\n\n  // Key generator untuk user-based rate limiting\n  userKeyGenerator(req) {\n    if (req.user) {\n      return `user:${req.user.id}`;\n    }\n    return req.ip || req.connection.remoteAddress;\n  }\n\n  // Key generator untuk kombinasi IP dan user\n  combinedKeyGenerator(req) {\n    const ip = req.ip || req.connection.remoteAddress;\n    if (req.user) {\n      return `${ip}:user:${req.user.id}`;\n    }\n    return ip;\n  }\n\n  // Get current count from Redis\n  async getCurrentCount(key) {\n    try {\n      const count = await redis.cache.get(key);\n      return count ? parseInt(count) : 0;\n    } catch (error) {\n      console.error('Rate limit Redis error:', error);\n      return 0;\n    }\n  }\n\n  // Increment count in Redis\n  async incrementCount(key) {\n    try {\n      const multi = redis.cache.multi();\n      multi.incr(key);\n      multi.expire(key, Math.ceil(this.windowMs / 1000));\n      const results = await multi.exec();\n      return results[0][1]; // Return the incremented value\n    } catch (error) {\n      console.error('Rate limit Redis increment error:', error);\n      return 1;\n    }\n  }\n\n  // Get TTL for the key\n  async getTTL(key) {\n    try {\n      return await redis.cache.ttl(key);\n    } catch (error) {\n      console.error('Rate limit Redis TTL error:', error);\n      return Math.ceil(this.windowMs / 1000);\n    }\n  }\n\n  // Main middleware function\n  middleware() {\n    return async (req, res, next) => {\n      try {\n        const key = `rate_limit:${this.keyGenerator(req)}`;\n        const current = await this.getCurrentCount(key);\n\n        // Check if limit exceeded\n        if (current >= this.max) {\n          const ttl = await this.getTTL(key);\n          const resetTime = new Date(Date.now() + (ttl * 1000));\n\n          // Set headers\n          if (this.standardHeaders) {\n            res.set('RateLimit-Limit', this.max);\n            res.set('RateLimit-Remaining', 0);\n            res.set('RateLimit-Reset', resetTime.toISOString());\n          }\n\n          if (this.legacyHeaders) {\n            res.set('X-RateLimit-Limit', this.max);\n            res.set('X-RateLimit-Remaining', 0);\n            res.set('X-RateLimit-Reset', Math.ceil(resetTime.getTime() / 1000));\n          }\n\n          res.set('Retry-After', ttl);\n\n          return res.status(429).json({\n            success: false,\n            message: this.message,\n            retryAfter: ttl,\n            resetTime: resetTime.toISOString()\n          });\n        }\n\n        // Increment counter\n        const newCount = await this.incrementCount(key);\n        const remaining = Math.max(0, this.max - newCount);\n        const ttl = await this.getTTL(key);\n        const resetTime = new Date(Date.now() + (ttl * 1000));\n\n        // Set headers\n        if (this.standardHeaders) {\n          res.set('RateLimit-Limit', this.max);\n          res.set('RateLimit-Remaining', remaining);\n          res.set('RateLimit-Reset', resetTime.toISOString());\n        }\n\n        if (this.legacyHeaders) {\n          res.set('X-RateLimit-Limit', this.max);\n          res.set('X-RateLimit-Remaining', remaining);\n          res.set('X-RateLimit-Reset', Math.ceil(resetTime.getTime() / 1000));\n        }\n\n        next();\n      } catch (error) {\n        console.error('Rate limit middleware error:', error);\n        // On error, allow the request to proceed\n        next();\n      }\n    };\n  }\n}\n\n/**\n * Factory function untuk membuat rate limiter\n */\nconst createRateLimiter = (options) => {\n  const limiter = new RateLimiter(options);\n  return limiter.middleware();\n};\n\n/**\n * Predefined rate limiters untuk berbagai use case\n */\n\n// General API rate limiter\nconst apiRateLimit = createRateLimiter({\n  windowMs: 60000, // 1 minute\n  max: 1000, // 1000 requests per minute\n  message: 'Too many API requests, please try again later.'\n});\n\n// Authentication rate limiter\nconst authRateLimit = createRateLimiter({\n  windowMs: 15 * 60000, // 15 minutes\n  max: 5, // 5 attempts per 15 minutes\n  message: 'Too many authentication attempts, please try again later.',\n  keyGenerator: (req) => {\n    const ip = req.ip || req.connection.remoteAddress;\n    const identifier = req.body.email || req.body.username || 'unknown';\n    return `auth:${ip}:${identifier}`;\n  }\n});\n\n// Trading rate limiter (per user)\nconst tradingRateLimit = createRateLimiter({\n  windowMs: 60000, // 1 minute\n  max: 100, // 100 trading requests per minute per user\n  message: 'Too many trading requests, please slow down.',\n  keyGenerator: (req) => {\n    if (req.user) {\n      return `trading:user:${req.user.id}`;\n    }\n    return `trading:ip:${req.ip || req.connection.remoteAddress}`;\n  }\n});\n\n// Order placement rate limiter (stricter)\nconst orderRateLimit = createRateLimiter({\n  windowMs: 60000, // 1 minute\n  max: 50, // 50 orders per minute per user\n  message: 'Too many order requests, please slow down.',\n  keyGenerator: (req) => {\n    if (req.user) {\n      return `orders:user:${req.user.id}`;\n    }\n    return `orders:ip:${req.ip || req.connection.remoteAddress}`;\n  }\n});\n\n// Market data rate limiter (more lenient)\nconst marketDataRateLimit = createRateLimiter({\n  windowMs: 60000, // 1 minute\n  max: 600, // 600 requests per minute\n  message: 'Too many market data requests, please slow down.'\n});\n\n// WebSocket connection rate limiter\nconst wsConnectionRateLimit = createRateLimiter({\n  windowMs: 60000, // 1 minute\n  max: 10, // 10 connections per minute per IP\n  message: 'Too many WebSocket connection attempts, please try again later.'\n});\n\n// Admin API rate limiter\nconst adminRateLimit = createRateLimiter({\n  windowMs: 60000, // 1 minute\n  max: 200, // 200 requests per minute\n  message: 'Too many admin requests, please slow down.',\n  keyGenerator: (req) => {\n    if (req.user) {\n      return `admin:user:${req.user.id}`;\n    }\n    return `admin:ip:${req.ip || req.connection.remoteAddress}`;\n  }\n});\n\n// Withdrawal rate limiter (very strict)\nconst withdrawalRateLimit = createRateLimiter({\n  windowMs: 60000, // 1 minute\n  max: 5, // 5 withdrawal requests per minute per user\n  message: 'Too many withdrawal requests, please wait before trying again.',\n  keyGenerator: (req) => {\n    if (req.user) {\n      return `withdrawal:user:${req.user.id}`;\n    }\n    return `withdrawal:ip:${req.ip || req.connection.remoteAddress}`;\n  }\n});\n\n// Password reset rate limiter\nconst passwordResetRateLimit = createRateLimiter({\n  windowMs: 60 * 60000, // 1 hour\n  max: 3, // 3 password reset attempts per hour\n  message: 'Too many password reset attempts, please try again later.',\n  keyGenerator: (req) => {\n    const ip = req.ip || req.connection.remoteAddress;\n    const email = req.body.email || 'unknown';\n    return `password_reset:${ip}:${email}`;\n  }\n});\n\n// 2FA verification rate limiter\nconst twoFARateLimit = createRateLimiter({\n  windowMs: 5 * 60000, // 5 minutes\n  max: 5, // 5 attempts per 5 minutes\n  message: 'Too many 2FA verification attempts, please try again later.',\n  keyGenerator: (req) => {\n    if (req.user) {\n      return `2fa:user:${req.user.id}`;\n    }\n    return `2fa:ip:${req.ip || req.connection.remoteAddress}`;\n  }\n});\n\nmodule.exports = {\n  RateLimiter,\n  createRateLimiter,\n  apiRateLimit,\n  authRateLimit,\n  tradingRateLimit,\n  orderRateLimit,\n  marketDataRateLimit,\n  wsConnectionRateLimit,\n  adminRateLimit,\n  withdrawalRateLimit,\n  passwordResetRateLimit,\n  twoFARateLimit\n};"],"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","ignoreList":[]}