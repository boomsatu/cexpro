{"version":3,"names":["cov_1221lqhcxj","actualCoverage","Op","s","require","sequelize","Order","Trade","Market","Balance","client","redis","EventEmitter","OrderMatchingEngine","constructor","f","isProcessing","Map","orderQueues","lastPrices","setupEventListeners","on","handleNewOrder","bind","handleCancelOrder","handlePriceUpdate","processOrder","orderData","transaction","market","findOne","where","symbol","market_symbol","is_active","b","Error","validateAndLockBalance","order","create","market_id","id","status","commit","emit","error","rollback","marketSymbol","get","queueOrder","set","matchOrder","console","update","notes","message","processQueuedOrders","type","matchMarketOrder","matchLimitOrder","handleStopOrder","handleStopLimitOrder","oppositeSide","side","oppositeOrders","getOppositeOrders","remainingQuantity","parseFloat","quantity_remaining","trades","oppositeOrder","tradeQuantity","Math","min","tradePrice","price","trade","executeTrade","push","updateMarketPrice","filled_at","Date","cancelRemainingQuantity","orderPrice","getMatchingOrders","quantity","currentPrice","last_price","stopPrice","stop_price","shouldTrigger","takerOrder","makerOrder","tradeValue","makerFee","maker_fee","takerFee","taker_fee","maker_user_id","user_id","taker_user_id","maker_order_id","taker_order_id","value","trade_type","makerRemaining","takerRemaining","quantity_filled","average_price","calculateAveragePrice","updateBalancesAfterTrade","baseCurrency","quoteCurrency","split","takerBaseBalance","getUserBalance","takerQuoteBalance","addBalance","unlockBalance","makerBaseBalance","makerQuoteBalance","marketId","originalSide","orderBy","findAll","gt","limit","priceCondition","lte","gte","requiredAmount","quoteBalance","hasAvailableBalance","lockBalance","client_order_id","baseBalance","newPrice","newQuantity","currentFilled","currentAvgPrice","newPriceFloat","newQuantityFloat","totalValue","totalQuantity","priceChange","priceChangePercent","price_change_24h","price_change_percent_24h","updated_at","EX","cancelOrder","orderId","userId","reason","unlockOrderBalance","cancelled_at","findByPk","stopOrders","has","queue","length","shift","delete","lockedAmount","success","getOrderBook","depth","bids","asks","Promise","all","attributes","map","timestamp","toISOString","orderMatchingEngine","module","exports"],"sources":["orderMatchingEngine.js"],"sourcesContent":["const { Op } = require('sequelize');\nconst sequelize = require('../config/database');\nconst Order = require('../models/Order');\nconst Trade = require('../models/Trade');\nconst Market = require('../models/Market');\nconst Balance = require('../models/Balance');\nconst { client: redis } = require('../config/redis');\nconst EventEmitter = require('events');\n\n/**\n * Order Matching Engine\n * Implementasi algoritma matching dengan price-time priority\n * Mendukung berbagai order types: market, limit, stop, stop-limit\n */\nclass OrderMatchingEngine extends EventEmitter {\n  constructor() {\n    super();\n    this.isProcessing = new Map(); // Track processing status per market\n    this.orderQueues = new Map(); // In-memory order queues per market\n    this.lastPrices = new Map(); // Last trade prices per market\n    \n    // Initialize event listeners\n    this.setupEventListeners();\n  }\n  \n  setupEventListeners() {\n    // Listen for new orders\n    this.on('newOrder', this.handleNewOrder.bind(this));\n    \n    // Listen for order cancellations\n    this.on('cancelOrder', this.handleCancelOrder.bind(this));\n    \n    // Listen for market data updates\n    this.on('priceUpdate', this.handlePriceUpdate.bind(this));\n  }\n  \n  /**\n   * Process a new order\n   */\n  async processOrder(orderData) {\n    const transaction = await sequelize.transaction();\n    \n    try {\n      // Validate market\n      const market = await Market.findOne({\n        where: { \n          symbol: orderData.market_symbol,\n          is_active: true\n        }\n      });\n      \n      if (!market) {\n        throw new Error('Market not found or inactive');\n      }\n      \n      // Validate and lock user balance\n      await this.validateAndLockBalance(orderData, market, transaction);\n      \n      // Create order\n      const order = await Order.create({\n        ...orderData,\n        market_id: market.id,\n        status: 'open'\n      }, { transaction });\n      \n      await transaction.commit();\n      \n      // Emit new order event for matching\n      this.emit('newOrder', { order, market });\n      \n      return order;\n      \n    } catch (error) {\n      await transaction.rollback();\n      throw error;\n    }\n  }\n  \n  /**\n   * Handle new order for matching\n   */\n  async handleNewOrder({ order, market }) {\n    const marketSymbol = market.symbol;\n    \n    // Prevent concurrent processing for the same market\n    if (this.isProcessing.get(marketSymbol)) {\n      // Queue the order for later processing\n      await this.queueOrder(order, market);\n      return;\n    }\n    \n    this.isProcessing.set(marketSymbol, true);\n    \n    try {\n      await this.matchOrder(order, market);\n    } catch (error) {\n      console.error(`Error matching order ${order.id}:`, error);\n      // Update order status to failed\n      await order.update({ \n        status: 'failed',\n        notes: `Matching failed: ${error.message}`\n      });\n    } finally {\n      this.isProcessing.set(marketSymbol, false);\n      \n      // Process queued orders\n      await this.processQueuedOrders(marketSymbol);\n    }\n  }\n  \n  /**\n   * Main order matching logic\n   */\n  async matchOrder(order, market) {\n    // Handle different order types\n    switch (order.type) {\n      case 'market':\n        await this.matchMarketOrder(order, market);\n        break;\n      case 'limit':\n        await this.matchLimitOrder(order, market);\n        break;\n      case 'stop':\n        await this.handleStopOrder(order, market);\n        break;\n      case 'stop_limit':\n        await this.handleStopLimitOrder(order, market);\n        break;\n      default:\n        throw new Error(`Unsupported order type: ${order.type}`);\n    }\n  }\n  \n  /**\n   * Match market order\n   */\n  async matchMarketOrder(order, market) {\n    const oppositeSide = order.side === 'buy' ? 'sell' : 'buy';\n    \n    // Get opposite orders sorted by price-time priority\n    const oppositeOrders = await this.getOppositeOrders(market.id, oppositeSide, order.side);\n    \n    let remainingQuantity = parseFloat(order.quantity_remaining);\n    const trades = [];\n    \n    for (const oppositeOrder of oppositeOrders) {\n      if (remainingQuantity <= 0) break;\n      \n      const tradeQuantity = Math.min(\n        remainingQuantity,\n        parseFloat(oppositeOrder.quantity_remaining)\n      );\n      \n      const tradePrice = parseFloat(oppositeOrder.price);\n      \n      // Execute trade\n      const trade = await this.executeTrade(\n        order,\n        oppositeOrder,\n        tradePrice,\n        tradeQuantity,\n        market\n      );\n      \n      trades.push(trade);\n      remainingQuantity -= tradeQuantity;\n      \n      // Update last price\n      this.lastPrices.set(market.symbol, tradePrice);\n      await this.updateMarketPrice(market, tradePrice);\n    }\n    \n    // Update order status\n    if (remainingQuantity <= 0) {\n      await order.update({ \n        status: 'filled',\n        quantity_remaining: 0,\n        filled_at: new Date()\n      });\n    } else {\n      // Market order couldn't be fully filled\n      await order.update({ \n        status: 'partially_filled',\n        quantity_remaining: remainingQuantity\n      });\n      \n      // For market orders, cancel remaining quantity\n      await this.cancelRemainingQuantity(order, 'insufficient_liquidity');\n    }\n    \n    // Emit trade events\n    for (const trade of trades) {\n      this.emit('trade', { trade, market });\n    }\n  }\n  \n  /**\n   * Match limit order\n   */\n  async matchLimitOrder(order, market) {\n    const oppositeSide = order.side === 'buy' ? 'sell' : 'buy';\n    const orderPrice = parseFloat(order.price);\n    \n    // Get matching opposite orders\n    const oppositeOrders = await this.getMatchingOrders(\n      market.id, \n      oppositeSide, \n      orderPrice, \n      order.side\n    );\n    \n    let remainingQuantity = parseFloat(order.quantity_remaining);\n    const trades = [];\n    \n    for (const oppositeOrder of oppositeOrders) {\n      if (remainingQuantity <= 0) break;\n      \n      const tradeQuantity = Math.min(\n        remainingQuantity,\n        parseFloat(oppositeOrder.quantity_remaining)\n      );\n      \n      const tradePrice = parseFloat(oppositeOrder.price);\n      \n      // Execute trade\n      const trade = await this.executeTrade(\n        order,\n        oppositeOrder,\n        tradePrice,\n        tradeQuantity,\n        market\n      );\n      \n      trades.push(trade);\n      remainingQuantity -= tradeQuantity;\n      \n      // Update last price\n      this.lastPrices.set(market.symbol, tradePrice);\n      await this.updateMarketPrice(market, tradePrice);\n    }\n    \n    // Update order status\n    if (remainingQuantity <= 0) {\n      await order.update({ \n        status: 'filled',\n        quantity_remaining: 0,\n        filled_at: new Date()\n      });\n    } else if (remainingQuantity < parseFloat(order.quantity)) {\n      await order.update({ \n        status: 'partially_filled',\n        quantity_remaining: remainingQuantity\n      });\n    }\n    // If no matches, order remains 'open'\n    \n    // Emit trade events\n    for (const trade of trades) {\n      this.emit('trade', { trade, market });\n    }\n  }\n  \n  /**\n   * Handle stop order\n   */\n  async handleStopOrder(order, market) {\n    const currentPrice = this.lastPrices.get(market.symbol) || parseFloat(market.last_price);\n    const stopPrice = parseFloat(order.stop_price);\n    \n    let shouldTrigger = false;\n    \n    if (order.side === 'buy' && currentPrice >= stopPrice) {\n      shouldTrigger = true;\n    } else if (order.side === 'sell' && currentPrice <= stopPrice) {\n      shouldTrigger = true;\n    }\n    \n    if (shouldTrigger) {\n      // Convert to market order\n      await order.update({ \n        type: 'market',\n        status: 'open',\n        notes: `Stop order triggered at price ${currentPrice}`\n      });\n      \n      // Process as market order\n      await this.matchMarketOrder(order, market);\n    }\n    // If not triggered, order remains in 'pending' status\n  }\n  \n  /**\n   * Handle stop-limit order\n   */\n  async handleStopLimitOrder(order, market) {\n    const currentPrice = this.lastPrices.get(market.symbol) || parseFloat(market.last_price);\n    const stopPrice = parseFloat(order.stop_price);\n    \n    let shouldTrigger = false;\n    \n    if (order.side === 'buy' && currentPrice >= stopPrice) {\n      shouldTrigger = true;\n    } else if (order.side === 'sell' && currentPrice <= stopPrice) {\n      shouldTrigger = true;\n    }\n    \n    if (shouldTrigger) {\n      // Convert to limit order\n      await order.update({ \n        type: 'limit',\n        status: 'open',\n        notes: `Stop-limit order triggered at price ${currentPrice}`\n      });\n      \n      // Process as limit order\n      await this.matchLimitOrder(order, market);\n    }\n    // If not triggered, order remains in 'pending' status\n  }\n  \n  /**\n   * Execute a trade between two orders\n   */\n  async executeTrade(takerOrder, makerOrder, price, quantity, market) {\n    const transaction = await sequelize.transaction();\n    \n    try {\n      // Calculate trade value and fees\n      const tradeValue = parseFloat(price) * parseFloat(quantity);\n      const makerFee = tradeValue * parseFloat(market.maker_fee);\n      const takerFee = tradeValue * parseFloat(market.taker_fee);\n      \n      // Create trade record\n      const trade = await Trade.create({\n        market_id: market.id,\n        maker_user_id: makerOrder.user_id,\n        taker_user_id: takerOrder.user_id,\n        maker_order_id: makerOrder.id,\n        taker_order_id: takerOrder.id,\n        side: takerOrder.side,\n        price,\n        quantity,\n        value: tradeValue,\n        maker_fee: makerFee,\n        taker_fee: takerFee,\n        trade_type: 'spot',\n        status: 'settled'\n      }, { transaction });\n      \n      // Update order quantities\n      const makerRemaining = parseFloat(makerOrder.quantity_remaining) - parseFloat(quantity);\n      const takerRemaining = parseFloat(takerOrder.quantity_remaining) - parseFloat(quantity);\n      \n      await makerOrder.update({\n        quantity_filled: parseFloat(makerOrder.quantity_filled) + parseFloat(quantity),\n        quantity_remaining: makerRemaining,\n        status: makerRemaining <= 0 ? 'filled' : 'partially_filled',\n        filled_at: makerRemaining <= 0 ? new Date() : makerOrder.filled_at\n      }, { transaction });\n      \n      await takerOrder.update({\n        quantity_filled: parseFloat(takerOrder.quantity_filled) + parseFloat(quantity),\n        quantity_remaining: takerRemaining,\n        average_price: this.calculateAveragePrice(takerOrder, price, quantity)\n      }, { transaction });\n      \n      // Update user balances\n      await this.updateBalancesAfterTrade(\n        takerOrder, \n        makerOrder, \n        trade, \n        market, \n        transaction\n      );\n      \n      await transaction.commit();\n      \n      return trade;\n      \n    } catch (error) {\n      await transaction.rollback();\n      throw error;\n    }\n  }\n  \n  /**\n   * Update user balances after trade execution\n   */\n  async updateBalancesAfterTrade(takerOrder, makerOrder, trade, market, transaction) {\n    const [baseCurrency, quoteCurrency] = market.symbol.split('/');\n    const tradeQuantity = parseFloat(trade.quantity);\n    const tradeValue = parseFloat(trade.value);\n    const makerFee = parseFloat(trade.maker_fee);\n    const takerFee = parseFloat(trade.taker_fee);\n    \n    if (takerOrder.side === 'buy') {\n      // Taker is buying (base currency), Maker is selling\n      \n      // Taker: Add base currency, deduct quote currency (already locked)\n      const takerBaseBalance = await Balance.getUserBalance(takerOrder.user_id, baseCurrency);\n      const takerQuoteBalance = await Balance.getUserBalance(takerOrder.user_id, quoteCurrency);\n      \n      await takerBaseBalance.addBalance(tradeQuantity, 'available');\n      await takerQuoteBalance.unlockBalance(tradeValue + takerFee);\n      \n      // Maker: Deduct base currency (already locked), add quote currency\n      const makerBaseBalance = await Balance.getUserBalance(makerOrder.user_id, baseCurrency);\n      const makerQuoteBalance = await Balance.getUserBalance(makerOrder.user_id, quoteCurrency);\n      \n      await makerBaseBalance.unlockBalance(tradeQuantity);\n      await makerQuoteBalance.addBalance(tradeValue - makerFee, 'available');\n      \n    } else {\n      // Taker is selling (base currency), Maker is buying\n      \n      // Taker: Deduct base currency (already locked), add quote currency\n      const takerBaseBalance = await Balance.getUserBalance(takerOrder.user_id, baseCurrency);\n      const takerQuoteBalance = await Balance.getUserBalance(takerOrder.user_id, quoteCurrency);\n      \n      await takerBaseBalance.unlockBalance(tradeQuantity);\n      await takerQuoteBalance.addBalance(tradeValue - takerFee, 'available');\n      \n      // Maker: Add base currency, deduct quote currency (already locked)\n      const makerBaseBalance = await Balance.getUserBalance(makerOrder.user_id, baseCurrency);\n      const makerQuoteBalance = await Balance.getUserBalance(makerOrder.user_id, quoteCurrency);\n      \n      await makerBaseBalance.addBalance(tradeQuantity, 'available');\n      await makerQuoteBalance.unlockBalance(tradeValue + makerFee);\n    }\n  }\n  \n  /**\n   * Get opposite orders for market order matching\n   */\n  async getOppositeOrders(marketId, side, originalSide) {\n    const orderBy = side === 'sell' \n      ? [['price', 'ASC'], ['created_at', 'ASC']] // Best ask first\n      : [['price', 'DESC'], ['created_at', 'ASC']]; // Best bid first\n    \n    return await Order.findAll({\n      where: {\n        market_id: marketId,\n        side,\n        status: 'open',\n        quantity_remaining: { [Op.gt]: 0 }\n      },\n      order: orderBy,\n      limit: 100 // Limit for performance\n    });\n  }\n  \n  /**\n   * Get matching orders for limit order\n   */\n  async getMatchingOrders(marketId, side, price, originalSide) {\n    let priceCondition;\n    \n    if (originalSide === 'buy') {\n      // Buy order matches with sell orders at or below the buy price\n      priceCondition = { [Op.lte]: price };\n    } else {\n      // Sell order matches with buy orders at or above the sell price\n      priceCondition = { [Op.gte]: price };\n    }\n    \n    const orderBy = side === 'sell' \n      ? [['price', 'ASC'], ['created_at', 'ASC']] // Best ask first\n      : [['price', 'DESC'], ['created_at', 'ASC']]; // Best bid first\n    \n    return await Order.findAll({\n      where: {\n        market_id: marketId,\n        side,\n        status: 'open',\n        price: priceCondition,\n        quantity_remaining: { [Op.gt]: 0 }\n      },\n      order: orderBy,\n      limit: 100\n    });\n  }\n  \n  /**\n   * Validate and lock user balance for order\n   */\n  async validateAndLockBalance(orderData, market, transaction) {\n    const [baseCurrency, quoteCurrency] = market.symbol.split('/');\n    const quantity = parseFloat(orderData.quantity);\n    const price = parseFloat(orderData.price || market.last_price);\n    \n    if (orderData.side === 'buy') {\n      // For buy orders, lock quote currency\n      const requiredAmount = quantity * price;\n      const quoteBalance = await Balance.getUserBalance(orderData.user_id, quoteCurrency);\n      \n      if (!quoteBalance || !quoteBalance.hasAvailableBalance(requiredAmount)) {\n        throw new Error(`Insufficient ${quoteCurrency} balance`);\n      }\n      \n      await quoteBalance.lockBalance(requiredAmount, `Order ${orderData.client_order_id || 'N/A'}`);\n      \n    } else {\n      // For sell orders, lock base currency\n      const baseBalance = await Balance.getUserBalance(orderData.user_id, baseCurrency);\n      \n      if (!baseBalance || !baseBalance.hasAvailableBalance(quantity)) {\n        throw new Error(`Insufficient ${baseCurrency} balance`);\n      }\n      \n      await baseBalance.lockBalance(quantity, `Order ${orderData.client_order_id || 'N/A'}`);\n    }\n  }\n  \n  /**\n   * Calculate average price for partially filled orders\n   */\n  calculateAveragePrice(order, newPrice, newQuantity) {\n    const currentFilled = parseFloat(order.quantity_filled);\n    const currentAvgPrice = parseFloat(order.average_price || 0);\n    const newPriceFloat = parseFloat(newPrice);\n    const newQuantityFloat = parseFloat(newQuantity);\n    \n    if (currentFilled === 0) {\n      return newPriceFloat;\n    }\n    \n    const totalValue = (currentFilled * currentAvgPrice) + (newQuantityFloat * newPriceFloat);\n    const totalQuantity = currentFilled + newQuantityFloat;\n    \n    return totalValue / totalQuantity;\n  }\n  \n  /**\n   * Update market last price and statistics\n   */\n  async updateMarketPrice(market, newPrice) {\n    const priceChange = parseFloat(newPrice) - parseFloat(market.last_price);\n    const priceChangePercent = (priceChange / parseFloat(market.last_price)) * 100;\n    \n    await market.update({\n      last_price: newPrice,\n      price_change_24h: priceChange,\n      price_change_percent_24h: priceChangePercent,\n      updated_at: new Date()\n    });\n    \n    // Update Redis cache\n    await redis.set(`market:${market.symbol}:price`, newPrice, { EX: 60 });\n  }\n  \n  /**\n   * Cancel order\n   */\n  async cancelOrder(orderId, userId, reason = 'user_cancelled') {\n    const transaction = await sequelize.transaction();\n    \n    try {\n      const order = await Order.findOne({\n        where: {\n          id: orderId,\n          user_id: userId,\n          status: ['open', 'partially_filled']\n        }\n      });\n      \n      if (!order) {\n        throw new Error('Order not found or cannot be cancelled');\n      }\n      \n      // Unlock remaining balance\n      await this.unlockOrderBalance(order, transaction);\n      \n      // Update order status\n      await order.update({\n        status: 'cancelled',\n        cancelled_at: new Date(),\n        notes: reason\n      }, { transaction });\n      \n      await transaction.commit();\n      \n      // Emit cancel event\n      this.emit('orderCancelled', { order, reason });\n      \n      return order;\n      \n    } catch (error) {\n      await transaction.rollback();\n      throw error;\n    }\n  }\n  \n  /**\n   * Unlock balance when cancelling order\n   */\n  async unlockOrderBalance(order, transaction) {\n    const market = await Market.findByPk(order.market_id);\n    const [baseCurrency, quoteCurrency] = market.symbol.split('/');\n    const remainingQuantity = parseFloat(order.quantity_remaining);\n    \n    if (order.side === 'buy') {\n      // Unlock quote currency\n      const requiredAmount = remainingQuantity * parseFloat(order.price);\n      const quoteBalance = await Balance.getUserBalance(order.user_id, quoteCurrency);\n      await quoteBalance.unlockBalance(requiredAmount);\n    } else {\n      // Unlock base currency\n      const baseBalance = await Balance.getUserBalance(order.user_id, baseCurrency);\n      await baseBalance.unlockBalance(remainingQuantity);\n    }\n  }\n  \n  /**\n   * Handle price updates for stop orders\n   */\n  async handlePriceUpdate({ market, price }) {\n    this.lastPrices.set(market.symbol, price);\n    \n    // Check for stop orders that should be triggered\n    const stopOrders = await Order.findAll({\n      where: {\n        market_id: market.id,\n        type: ['stop', 'stop_limit'],\n        status: 'pending'\n      }\n    });\n    \n    for (const order of stopOrders) {\n      const stopPrice = parseFloat(order.stop_price);\n      let shouldTrigger = false;\n      \n      if (order.side === 'buy' && price >= stopPrice) {\n        shouldTrigger = true;\n      } else if (order.side === 'sell' && price <= stopPrice) {\n        shouldTrigger = true;\n      }\n      \n      if (shouldTrigger) {\n        this.emit('newOrder', { order, market });\n      }\n    }\n  }\n  \n  /**\n   * Queue order for later processing\n   */\n  async queueOrder(order, market) {\n    const marketSymbol = market.symbol;\n    \n    if (!this.orderQueues.has(marketSymbol)) {\n      this.orderQueues.set(marketSymbol, []);\n    }\n    \n    this.orderQueues.get(marketSymbol).push({ order, market });\n  }\n  \n  /**\n   * Process queued orders\n   */\n  async processQueuedOrders(marketSymbol) {\n    const queue = this.orderQueues.get(marketSymbol);\n    \n    if (!queue || queue.length === 0) {\n      return;\n    }\n    \n    // Process one order from queue\n    const { order, market } = queue.shift();\n    \n    if (queue.length === 0) {\n      this.orderQueues.delete(marketSymbol);\n    }\n    \n    // Process the queued order\n    this.emit('newOrder', { order, market });\n  }\n  \n  /**\n   * Cancel remaining quantity of partially filled order\n   */\n  async cancelRemainingQuantity(order, reason) {\n    await order.update({\n      status: 'cancelled',\n      cancelled_at: new Date(),\n      notes: `Partially filled, remaining cancelled: ${reason}`\n    });\n    \n    // Unlock remaining balance\n    const transaction = await sequelize.transaction();\n    try {\n      await this.unlockOrderBalance(order, transaction);\n      await transaction.commit();\n    } catch (error) {\n      await transaction.rollback();\n      throw error;\n    }\n  }\n  \n  /**\n   * Handle order cancellation\n   */\n  async handleCancelOrder(orderData) {\n    try {\n      const { orderId, userId } = orderData;\n      \n      // Find the order\n      const order = await Order.findOne({\n        where: {\n          id: orderId,\n          user_id: userId,\n          status: 'open'\n        }\n      });\n      \n      if (!order) {\n        throw new Error('Order not found or already processed');\n      }\n      \n      // Get market information\n      const market = await Market.findByPk(order.market_id);\n      if (!market) {\n        throw new Error('Market not found');\n      }\n      \n      const [baseCurrency, quoteCurrency] = market.symbol.split('/');\n      const remainingQuantity = parseFloat(order.quantity_remaining);\n      \n      // Unlock the locked balance\n      if (order.side === 'buy') {\n        // Unlock quote currency for buy orders\n        const price = parseFloat(order.price || market.last_price);\n        const lockedAmount = remainingQuantity * price;\n        const quoteBalance = await Balance.getUserBalance(order.user_id, quoteCurrency);\n        await quoteBalance.unlockBalance(lockedAmount);\n      } else {\n        // Unlock base currency for sell orders\n        const baseBalance = await Balance.getUserBalance(order.user_id, baseCurrency);\n        await baseBalance.unlockBalance(remainingQuantity);\n      }\n      \n      // Update order status\n      await order.update({\n        status: 'cancelled',\n        cancelled_at: new Date()\n      });\n      \n      // Emit order cancelled event\n      this.emit('orderCancelled', {\n        orderId: order.id,\n        userId: order.user_id,\n        marketSymbol: market.symbol,\n        side: order.side,\n        quantity: remainingQuantity,\n        price: order.price\n      });\n      \n      return {\n        success: true,\n        message: 'Order cancelled successfully',\n        order: {\n          id: order.id,\n          status: order.status,\n          cancelled_at: order.cancelled_at\n        }\n      };\n      \n    } catch (error) {\n      console.error('Error cancelling order:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Cancel order by ID\n   */\n  async cancelOrder(orderId, userId) {\n    return this.handleCancelOrder({ orderId, userId });\n  }\n\n  /**\n   * Get order book for a market\n   */\n  async getOrderBook(marketSymbol, depth = 20) {\n    const market = await Market.findOne({ where: { symbol: marketSymbol } });\n    \n    if (!market) {\n      throw new Error('Market not found');\n    }\n    \n    const [bids, asks] = await Promise.all([\n      // Buy orders (bids) - highest price first\n      Order.findAll({\n        where: {\n          market_id: market.id,\n          side: 'buy',\n          status: 'open',\n          quantity_remaining: { [Op.gt]: 0 }\n        },\n        order: [['price', 'DESC'], ['created_at', 'ASC']],\n        limit: depth,\n        attributes: ['price', 'quantity_remaining']\n      }),\n      \n      // Sell orders (asks) - lowest price first\n      Order.findAll({\n        where: {\n          market_id: market.id,\n          side: 'sell',\n          status: 'open',\n          quantity_remaining: { [Op.gt]: 0 }\n        },\n        order: [['price', 'ASC'], ['created_at', 'ASC']],\n        limit: depth,\n        attributes: ['price', 'quantity_remaining']\n      })\n    ]);\n    \n    return {\n      symbol: marketSymbol,\n      bids: bids.map(order => [order.price, order.quantity_remaining]),\n      asks: asks.map(order => [order.price, order.quantity_remaining]),\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\n// Create singleton instance\nconst orderMatchingEngine = new OrderMatchingEngine();\n\nmodule.exports = orderMatchingEngine;"],"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","ignoreList":[]}