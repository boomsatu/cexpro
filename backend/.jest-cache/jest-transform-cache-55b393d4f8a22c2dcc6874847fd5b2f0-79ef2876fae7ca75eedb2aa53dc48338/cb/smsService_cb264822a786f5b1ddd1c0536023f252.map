{"version":3,"names":["cov_2pgwu0abbo","actualCoverage","twilio","s","require","crypto","cache","twilioConfig","accountSid","process","env","TWILIO_ACCOUNT_SID","authToken","TWILIO_AUTH_TOKEN","serviceSid","TWILIO_SERVICE_SID","fromNumber","b","TWILIO_FROM_NUMBER","client","startsWith","length","console","warn","SMSService","constructor","f","isEnabled","generateVerificationCode","Math","floor","random","toString","sendVerificationCode","phoneNumber","userId","code","cacheKey","set","attempts","createdAt","Date","success","messageSid","NODE_ENV","undefined","message","messages","create","body","from","to","log","sid","error","Error","verifyCode","storedData","get","del","attemptsLeft","sendNotification","sms","sendSecurityAlert","alertType","details","location","toLocaleString","amount","currency","sendTradingNotification","notificationType","side","symbol","price","healthCheck","status","service","account","api","accounts","fetch","accountStatus","smsService","module","exports"],"sources":["smsService.js"],"sourcesContent":["const twilio = require('twilio');\nconst crypto = require('crypto');\nconst { cache } = require('../config/redis');\n\n// Twilio configuration\nconst twilioConfig = {\n  accountSid: process.env.TWILIO_ACCOUNT_SID,\n  authToken: process.env.TWILIO_AUTH_TOKEN,\n  serviceSid: process.env.TWILIO_SERVICE_SID,\n  fromNumber: process.env.TWILIO_FROM_NUMBER || '+1234567890'\n};\n\n// Initialize Twilio client (only if credentials are available)\nlet client = null;\nif (twilioConfig.accountSid && twilioConfig.authToken && \n    twilioConfig.accountSid.startsWith('AC') && twilioConfig.authToken.length > 10) {\n  client = twilio(twilioConfig.accountSid, twilioConfig.authToken);\n} else {\n  console.warn('Twilio credentials not configured. SMS service will be disabled.');\n}\n\n// SMS Service class\nclass SMSService {\n  constructor() {\n    this.client = client;\n    this.fromNumber = twilioConfig.fromNumber;\n    this.isEnabled = !!client;\n  }\n\n  // Generate SMS verification code\n  generateVerificationCode() {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  // Send SMS verification code\n  async sendVerificationCode(phoneNumber, userId) {\n    if (!this.isEnabled) {\n      console.warn('SMS service is disabled. Returning mock verification code.');\n      const code = this.generateVerificationCode();\n      const cacheKey = `sms_verification:${userId}`;\n      \n      await cache.set(cacheKey, {\n        code,\n        phoneNumber,\n        attempts: 0,\n        createdAt: new Date()\n      }, 600);\n      \n      return {\n        success: true,\n        messageSid: 'mock_message_id',\n        code: process.env.NODE_ENV === 'development' ? code : undefined\n      };\n    }\n    \n    try {\n      const code = this.generateVerificationCode();\n      const cacheKey = `sms_verification:${userId}`;\n      \n      // Store code in cache with 10 minutes expiry\n      await cache.set(cacheKey, {\n        code,\n        phoneNumber,\n        attempts: 0,\n        createdAt: new Date()\n      }, 600); // 10 minutes\n\n      // Send SMS\n      const message = await this.client.messages.create({\n        body: `Your CEX verification code is: ${code}. This code will expire in 10 minutes.`,\n        from: this.fromNumber,\n        to: phoneNumber\n      });\n\n      console.log(`SMS sent to ${phoneNumber}: ${message.sid}`);\n      return {\n        success: true,\n        messageSid: message.sid,\n        code: process.env.NODE_ENV === 'development' ? code : undefined\n      };\n    } catch (error) {\n      console.error('SMS sending error:', error);\n      throw new Error('Failed to send SMS verification code');\n    }\n  }\n\n  // Verify SMS code\n  async verifyCode(userId, code) {\n    try {\n      const cacheKey = `sms_verification:${userId}`;\n      const storedData = await cache.get(cacheKey);\n\n      if (!storedData) {\n        return {\n          success: false,\n          error: 'Verification code expired or not found'\n        };\n      }\n\n      // Check attempts\n      if (storedData.attempts >= 3) {\n        await cache.del(cacheKey);\n        return {\n          success: false,\n          error: 'Too many failed attempts. Please request a new code.'\n        };\n      }\n\n      // Verify code\n      if (storedData.code !== code) {\n        // Increment attempts\n        storedData.attempts += 1;\n        await cache.set(cacheKey, storedData, 600);\n        \n        return {\n          success: false,\n          error: 'Invalid verification code',\n          attemptsLeft: 3 - storedData.attempts\n        };\n      }\n\n      // Code is valid, remove from cache\n      await cache.del(cacheKey);\n      \n      return {\n        success: true,\n        phoneNumber: storedData.phoneNumber\n      };\n    } catch (error) {\n      console.error('SMS verification error:', error);\n      throw new Error('Failed to verify SMS code');\n    }\n  }\n\n  // Send SMS notification\n  async sendNotification(phoneNumber, message) {\n    if (!this.isEnabled) {\n      console.warn('SMS service is disabled. Notification not sent:', message);\n      return {\n        success: true,\n        messageSid: 'mock_notification_id'\n      };\n    }\n    \n    try {\n      const sms = await this.client.messages.create({\n        body: message,\n        from: this.fromNumber,\n        to: phoneNumber\n      });\n\n      console.log(`SMS notification sent to ${phoneNumber}: ${sms.sid}`);\n      return {\n        success: true,\n        messageSid: sms.sid\n      };\n    } catch (error) {\n      console.error('SMS notification error:', error);\n      throw new Error('Failed to send SMS notification');\n    }\n  }\n\n  // Send security alert\n  async sendSecurityAlert(phoneNumber, alertType, details = {}) {\n    try {\n      let message = '';\n      \n      switch (alertType) {\n        case 'login':\n          message = `Security Alert: New login detected on your CEX account from ${details.location || 'unknown location'} at ${new Date().toLocaleString()}.`;\n          break;\n        case 'withdrawal':\n          message = `Security Alert: Withdrawal request of ${details.amount || 'unknown amount'} ${details.currency || ''} initiated on your CEX account.`;\n          break;\n        case 'password_change':\n          message = 'Security Alert: Your CEX account password has been changed. If this was not you, please contact support immediately.';\n          break;\n        case 'suspicious_activity':\n          message = 'Security Alert: Suspicious activity detected on your CEX account. Please review your account and contact support if needed.';\n          break;\n        default:\n          message = 'Security Alert: Important activity detected on your CEX account. Please check your account for details.';\n      }\n\n      return await this.sendNotification(phoneNumber, message);\n    } catch (error) {\n      console.error('Security alert SMS error:', error);\n      throw new Error('Failed to send security alert SMS');\n    }\n  }\n\n  // Send trading notification\n  async sendTradingNotification(phoneNumber, notificationType, details = {}) {\n    try {\n      let message = '';\n      \n      switch (notificationType) {\n        case 'order_filled':\n          message = `Trade Alert: Your ${details.side || ''} order for ${details.amount || ''} ${details.symbol || ''} has been filled at ${details.price || ''}.`;\n          break;\n        case 'order_cancelled':\n          message = `Trade Alert: Your ${details.side || ''} order for ${details.amount || ''} ${details.symbol || ''} has been cancelled.`;\n          break;\n        case 'price_alert':\n          message = `Price Alert: ${details.symbol || ''} has reached your target price of ${details.price || ''}.`;\n          break;\n        case 'margin_call':\n          message = `Margin Call: Your margin position requires additional funds. Please add funds or close positions to avoid liquidation.`;\n          break;\n        default:\n          message = 'Trading Alert: Important trading activity on your CEX account.';\n      }\n\n      return await this.sendNotification(phoneNumber, message);\n    } catch (error) {\n      console.error('Trading notification SMS error:', error);\n      throw new Error('Failed to send trading notification SMS');\n    }\n  }\n\n  // Check SMS service health\n  async healthCheck() {\n    if (!this.isEnabled) {\n      return {\n        status: 'disabled',\n        service: 'SMS (Twilio)',\n        message: 'Twilio credentials not configured'\n      };\n    }\n    \n    try {\n      // Try to get account info to verify connection\n      const account = await this.client.api.accounts(twilioConfig.accountSid).fetch();\n      \n      return {\n        status: 'healthy',\n        service: 'SMS (Twilio)',\n        accountSid: account.sid,\n        accountStatus: account.status\n      };\n    } catch (error) {\n      console.error('SMS service health check failed:', error);\n      return {\n        status: 'unhealthy',\n        service: 'SMS (Twilio)',\n        error: error.message\n      };\n    }\n  }\n}\n\n// Create and export SMS service instance\nconst smsService = new SMSService();\n\nmodule.exports = {\n  smsService,\n  SMSService\n};"],"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","ignoreList":[]}