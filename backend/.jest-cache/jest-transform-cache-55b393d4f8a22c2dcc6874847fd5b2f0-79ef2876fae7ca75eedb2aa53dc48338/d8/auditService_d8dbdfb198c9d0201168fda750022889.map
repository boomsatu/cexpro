{"version":3,"names":["cov_1fy2cio02l","actualCoverage","db","s","require","cache","crypto","geoip","UAParser","LOG_LEVELS","INFO","WARNING","ERROR","CRITICAL","EVENT_TYPES","USER_REGISTER","USER_LOGIN","USER_LOGOUT","USER_LOGIN_FAILED","PASSWORD_CHANGE","PASSWORD_RESET_REQUEST","PASSWORD_RESET_COMPLETE","EMAIL_VERIFICATION","TWO_FA_ENABLED","TWO_FA_DISABLED","TWO_FA_VERIFIED","TWO_FA_FAILED","BACKUP_CODE_USED","ACCOUNT_LOCKED","ACCOUNT_UNLOCKED","ACCOUNT_SUSPENDED","ACCOUNT_REACTIVATED","PROFILE_UPDATED","KYC_SUBMITTED","KYC_APPROVED","KYC_REJECTED","KYC_DOCUMENT_UPLOADED","ORDER_PLACED","ORDER_CANCELLED","ORDER_FILLED","TRADE_EXECUTED","DEPOSIT_INITIATED","DEPOSIT_CONFIRMED","WITHDRAWAL_REQUESTED","WITHDRAWAL_APPROVED","WITHDRAWAL_REJECTED","WITHDRAWAL_COMPLETED","WALLET_CREATED","ADDRESS_GENERATED","SUSPICIOUS_ACTIVITY","IP_BLOCKED","RATE_LIMIT_EXCEEDED","API_KEY_CREATED","API_KEY_DELETED","API_KEY_USED","ADMIN_LOGIN","ADMIN_ACTION","USER_IMPERSONATION","SYSTEM_CONFIG_CHANGED","SYSTEM_ERROR","DATABASE_ERROR","EXTERNAL_API_ERROR","MAINTENANCE_MODE","RISK_LEVELS","LOW","MEDIUM","HIGH","createAuditLog","logData","f","userId","eventType","level","b","riskLevel","description","metadata","ipAddress","userAgent","sessionId","apiKeyId","adminUserId","logId","randomUUID","parser","deviceInfo","browser","getBrowser","os","getOS","device","getDevice","location","lookup","fingerprint","createHash","update","JSON","stringify","digest","duplicateKey","isDuplicate","exists","console","log","setex","auditLogData","id","user_id","event_type","risk_level","country","region","city","timezone","ip_address","user_agent","session_id","api_key_id","admin_user_id","created_at","Date","query","values","result","createdLog","rows","userLogsKey","lpush","ltrim","expire","alertHighRiskEvent","notifyCriticalEvent","error","getAuditLogs","filters","startDate","endDate","limit","offset","sortBy","sortOrder","paramCount","push","Array","isArray","logs","map","parse","getUserActivitySummary","days","setDate","getDate","summary","totalEvents","byLevel","info","warning","critical","byRisk","low","medium","high","byEventType","recentActivity","forEach","row","parseInt","count","detectSuspiciousActivity","last24Hours","setHours","getHours","recentLogs","suspiciousPatterns","failedLogins","filter","length","type","severity","uniqueIPs","Set","Boolean","size","rapidActions","index","prevLog","timeDiff","unusualTimeActions","hour","auditLog","alertKey","alreadyAlerted","warn","timestamp","cleanupOldLogs","retentionDays","cutoffDate","rowCount","exportAuditData","format","headers","csvRows","join","replace","logUserLogin","success","logUserLogout","logPasswordChange","logSuspiciousActivity","activityType","module","exports"],"sources":["auditService.js"],"sourcesContent":["const { db } = require('../config/database');\r\nconst { cache } = require('../config/redis');\r\nconst crypto = require('crypto');\r\nconst geoip = require('geoip-lite');\r\nconst UAParser = require('ua-parser-js');\r\n\r\n// Audit log levels\r\nconst LOG_LEVELS = {\r\n  INFO: 'info',\r\n  WARNING: 'warning',\r\n  ERROR: 'error',\r\n  CRITICAL: 'critical'\r\n};\r\n\r\n// Audit event types\r\nconst EVENT_TYPES = {\r\n  // Authentication events\r\n  USER_REGISTER: 'user_register',\r\n  USER_LOGIN: 'user_login',\r\n  USER_LOGOUT: 'user_logout',\r\n  USER_LOGIN_FAILED: 'user_login_failed',\r\n  PASSWORD_CHANGE: 'password_change',\r\n  PASSWORD_RESET_REQUEST: 'password_reset_request',\r\n  PASSWORD_RESET_COMPLETE: 'password_reset_complete',\r\n  EMAIL_VERIFICATION: 'email_verification',\r\n  \r\n  // 2FA events\r\n  TWO_FA_ENABLED: '2fa_enabled',\r\n  TWO_FA_DISABLED: '2fa_disabled',\r\n  TWO_FA_VERIFIED: '2fa_verified',\r\n  TWO_FA_FAILED: '2fa_failed',\r\n  BACKUP_CODE_USED: 'backup_code_used',\r\n  \r\n  // Account events\r\n  ACCOUNT_LOCKED: 'account_locked',\r\n  ACCOUNT_UNLOCKED: 'account_unlocked',\r\n  ACCOUNT_SUSPENDED: 'account_suspended',\r\n  ACCOUNT_REACTIVATED: 'account_reactivated',\r\n  PROFILE_UPDATED: 'profile_updated',\r\n  \r\n  // KYC events\r\n  KYC_SUBMITTED: 'kyc_submitted',\r\n  KYC_APPROVED: 'kyc_approved',\r\n  KYC_REJECTED: 'kyc_rejected',\r\n  KYC_DOCUMENT_UPLOADED: 'kyc_document_uploaded',\r\n  \r\n  // Trading events\r\n  ORDER_PLACED: 'order_placed',\r\n  ORDER_CANCELLED: 'order_cancelled',\r\n  ORDER_FILLED: 'order_filled',\r\n  TRADE_EXECUTED: 'trade_executed',\r\n  \r\n  // Wallet events\r\n  DEPOSIT_INITIATED: 'deposit_initiated',\r\n  DEPOSIT_CONFIRMED: 'deposit_confirmed',\r\n  WITHDRAWAL_REQUESTED: 'withdrawal_requested',\r\n  WITHDRAWAL_APPROVED: 'withdrawal_approved',\r\n  WITHDRAWAL_REJECTED: 'withdrawal_rejected',\r\n  WITHDRAWAL_COMPLETED: 'withdrawal_completed',\r\n  WALLET_CREATED: 'wallet_created',\r\n  ADDRESS_GENERATED: 'address_generated',\r\n  \r\n  // Security events\r\n  SUSPICIOUS_ACTIVITY: 'suspicious_activity',\r\n  IP_BLOCKED: 'ip_blocked',\r\n  RATE_LIMIT_EXCEEDED: 'rate_limit_exceeded',\r\n  API_KEY_CREATED: 'api_key_created',\r\n  API_KEY_DELETED: 'api_key_deleted',\r\n  API_KEY_USED: 'api_key_used',\r\n  \r\n  // Admin events\r\n  ADMIN_LOGIN: 'admin_login',\r\n  ADMIN_ACTION: 'admin_action',\r\n  USER_IMPERSONATION: 'user_impersonation',\r\n  SYSTEM_CONFIG_CHANGED: 'system_config_changed',\r\n  \r\n  // System events\r\n  SYSTEM_ERROR: 'system_error',\r\n  DATABASE_ERROR: 'database_error',\r\n  EXTERNAL_API_ERROR: 'external_api_error',\r\n  MAINTENANCE_MODE: 'maintenance_mode'\r\n};\r\n\r\n// Risk levels\r\nconst RISK_LEVELS = {\r\n  LOW: 'low',\r\n  MEDIUM: 'medium',\r\n  HIGH: 'high',\r\n  CRITICAL: 'critical'\r\n};\r\n\r\n// Create audit log entry\r\nconst createAuditLog = async (logData) => {\r\n  try {\r\n    const {\r\n      userId,\r\n      eventType,\r\n      level = LOG_LEVELS.INFO,\r\n      riskLevel = RISK_LEVELS.LOW,\r\n      description,\r\n      metadata = {},\r\n      ipAddress,\r\n      userAgent,\r\n      sessionId,\r\n      apiKeyId,\r\n      adminUserId\r\n    } = logData;\r\n\r\n    // Generate unique log ID\r\n    const logId = crypto.randomUUID();\r\n    \r\n    // Parse user agent\r\n    const parser = new UAParser(userAgent);\r\n    const deviceInfo = {\r\n      browser: parser.getBrowser(),\r\n      os: parser.getOS(),\r\n      device: parser.getDevice()\r\n    };\r\n    \r\n    // Get location from IP\r\n    const location = ipAddress ? geoip.lookup(ipAddress) : null;\r\n    \r\n    // Create fingerprint for duplicate detection\r\n    const fingerprint = crypto\r\n      .createHash('sha256')\r\n      .update(`${userId}-${eventType}-${ipAddress}-${JSON.stringify(metadata)}`)\r\n      .digest('hex');\r\n    \r\n    // Check for recent duplicate\r\n    const duplicateKey = `audit_fingerprint:${fingerprint}`;\r\n    const isDuplicate = await cache.exists(duplicateKey);\r\n    \r\n    if (isDuplicate && level !== LOG_LEVELS.CRITICAL) {\r\n      console.log('Duplicate audit log detected, skipping:', { eventType, userId });\r\n      return null;\r\n    }\r\n    \r\n    // Set duplicate prevention cache (5 minutes)\r\n    await cache.setex(duplicateKey, 300, '1');\r\n    \r\n    // Prepare audit log data\r\n    const auditLogData = {\r\n      id: logId,\r\n      user_id: userId,\r\n      event_type: eventType,\r\n      level,\r\n      risk_level: riskLevel,\r\n      description,\r\n      metadata: JSON.stringify({\r\n        ...metadata,\r\n        deviceInfo,\r\n        location: location ? {\r\n          country: location.country,\r\n          region: location.region,\r\n          city: location.city,\r\n          timezone: location.timezone\r\n        } : null\r\n      }),\r\n      ip_address: ipAddress,\r\n      user_agent: userAgent,\r\n      session_id: sessionId,\r\n      api_key_id: apiKeyId,\r\n      admin_user_id: adminUserId,\r\n      fingerprint,\r\n      created_at: new Date()\r\n    };\r\n    \r\n    // Insert into database\r\n    const query = `\r\n      INSERT INTO audit_logs (\r\n        id, user_id, event_type, level, risk_level, description, \r\n        metadata, ip_address, user_agent, session_id, api_key_id, \r\n        admin_user_id, fingerprint, created_at\r\n      ) VALUES (\r\n        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14\r\n      ) RETURNING *\r\n    `;\r\n    \r\n    const values = [\r\n      auditLogData.id,\r\n      auditLogData.user_id,\r\n      auditLogData.event_type,\r\n      auditLogData.level,\r\n      auditLogData.risk_level,\r\n      auditLogData.description,\r\n      auditLogData.metadata,\r\n      auditLogData.ip_address,\r\n      auditLogData.user_agent,\r\n      auditLogData.session_id,\r\n      auditLogData.api_key_id,\r\n      auditLogData.admin_user_id,\r\n      auditLogData.fingerprint,\r\n      auditLogData.created_at\r\n    ];\r\n    \r\n    const result = await db.query(query, values);\r\n    const createdLog = result.rows[0];\r\n    \r\n    // Cache recent logs for quick access\r\n    if (userId) {\r\n      const userLogsKey = `user_audit_logs:${userId}`;\r\n      await cache.lpush(userLogsKey, JSON.stringify(createdLog));\r\n      await cache.ltrim(userLogsKey, 0, 99); // Keep last 100 logs\r\n      await cache.expire(userLogsKey, 86400); // 24 hours\r\n    }\r\n    \r\n    // Alert on high-risk events\r\n    if (riskLevel === RISK_LEVELS.HIGH || riskLevel === RISK_LEVELS.CRITICAL) {\r\n      await alertHighRiskEvent(createdLog);\r\n    }\r\n    \r\n    // Real-time notification for critical events\r\n    if (level === LOG_LEVELS.CRITICAL) {\r\n      await notifyCriticalEvent(createdLog);\r\n    }\r\n    \r\n    console.log('Audit log created:', {\r\n      id: logId,\r\n      eventType,\r\n      userId,\r\n      level,\r\n      riskLevel\r\n    });\r\n    \r\n    return createdLog;\r\n  } catch (error) {\r\n    console.error('Failed to create audit log:', error);\r\n    // Don't throw error to avoid breaking main functionality\r\n    return null;\r\n  }\r\n};\r\n\r\n// Get audit logs with filtering\r\nconst getAuditLogs = async (filters = {}) => {\r\n  try {\r\n    const {\r\n      userId,\r\n      eventType,\r\n      level,\r\n      riskLevel,\r\n      startDate,\r\n      endDate,\r\n      ipAddress,\r\n      limit = 100,\r\n      offset = 0,\r\n      sortBy = 'created_at',\r\n      sortOrder = 'DESC'\r\n    } = filters;\r\n    \r\n    let query = 'SELECT * FROM audit_logs WHERE 1=1';\r\n    const values = [];\r\n    let paramCount = 0;\r\n    \r\n    // Add filters\r\n    if (userId) {\r\n      query += ` AND user_id = $${++paramCount}`;\r\n      values.push(userId);\r\n    }\r\n    \r\n    if (eventType) {\r\n      if (Array.isArray(eventType)) {\r\n        query += ` AND event_type = ANY($${++paramCount})`;\r\n        values.push(eventType);\r\n      } else {\r\n        query += ` AND event_type = $${++paramCount}`;\r\n        values.push(eventType);\r\n      }\r\n    }\r\n    \r\n    if (level) {\r\n      query += ` AND level = $${++paramCount}`;\r\n      values.push(level);\r\n    }\r\n    \r\n    if (riskLevel) {\r\n      query += ` AND risk_level = $${++paramCount}`;\r\n      values.push(riskLevel);\r\n    }\r\n    \r\n    if (startDate) {\r\n      query += ` AND created_at >= $${++paramCount}`;\r\n      values.push(startDate);\r\n    }\r\n    \r\n    if (endDate) {\r\n      query += ` AND created_at <= $${++paramCount}`;\r\n      values.push(endDate);\r\n    }\r\n    \r\n    if (ipAddress) {\r\n      query += ` AND ip_address = $${++paramCount}`;\r\n      values.push(ipAddress);\r\n    }\r\n    \r\n    // Add sorting and pagination\r\n    query += ` ORDER BY ${sortBy} ${sortOrder}`;\r\n    query += ` LIMIT $${++paramCount} OFFSET $${++paramCount}`;\r\n    values.push(limit, offset);\r\n    \r\n    const result = await db.query(query, values);\r\n    \r\n    // Parse metadata\r\n    const logs = result.rows.map(log => ({\r\n      ...log,\r\n      metadata: typeof log.metadata === 'string' ? JSON.parse(log.metadata) : log.metadata\r\n    }));\r\n    \r\n    return logs;\r\n  } catch (error) {\r\n    console.error('Failed to get audit logs:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get user activity summary\r\nconst getUserActivitySummary = async (userId, days = 30) => {\r\n  try {\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - days);\r\n    \r\n    const query = `\r\n      SELECT \r\n        event_type,\r\n        level,\r\n        risk_level,\r\n        COUNT(*) as count,\r\n        MAX(created_at) as last_occurrence\r\n      FROM audit_logs \r\n      WHERE user_id = $1 AND created_at >= $2\r\n      GROUP BY event_type, level, risk_level\r\n      ORDER BY count DESC\r\n    `;\r\n    \r\n    const result = await db.query(query, [userId, startDate]);\r\n    \r\n    // Get total counts by level and risk\r\n    const summary = {\r\n      totalEvents: 0,\r\n      byLevel: { info: 0, warning: 0, error: 0, critical: 0 },\r\n      byRisk: { low: 0, medium: 0, high: 0, critical: 0 },\r\n      byEventType: {},\r\n      recentActivity: result.rows\r\n    };\r\n    \r\n    result.rows.forEach(row => {\r\n      summary.totalEvents += parseInt(row.count);\r\n      summary.byLevel[row.level] += parseInt(row.count);\r\n      summary.byRisk[row.risk_level] += parseInt(row.count);\r\n      \r\n      if (!summary.byEventType[row.event_type]) {\r\n        summary.byEventType[row.event_type] = 0;\r\n      }\r\n      summary.byEventType[row.event_type] += parseInt(row.count);\r\n    });\r\n    \r\n    return summary;\r\n  } catch (error) {\r\n    console.error('Failed to get user activity summary:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Detect suspicious patterns\r\nconst detectSuspiciousActivity = async (userId) => {\r\n  try {\r\n    const last24Hours = new Date();\r\n    last24Hours.setHours(last24Hours.getHours() - 24);\r\n    \r\n    // Get recent activity\r\n    const recentLogs = await getAuditLogs({\r\n      userId,\r\n      startDate: last24Hours,\r\n      limit: 1000\r\n    });\r\n    \r\n    const suspiciousPatterns = [];\r\n    \r\n    // Pattern 1: Multiple failed login attempts\r\n    const failedLogins = recentLogs.filter(log => \r\n      log.event_type === EVENT_TYPES.USER_LOGIN_FAILED\r\n    );\r\n    \r\n    if (failedLogins.length >= 5) {\r\n      suspiciousPatterns.push({\r\n        type: 'multiple_failed_logins',\r\n        severity: 'high',\r\n        count: failedLogins.length,\r\n        description: `${failedLogins.length} failed login attempts in 24 hours`\r\n      });\r\n    }\r\n    \r\n    // Pattern 2: Multiple IP addresses\r\n    const uniqueIPs = new Set(recentLogs.map(log => log.ip_address).filter(Boolean));\r\n    \r\n    if (uniqueIPs.size >= 5) {\r\n      suspiciousPatterns.push({\r\n        type: 'multiple_ip_addresses',\r\n        severity: 'medium',\r\n        count: uniqueIPs.size,\r\n        description: `Activity from ${uniqueIPs.size} different IP addresses`\r\n      });\r\n    }\r\n    \r\n    // Pattern 3: Rapid successive actions\r\n    const rapidActions = recentLogs.filter((log, index) => {\r\n      if (index === 0) return false;\r\n      const prevLog = recentLogs[index - 1];\r\n      const timeDiff = new Date(log.created_at) - new Date(prevLog.created_at);\r\n      return timeDiff < 1000; // Less than 1 second apart\r\n    });\r\n    \r\n    if (rapidActions.length >= 10) {\r\n      suspiciousPatterns.push({\r\n        type: 'rapid_successive_actions',\r\n        severity: 'medium',\r\n        count: rapidActions.length,\r\n        description: `${rapidActions.length} actions performed in rapid succession`\r\n      });\r\n    }\r\n    \r\n    // Pattern 4: Unusual time activity\r\n    const unusualTimeActions = recentLogs.filter(log => {\r\n      const hour = new Date(log.created_at).getHours();\r\n      return hour >= 2 && hour <= 5; // 2 AM to 5 AM\r\n    });\r\n    \r\n    if (unusualTimeActions.length >= 10) {\r\n      suspiciousPatterns.push({\r\n        type: 'unusual_time_activity',\r\n        severity: 'low',\r\n        count: unusualTimeActions.length,\r\n        description: `${unusualTimeActions.length} actions during unusual hours (2-5 AM)`\r\n      });\r\n    }\r\n    \r\n    return suspiciousPatterns;\r\n  } catch (error) {\r\n    console.error('Failed to detect suspicious activity:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Alert high-risk events\r\nconst alertHighRiskEvent = async (auditLog) => {\r\n  try {\r\n    const alertKey = `high_risk_alert:${auditLog.id}`;\r\n    \r\n    // Prevent duplicate alerts\r\n    const alreadyAlerted = await cache.exists(alertKey);\r\n    if (alreadyAlerted) return;\r\n    \r\n    // Set alert flag\r\n    await cache.setex(alertKey, 3600, '1'); // 1 hour\r\n    \r\n    // Send alert to monitoring system\r\n    console.warn('HIGH RISK EVENT DETECTED:', {\r\n      id: auditLog.id,\r\n      userId: auditLog.user_id,\r\n      eventType: auditLog.event_type,\r\n      riskLevel: auditLog.risk_level,\r\n      description: auditLog.description,\r\n      ipAddress: auditLog.ip_address,\r\n      timestamp: auditLog.created_at\r\n    });\r\n    \r\n    // TODO: Integrate with external alerting system (Slack, PagerDuty, etc.)\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to alert high-risk event:', error);\r\n  }\r\n};\r\n\r\n// Notify critical events\r\nconst notifyCriticalEvent = async (auditLog) => {\r\n  try {\r\n    // Real-time notification via WebSocket\r\n    // TODO: Implement WebSocket notification\r\n    \r\n    console.error('CRITICAL EVENT:', {\r\n      id: auditLog.id,\r\n      userId: auditLog.user_id,\r\n      eventType: auditLog.event_type,\r\n      description: auditLog.description,\r\n      timestamp: auditLog.created_at\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to notify critical event:', error);\r\n  }\r\n};\r\n\r\n// Cleanup old audit logs\r\nconst cleanupOldLogs = async (retentionDays = 365) => {\r\n  try {\r\n    const cutoffDate = new Date();\r\n    cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\r\n    \r\n    const query = 'DELETE FROM audit_logs WHERE created_at < $1';\r\n    const result = await db.query(query, [cutoffDate]);\r\n    \r\n    console.log(`Cleaned up ${result.rowCount} old audit logs`);\r\n    return result.rowCount;\r\n  } catch (error) {\r\n    console.error('Failed to cleanup old audit logs:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export audit data\r\nconst exportAuditData = async (filters = {}, format = 'json') => {\r\n  try {\r\n    const logs = await getAuditLogs({ ...filters, limit: 10000 });\r\n    \r\n    if (format === 'csv') {\r\n      // Convert to CSV format\r\n      const headers = [\r\n        'ID', 'User ID', 'Event Type', 'Level', 'Risk Level', \r\n        'Description', 'IP Address', 'Created At'\r\n      ];\r\n      \r\n      const csvRows = [headers.join(',')];\r\n      \r\n      logs.forEach(log => {\r\n        const row = [\r\n          log.id,\r\n          log.user_id || '',\r\n          log.event_type,\r\n          log.level,\r\n          log.risk_level,\r\n          `\"${log.description.replace(/\"/g, '\"\"')}\"`,\r\n          log.ip_address || '',\r\n          log.created_at\r\n        ];\r\n        csvRows.push(row.join(','));\r\n      });\r\n      \r\n      return csvRows.join('\\n');\r\n    }\r\n    \r\n    return logs;\r\n  } catch (error) {\r\n    console.error('Failed to export audit data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper functions for common audit events\r\nconst logUserLogin = (userId, ipAddress, userAgent, sessionId, success = true) => {\r\n  return createAuditLog({\r\n    userId,\r\n    eventType: success ? EVENT_TYPES.USER_LOGIN : EVENT_TYPES.USER_LOGIN_FAILED,\r\n    level: success ? LOG_LEVELS.INFO : LOG_LEVELS.WARNING,\r\n    riskLevel: success ? RISK_LEVELS.LOW : RISK_LEVELS.MEDIUM,\r\n    description: success ? 'User logged in successfully' : 'User login failed',\r\n    ipAddress,\r\n    userAgent,\r\n    sessionId\r\n  });\r\n};\r\n\r\nconst logUserLogout = (userId, ipAddress, userAgent, sessionId) => {\r\n  return createAuditLog({\r\n    userId,\r\n    eventType: EVENT_TYPES.USER_LOGOUT,\r\n    level: LOG_LEVELS.INFO,\r\n    riskLevel: RISK_LEVELS.LOW,\r\n    description: 'User logged out',\r\n    ipAddress,\r\n    userAgent,\r\n    sessionId\r\n  });\r\n};\r\n\r\nconst logPasswordChange = (userId, ipAddress, userAgent) => {\r\n  return createAuditLog({\r\n    userId,\r\n    eventType: EVENT_TYPES.PASSWORD_CHANGE,\r\n    level: LOG_LEVELS.INFO,\r\n    riskLevel: RISK_LEVELS.MEDIUM,\r\n    description: 'User changed password',\r\n    ipAddress,\r\n    userAgent\r\n  });\r\n};\r\n\r\nconst logSuspiciousActivity = (userId, activityType, ipAddress, userAgent, metadata = {}) => {\r\n  return createAuditLog({\r\n    userId,\r\n    eventType: EVENT_TYPES.SUSPICIOUS_ACTIVITY,\r\n    level: LOG_LEVELS.WARNING,\r\n    riskLevel: RISK_LEVELS.HIGH,\r\n    description: `Suspicious activity detected: ${activityType}`,\r\n    metadata: { activityType, ...metadata },\r\n    ipAddress,\r\n    userAgent\r\n  });\r\n};\r\n\r\nmodule.exports = {\r\n  // Constants\r\n  LOG_LEVELS,\r\n  EVENT_TYPES,\r\n  RISK_LEVELS,\r\n  \r\n  // Core functions\r\n  createAuditLog,\r\n  getAuditLogs,\r\n  getUserActivitySummary,\r\n  detectSuspiciousActivity,\r\n  cleanupOldLogs,\r\n  exportAuditData,\r\n  \r\n  // Helper functions\r\n  logUserLogin,\r\n  logUserLogout,\r\n  logPasswordChange,\r\n  logSuspiciousActivity\r\n};"],"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","ignoreList":[]}