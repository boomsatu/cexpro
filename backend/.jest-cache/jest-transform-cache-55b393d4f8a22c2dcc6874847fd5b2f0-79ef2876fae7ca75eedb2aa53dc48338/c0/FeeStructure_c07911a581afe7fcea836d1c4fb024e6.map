{"version":3,"names":["cov_13yhh3gny6","actualCoverage","DataTypes","s","require","sequelize","User","Market","FeeStructure","define","id","type","UUID","defaultValue","UUIDV4","primaryKey","name","STRING","allowNull","comment","code","unique","scope","ENUM","user_id","references","model","key","trading_pair_id","maker_fee_rate","DECIMAL","taker_fee_rate","min_volume_30d","max_volume_30d","vip_level","INTEGER","min_balance_requirement","balance_currency","withdrawal_fee_type","withdrawal_fee_rate","withdrawal_min_fee","withdrawal_max_fee","deposit_fee_rate","deposit_min_fee","margin_maker_fee_rate","margin_taker_fee_rate","futures_maker_fee_rate","futures_taker_fee_rate","funding_fee_rate","borrowing_fee_rate","priority","is_active","BOOLEAN","is_default","valid_from","DATE","valid_until","discount_percentage","promotion_code","referral_discount","referrer_share_percentage","fee_currency","fee_collection_method","description","TEXT","terms_and_conditions","metadata","JSONB","created_at","NOW","updated_at","tableName","timestamps","createdAt","updatedAt","indexes","fields","validate","feeRatesValid","f","b","parseFloat","Error","volumeRangeValid","validityPeriod","scopeConsistency","belongsTo","foreignKey","as","prototype","isValid","now","Date","calculateTradingFee","orderValue","isMaker","tradeType","feeRate","baseFee","calculateWithdrawalFee","amount","currency","fee","calculateDepositFee","calculateReferrerShare","totalFee","getEffectiveFeeRates","rates","maker","taker","discountMultiplier","getApplicableFeeStructure","userId","tradingPairId","where","Op","or","and","lte","gte","feeStructures","findAll","order","length","getVipTierFeeStructure","vipLevel","findOne","getVolumeTierFeeStructure","volume30d","gt","createDefaultStructure","transaction","create","createVipTiers","vipTiers","level","minVolume","createdTiers","tier","feeStructure","push","module","exports"],"sources":["FeeStructure.js"],"sourcesContent":["const { DataTypes } = require('sequelize');\nconst { sequelize } = require('../config/database');\nconst User = require('./User');\nconst Market = require('./Market');\n\n/**\n * Model FeeStructure untuk mengelola struktur biaya trading\n * Mendukung fee tiers, volume-based discounts, dan special rates\n */\nconst FeeStructure = sequelize.define('FeeStructure', {\n  id: {\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n    primaryKey: true\n  },\n  \n  // Identifiers\n  name: {\n    type: DataTypes.STRING(100),\n    allowNull: false,\n    comment: 'Name of the fee structure'\n  },\n  \n  code: {\n    type: DataTypes.STRING(50),\n    allowNull: false,\n    unique: true,\n    comment: 'Unique code for the fee structure'\n  },\n  \n  // Scope\n  scope: {\n    type: DataTypes.ENUM('global', 'user', 'pair', 'user_pair', 'vip_tier'),\n    allowNull: false,\n    defaultValue: 'global',\n    comment: 'Scope of fee application'\n  },\n  \n  // Foreign keys\n  user_id: {\n    type: DataTypes.UUID,\n    allowNull: true,\n    references: {\n      model: 'users',\n      key: 'id'\n    },\n    comment: 'User reference (for user-specific fees)'\n  },\n  \n  trading_pair_id: {\n    type: DataTypes.UUID,\n    allowNull: true,\n    references: {\n      model: 'trading_pairs',\n      key: 'id'\n    },\n    comment: 'Trading pair reference (for pair-specific fees)'\n  },\n  \n  // Fee rates\n  maker_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Maker fee rate (as decimal, e.g., 0.001 = 0.1%)'\n  },\n  \n  taker_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Taker fee rate (as decimal, e.g., 0.001 = 0.1%)'\n  },\n  \n  // Volume-based tiers\n  min_volume_30d: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Minimum 30-day volume for this tier'\n  },\n  \n  max_volume_30d: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Maximum 30-day volume for this tier'\n  },\n  \n  // VIP tier requirements\n  vip_level: {\n    type: DataTypes.INTEGER,\n    allowNull: true,\n    comment: 'VIP level requirement (null for non-VIP)'\n  },\n  \n  min_balance_requirement: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Minimum balance requirement'\n  },\n  \n  balance_currency: {\n    type: DataTypes.STRING(10),\n    allowNull: true,\n    comment: 'Currency for balance requirement'\n  },\n  \n  // Special fee types\n  withdrawal_fee_type: {\n    type: DataTypes.ENUM('fixed', 'percentage', 'tiered'),\n    allowNull: false,\n    defaultValue: 'fixed',\n    comment: 'Type of withdrawal fee calculation'\n  },\n  \n  withdrawal_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Withdrawal fee rate'\n  },\n  \n  withdrawal_min_fee: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Minimum withdrawal fee'\n  },\n  \n  withdrawal_max_fee: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Maximum withdrawal fee'\n  },\n  \n  // Deposit fees\n  deposit_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Deposit fee rate'\n  },\n  \n  deposit_min_fee: {\n    type: DataTypes.DECIMAL(36, 18),\n    allowNull: true,\n    comment: 'Minimum deposit fee'\n  },\n  \n  // Margin trading fees\n  margin_maker_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: true,\n    comment: 'Margin maker fee rate'\n  },\n  \n  margin_taker_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: true,\n    comment: 'Margin taker fee rate'\n  },\n  \n  // Futures trading fees\n  futures_maker_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: true,\n    comment: 'Futures maker fee rate'\n  },\n  \n  futures_taker_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: true,\n    comment: 'Futures taker fee rate'\n  },\n  \n  // Funding and borrowing\n  funding_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: true,\n    comment: 'Funding fee rate for perpetual contracts'\n  },\n  \n  borrowing_fee_rate: {\n    type: DataTypes.DECIMAL(10, 8),\n    allowNull: true,\n    comment: 'Borrowing fee rate for margin trading'\n  },\n  \n  // Priority and status\n  priority: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n    defaultValue: 1,\n    comment: 'Priority level (higher number = higher priority)'\n  },\n  \n  is_active: {\n    type: DataTypes.BOOLEAN,\n    allowNull: false,\n    defaultValue: true,\n    comment: 'Whether the fee structure is active'\n  },\n  \n  is_default: {\n    type: DataTypes.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n    comment: 'Whether this is the default fee structure'\n  },\n  \n  // Validity period\n  valid_from: {\n    type: DataTypes.DATE,\n    allowNull: true,\n    comment: 'When the fee structure becomes valid'\n  },\n  \n  valid_until: {\n    type: DataTypes.DATE,\n    allowNull: true,\n    comment: 'When the fee structure expires'\n  },\n  \n  // Discounts and promotions\n  discount_percentage: {\n    type: DataTypes.DECIMAL(5, 4),\n    allowNull: true,\n    comment: 'Discount percentage (0.1 = 10% discount)'\n  },\n  \n  promotion_code: {\n    type: DataTypes.STRING(50),\n    allowNull: true,\n    comment: 'Promotion code associated with this fee structure'\n  },\n  \n  referral_discount: {\n    type: DataTypes.DECIMAL(5, 4),\n    allowNull: true,\n    comment: 'Additional discount for referrals'\n  },\n  \n  // Fee sharing (for referrals)\n  referrer_share_percentage: {\n    type: DataTypes.DECIMAL(5, 4),\n    allowNull: true,\n    comment: 'Percentage of fees shared with referrer'\n  },\n  \n  // Configuration\n  fee_currency: {\n    type: DataTypes.STRING(10),\n    allowNull: true,\n    comment: 'Currency in which fees are collected (null = quote currency)'\n  },\n  \n  fee_collection_method: {\n    type: DataTypes.ENUM('deduct_from_order', 'separate_charge', 'native_token'),\n    allowNull: false,\n    defaultValue: 'deduct_from_order',\n    comment: 'How fees are collected'\n  },\n  \n  // Metadata\n  description: {\n    type: DataTypes.TEXT,\n    allowNull: true,\n    comment: 'Description of the fee structure'\n  },\n  \n  terms_and_conditions: {\n    type: DataTypes.TEXT,\n    allowNull: true,\n    comment: 'Terms and conditions for this fee structure'\n  },\n  \n  metadata: {\n    type: DataTypes.JSONB,\n    allowNull: true,\n    comment: 'Additional metadata'\n  },\n  \n  // Timestamps\n  created_at: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW,\n    allowNull: false\n  },\n  \n  updated_at: {\n    type: DataTypes.DATE,\n    defaultValue: DataTypes.NOW,\n    allowNull: false\n  }\n}, {\n  tableName: 'fee_structures',\n  timestamps: true,\n  createdAt: 'created_at',\n  updatedAt: 'updated_at',\n  indexes: [\n    {\n      fields: ['code'],\n      unique: true\n    },\n    {\n      fields: ['scope', 'is_active']\n    },\n    {\n      fields: ['user_id', 'is_active']\n    },\n    {\n      fields: ['trading_pair_id', 'is_active']\n    },\n    {\n      fields: ['vip_level']\n    },\n    {\n      fields: ['min_volume_30d', 'max_volume_30d']\n    },\n    {\n      fields: ['priority']\n    },\n    {\n      fields: ['valid_from', 'valid_until']\n    },\n    {\n      fields: ['is_default']\n    },\n    {\n      fields: ['promotion_code']\n    }\n  ],\n  validate: {\n    feeRatesValid() {\n      if (parseFloat(this.maker_fee_rate) < 0 || parseFloat(this.taker_fee_rate) < 0) {\n        throw new Error('Fee rates cannot be negative');\n      }\n    },\n    volumeRangeValid() {\n      if (this.min_volume_30d && this.max_volume_30d) {\n        if (parseFloat(this.min_volume_30d) >= parseFloat(this.max_volume_30d)) {\n          throw new Error('Minimum volume must be less than maximum volume');\n        }\n      }\n    },\n    validityPeriod() {\n      if (this.valid_from && this.valid_until) {\n        if (this.valid_from >= this.valid_until) {\n          throw new Error('Valid from date must be before valid until date');\n        }\n      }\n    },\n    scopeConsistency() {\n      if (this.scope === 'user' && !this.user_id) {\n        throw new Error('User ID required for user scope');\n      }\n      if (this.scope === 'pair' && !this.trading_pair_id) {\n        throw new Error('Trading pair ID required for pair scope');\n      }\n      if (this.scope === 'user_pair' && (!this.user_id || !this.trading_pair_id)) {\n        throw new Error('Both user ID and trading pair ID required for user_pair scope');\n      }\n    }\n  }\n});\n\n// Associations\nFeeStructure.belongsTo(User, { foreignKey: 'user_id', as: 'user' });\n// Associations are defined in models/index.js\n\n// Instance methods\nFeeStructure.prototype.isValid = function() {\n  const now = new Date();\n  \n  if (!this.is_active) return false;\n  if (this.valid_from && now < this.valid_from) return false;\n  if (this.valid_until && now > this.valid_until) return false;\n  \n  return true;\n};\n\nFeeStructure.prototype.calculateTradingFee = function(orderValue, isMaker = true, tradeType = 'spot') {\n  let feeRate;\n  \n  switch (tradeType) {\n    case 'margin':\n      feeRate = isMaker ? this.margin_maker_fee_rate : this.margin_taker_fee_rate;\n      break;\n    case 'futures':\n      feeRate = isMaker ? this.futures_maker_fee_rate : this.futures_taker_fee_rate;\n      break;\n    default:\n      feeRate = isMaker ? this.maker_fee_rate : this.taker_fee_rate;\n  }\n  \n  if (!feeRate) {\n    feeRate = isMaker ? this.maker_fee_rate : this.taker_fee_rate;\n  }\n  \n  let baseFee = parseFloat(orderValue) * parseFloat(feeRate);\n  \n  // Apply discount if applicable\n  if (this.discount_percentage) {\n    baseFee *= (1 - parseFloat(this.discount_percentage));\n  }\n  \n  return baseFee;\n};\n\nFeeStructure.prototype.calculateWithdrawalFee = function(amount, currency) {\n  let fee = 0;\n  \n  switch (this.withdrawal_fee_type) {\n    case 'fixed':\n      fee = parseFloat(this.withdrawal_fee_rate);\n      break;\n    case 'percentage':\n      fee = parseFloat(amount) * parseFloat(this.withdrawal_fee_rate);\n      break;\n    case 'tiered':\n      // Implement tiered logic based on amount\n      fee = parseFloat(amount) * parseFloat(this.withdrawal_fee_rate);\n      break;\n  }\n  \n  // Apply min/max limits\n  if (this.withdrawal_min_fee && fee < parseFloat(this.withdrawal_min_fee)) {\n    fee = parseFloat(this.withdrawal_min_fee);\n  }\n  \n  if (this.withdrawal_max_fee && fee > parseFloat(this.withdrawal_max_fee)) {\n    fee = parseFloat(this.withdrawal_max_fee);\n  }\n  \n  return fee;\n};\n\nFeeStructure.prototype.calculateDepositFee = function(amount) {\n  let fee = parseFloat(amount) * parseFloat(this.deposit_fee_rate);\n  \n  if (this.deposit_min_fee && fee < parseFloat(this.deposit_min_fee)) {\n    fee = parseFloat(this.deposit_min_fee);\n  }\n  \n  return fee;\n};\n\nFeeStructure.prototype.calculateReferrerShare = function(totalFee) {\n  if (!this.referrer_share_percentage) return 0;\n  return parseFloat(totalFee) * parseFloat(this.referrer_share_percentage);\n};\n\nFeeStructure.prototype.getEffectiveFeeRates = function(tradeType = 'spot') {\n  const rates = {\n    maker: this.maker_fee_rate,\n    taker: this.taker_fee_rate\n  };\n  \n  if (tradeType === 'margin') {\n    rates.maker = this.margin_maker_fee_rate || this.maker_fee_rate;\n    rates.taker = this.margin_taker_fee_rate || this.taker_fee_rate;\n  } else if (tradeType === 'futures') {\n    rates.maker = this.futures_maker_fee_rate || this.maker_fee_rate;\n    rates.taker = this.futures_taker_fee_rate || this.taker_fee_rate;\n  }\n  \n  // Apply discount\n  if (this.discount_percentage) {\n    const discountMultiplier = 1 - parseFloat(this.discount_percentage);\n    rates.maker *= discountMultiplier;\n    rates.taker *= discountMultiplier;\n  }\n  \n  return rates;\n};\n\n// Static methods\nFeeStructure.getApplicableFeeStructure = async function(userId, tradingPairId = null, tradeType = 'spot') {\n  const where = {\n    is_active: true,\n    [sequelize.Op.or]: [\n      { scope: 'global', is_default: true },\n      { scope: 'user', user_id: userId },\n      { scope: 'pair', trading_pair_id: tradingPairId },\n      { scope: 'user_pair', user_id: userId, trading_pair_id: tradingPairId }\n    ]\n  };\n  \n  const now = new Date();\n  where[sequelize.Op.and] = [\n    {\n      [sequelize.Op.or]: [\n        { valid_from: null },\n        { valid_from: { [sequelize.Op.lte]: now } }\n      ]\n    },\n    {\n      [sequelize.Op.or]: [\n        { valid_until: null },\n        { valid_until: { [sequelize.Op.gte]: now } }\n      ]\n    }\n  ];\n  \n  const feeStructures = await FeeStructure.findAll({\n    where,\n    order: [['priority', 'DESC'], ['scope', 'DESC']]\n  });\n  \n  return feeStructures.length > 0 ? feeStructures[0] : null;\n};\n\nFeeStructure.getVipTierFeeStructure = async function(vipLevel) {\n  return await FeeStructure.findOne({\n    where: {\n      scope: 'vip_tier',\n      vip_level: vipLevel,\n      is_active: true\n    }\n  });\n};\n\nFeeStructure.getVolumeTierFeeStructure = async function(volume30d) {\n  return await FeeStructure.findOne({\n    where: {\n      [sequelize.Op.and]: [\n        {\n          [sequelize.Op.or]: [\n            { min_volume_30d: null },\n            { min_volume_30d: { [sequelize.Op.lte]: volume30d } }\n          ]\n        },\n        {\n          [sequelize.Op.or]: [\n            { max_volume_30d: null },\n            { max_volume_30d: { [sequelize.Op.gt]: volume30d } }\n          ]\n        }\n      ],\n      is_active: true\n    },\n    order: [['priority', 'DESC']]\n  });\n};\n\nFeeStructure.createDefaultStructure = async function(transaction = null) {\n  return await FeeStructure.create({\n    name: 'Default Fee Structure',\n    code: 'DEFAULT',\n    scope: 'global',\n    maker_fee_rate: 0.001, // 0.1%\n    taker_fee_rate: 0.001, // 0.1%\n    withdrawal_fee_type: 'fixed',\n    withdrawal_fee_rate: 0.0005,\n    deposit_fee_rate: 0,\n    is_default: true,\n    description: 'Default fee structure for all users'\n  }, { transaction });\n};\n\nFeeStructure.createVipTiers = async function(transaction = null) {\n  const vipTiers = [\n    { level: 1, maker: 0.0008, taker: 0.0008, minVolume: 100000 },\n    { level: 2, maker: 0.0006, taker: 0.0006, minVolume: 500000 },\n    { level: 3, maker: 0.0004, taker: 0.0004, minVolume: 1000000 },\n    { level: 4, maker: 0.0002, taker: 0.0002, minVolume: 5000000 },\n    { level: 5, maker: 0.0000, taker: 0.0001, minVolume: 10000000 }\n  ];\n  \n  const createdTiers = [];\n  \n  for (const tier of vipTiers) {\n    const feeStructure = await FeeStructure.create({\n      name: `VIP Level ${tier.level}`,\n      code: `VIP_${tier.level}`,\n      scope: 'vip_tier',\n      vip_level: tier.level,\n      maker_fee_rate: tier.maker,\n      taker_fee_rate: tier.taker,\n      min_volume_30d: tier.minVolume,\n      withdrawal_fee_type: 'fixed',\n      withdrawal_fee_rate: 0.0005 * (1 - tier.level * 0.1), // Reduced withdrawal fees\n      deposit_fee_rate: 0,\n      priority: tier.level,\n      description: `VIP Level ${tier.level} fee structure`\n    }, { transaction });\n    \n    createdTiers.push(feeStructure);\n  }\n  \n  return createdTiers;\n};\n\nmodule.exports = FeeStructure;"],"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","ignoreList":[]}