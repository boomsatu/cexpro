{"version":3,"names":["cov_11fy5nblou","actualCoverage","compression","s","require","helmet","redis","performanceService","OptimizationMiddleware","constructor","f","requestCache","Map","responseCache","compressionStats","totalRequests","compressedRequests","totalSavings","compressionMiddleware","level","threshold","filter","req","res","headers","b","contentType","getHeader","nonCompressible","some","type","includes","chunkSize","windowBits","memLevel","requestOptimization","next","startTime","Date","now","requestId","generateRequestId","setHeader","optimizeByRequestType","trackRequestMetrics","responseCaching","method","cacheKey","generateCacheKey","cached","getCachedResponse","send","data","originalSend","statusCode","shouldCacheResponse","cacheResponse","timestamp","call","etagMiddleware","etag","generateETag","clientETag","status","end","requestDeduplication","requestKey","generateRequestKey","has","existingRequest","get","result","promise","json","error","resolveRequest","rejectRequest","requestPromise","Promise","resolve","reject","set","originalJson","delete","on","resourceHints","join","requestSizeOptimization","maxSize","parseInt","pipe","createGunzip","queryOptimization","queryOptions","useCache","shouldUseCache","cacheTTL","getCacheTTL","usePreparedStatement","shouldUsePreparedStatement","timeout","getQueryTimeout","memoryOptimization","memUsage","process","memoryUsage","heapUsedMB","heapUsed","aggressiveOptimization","reducedCacheTTL","enableStreaming","responseStreaming","JSON","stringify","length","write","Array","isArray","forEach","item","index","toString","Math","random","substr","key","originalUrl","query","createHash","update","digest","ip","cache","parse","ttl","getResponseCacheTTL","console","cacheableRoutes","route","path","startsWith","Object","keys","queryTimeout","duration","warn","cleanupCache","maxAge","value","entries","getStats","size","hitRatio","memory","round","heapTotal","initialize","setInterval","log","module","exports"],"sources":["optimization.js"],"sourcesContent":["const compression = require('compression');\nconst helmet = require('helmet');\nconst redis = require('../config/redis');\nconst performanceService = require('../services/performanceService');\n\nclass OptimizationMiddleware {\n  constructor() {\n    this.requestCache = new Map();\n    this.responseCache = new Map();\n    this.compressionStats = {\n      totalRequests: 0,\n      compressedRequests: 0,\n      totalSavings: 0\n    };\n  }\n\n  // Response Compression Middleware\n  compressionMiddleware() {\n    return compression({\n      // Compression level (1-9, 6 is default)\n      level: 6,\n      \n      // Minimum response size to compress (in bytes)\n      threshold: 1024,\n      \n      // Custom filter function\n      filter: (req, res) => {\n        // Don't compress if client doesn't support it\n        if (req.headers['x-no-compression']) {\n          return false;\n        }\n        \n        // Don't compress images, videos, or already compressed files\n        const contentType = res.getHeader('content-type');\n        if (contentType) {\n          const nonCompressible = [\n            'image/',\n            'video/',\n            'audio/',\n            'application/zip',\n            'application/gzip',\n            'application/x-rar'\n          ];\n          \n          if (nonCompressible.some(type => contentType.includes(type))) {\n            return false;\n          }\n        }\n        \n        // Use default compression filter\n        return compression.filter(req, res);\n      },\n      \n      // Custom compression function\n      chunkSize: 16 * 1024, // 16KB chunks\n      windowBits: 15,\n      memLevel: 8\n    });\n  }\n\n  // Request Optimization Middleware\n  requestOptimization() {\n    return async (req, res, next) => {\n      const startTime = Date.now();\n      \n      // Add request ID for tracking\n      req.requestId = this.generateRequestId();\n      \n      // Set optimization headers\n      res.setHeader('X-Request-ID', req.requestId);\n      res.setHeader('X-Powered-By', 'CEX-Engine');\n      \n      // Enable keep-alive\n      res.setHeader('Connection', 'keep-alive');\n      res.setHeader('Keep-Alive', 'timeout=5, max=1000');\n      \n      // Optimize based on request type\n      await this.optimizeByRequestType(req, res);\n      \n      // Track request metrics\n      this.trackRequestMetrics(req, startTime);\n      \n      next();\n    };\n  }\n\n  // Response Caching Middleware\n  responseCaching() {\n    return async (req, res, next) => {\n      // Only cache GET requests\n      if (req.method !== 'GET') {\n        return next();\n      }\n      \n      const cacheKey = this.generateCacheKey(req);\n      \n      // Check if response is cached\n      const cached = await this.getCachedResponse(cacheKey);\n      if (cached) {\n        res.setHeader('X-Cache', 'HIT');\n        res.setHeader('Content-Type', cached.contentType);\n        return res.send(cached.data);\n      }\n      \n      // Intercept response to cache it\n      const originalSend = res.send;\n      res.send = async (data) => {\n        // Cache successful responses\n        if (res.statusCode === 200 && this.shouldCacheResponse(req)) {\n          await this.cacheResponse(cacheKey, {\n            data,\n            contentType: res.getHeader('content-type'),\n            timestamp: Date.now()\n          });\n        }\n        \n        res.setHeader('X-Cache', 'MISS');\n        originalSend.call(res, data);\n      };\n      \n      next();\n    };\n  }\n\n  // ETags for Client-Side Caching\n  etagMiddleware() {\n    return (req, res, next) => {\n      const originalSend = res.send;\n      \n      res.send = (data) => {\n        if (res.statusCode === 200 && typeof data === 'string') {\n          const etag = this.generateETag(data);\n          res.setHeader('ETag', etag);\n          \n          // Check if client has cached version\n          const clientETag = req.headers['if-none-match'];\n          if (clientETag === etag) {\n            res.status(304).end();\n            return;\n          }\n        }\n        \n        originalSend.call(res, data);\n      };\n      \n      next();\n    };\n  }\n\n  // Request Deduplication\n  requestDeduplication() {\n    return async (req, res, next) => {\n      // Only deduplicate GET requests\n      if (req.method !== 'GET') {\n        return next();\n      }\n      \n      const requestKey = this.generateRequestKey(req);\n      \n      // Check if same request is already being processed\n      if (this.requestCache.has(requestKey)) {\n        const existingRequest = this.requestCache.get(requestKey);\n        \n        // Wait for existing request to complete\n        try {\n          const result = await existingRequest.promise;\n          res.setHeader('X-Deduplicated', 'true');\n          return res.json(result);\n        } catch (error) {\n          // If existing request failed, continue with new request\n        }\n      }\n      \n      // Create promise for this request\n      let resolveRequest, rejectRequest;\n      const requestPromise = new Promise((resolve, reject) => {\n        resolveRequest = resolve;\n        rejectRequest = reject;\n      });\n      \n      this.requestCache.set(requestKey, {\n        promise: requestPromise,\n        timestamp: Date.now()\n      });\n      \n      // Intercept response to resolve promise\n      const originalJson = res.json;\n      res.json = (data) => {\n        resolveRequest(data);\n        this.requestCache.delete(requestKey);\n        originalJson.call(res, data);\n      };\n      \n      // Handle errors\n      res.on('error', (error) => {\n        rejectRequest(error);\n        this.requestCache.delete(requestKey);\n      });\n      \n      next();\n    };\n  }\n\n  // Resource Hints Middleware\n  resourceHints() {\n    return (req, res, next) => {\n      // Add resource hints for better performance\n      res.setHeader('Link', [\n        '</api/v1/trading/pairs>; rel=prefetch',\n        '</api/v1/market/ticker>; rel=prefetch',\n        '</static/css/main.css>; rel=preload; as=style',\n        '</static/js/main.js>; rel=preload; as=script'\n      ].join(', '));\n      \n      next();\n    };\n  }\n\n  // Request Size Optimization\n  requestSizeOptimization() {\n    return (req, res, next) => {\n      // Limit request size\n      const maxSize = 10 * 1024 * 1024; // 10MB\n      \n      if (req.headers['content-length'] && \n          parseInt(req.headers['content-length']) > maxSize) {\n        return res.status(413).json({\n          error: 'Request too large',\n          maxSize: '10MB'\n        });\n      }\n      \n      // Enable request compression\n      if (req.headers['content-encoding'] === 'gzip') {\n        req.pipe(require('zlib').createGunzip()).pipe(req);\n      }\n      \n      next();\n    };\n  }\n\n  // Database Query Optimization Middleware\n  queryOptimization() {\n    return async (req, res, next) => {\n      // Add query optimization context\n      req.queryOptions = {\n        useCache: this.shouldUseCache(req),\n        cacheTTL: this.getCacheTTL(req),\n        usePreparedStatement: this.shouldUsePreparedStatement(req),\n        timeout: this.getQueryTimeout(req)\n      };\n      \n      next();\n    };\n  }\n\n  // Memory Usage Optimization\n  memoryOptimization() {\n    return (req, res, next) => {\n      // Monitor memory usage\n      const memUsage = process.memoryUsage();\n      const heapUsedMB = memUsage.heapUsed / 1024 / 1024;\n      \n      // If memory usage is high, enable aggressive optimization\n      if (heapUsedMB > 500) { // 500MB threshold\n        req.aggressiveOptimization = true;\n        \n        // Reduce cache TTL\n        req.reducedCacheTTL = true;\n        \n        // Enable response streaming for large responses\n        req.enableStreaming = true;\n      }\n      \n      next();\n    };\n  }\n\n  // Response Streaming for Large Data\n  responseStreaming() {\n    return (req, res, next) => {\n      if (req.enableStreaming) {\n        const originalJson = res.json;\n        \n        res.json = (data) => {\n          if (typeof data === 'object' && JSON.stringify(data).length > 100000) {\n            // Stream large responses\n            res.setHeader('Content-Type', 'application/json');\n            res.write('[');\n            \n            if (Array.isArray(data)) {\n              data.forEach((item, index) => {\n                if (index > 0) res.write(',');\n                res.write(JSON.stringify(item));\n              });\n            } else {\n              res.write(JSON.stringify(data));\n            }\n            \n            res.write(']');\n            res.end();\n            return;\n          }\n          \n          originalJson.call(res, data);\n        };\n      }\n      \n      next();\n    };\n  }\n\n  // Helper Methods\n  generateRequestId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  generateCacheKey(req) {\n    const key = `${req.method}:${req.originalUrl}:${JSON.stringify(req.query)}`;\n    return require('crypto').createHash('md5').update(key).digest('hex');\n  }\n\n  generateRequestKey(req) {\n    return `${req.method}:${req.originalUrl}:${req.ip}`;\n  }\n\n  generateETag(data) {\n    return require('crypto').createHash('md5').update(data).digest('hex');\n  }\n\n  async getCachedResponse(key) {\n    try {\n      const cached = await redis.cache.get(`response:${key}`);\n      return cached ? JSON.parse(cached) : null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async cacheResponse(key, data) {\n    try {\n      const ttl = this.getResponseCacheTTL(key);\n      await redis.cache.set(`response:${key}`, JSON.stringify(data), ttl);\n    } catch (error) {\n      console.error('Response caching error:', error);\n    }\n  }\n\n  shouldCacheResponse(req) {\n    const cacheableRoutes = [\n      '/api/v1/trading/pairs',\n      '/api/v1/market/ticker',\n      '/api/v1/market/depth',\n      '/api/v1/market/trades'\n    ];\n    \n    return cacheableRoutes.some(route => req.path.startsWith(route));\n  }\n\n  getResponseCacheTTL(key) {\n    if (key.includes('ticker')) return 5; // 5 seconds for ticker\n    if (key.includes('pairs')) return 3600; // 1 hour for trading pairs\n    if (key.includes('depth')) return 1; // 1 second for order book\n    return 60; // 1 minute default\n  }\n\n  shouldUseCache(req) {\n    return req.method === 'GET' && !req.headers['cache-control']?.includes('no-cache');\n  }\n\n  getCacheTTL(req) {\n    if (req.reducedCacheTTL) return 30; // Reduced TTL under memory pressure\n    if (req.path.includes('realtime')) return 1;\n    if (req.path.includes('market')) return 5;\n    return 300; // 5 minutes default\n  }\n\n  shouldUsePreparedStatement(req) {\n    return req.method === 'GET' && req.query && Object.keys(req.query).length > 0;\n  }\n\n  getQueryTimeout(req) {\n    if (req.aggressiveOptimization) return 5000; // 5 seconds under pressure\n    if (req.path.includes('report')) return 60000; // 1 minute for reports\n    return 30000; // 30 seconds default\n  }\n\n  async optimizeByRequestType(req, res) {\n    // Trading requests - highest priority\n    if (req.path.includes('/trading/')) {\n      res.setHeader('X-Priority', 'high');\n      req.queryTimeout = 5000;\n    }\n    \n    // Market data requests - medium priority\n    else if (req.path.includes('/market/')) {\n      res.setHeader('X-Priority', 'medium');\n      req.queryTimeout = 10000;\n    }\n    \n    // Admin requests - low priority\n    else if (req.path.includes('/admin/')) {\n      res.setHeader('X-Priority', 'low');\n      req.queryTimeout = 30000;\n    }\n  }\n\n  trackRequestMetrics(req, startTime) {\n    const duration = Date.now() - startTime;\n    \n    // Track compression stats\n    this.compressionStats.totalRequests++;\n    if (req.headers['accept-encoding']?.includes('gzip')) {\n      this.compressionStats.compressedRequests++;\n    }\n    \n    // Log slow requests\n    if (duration > 1000) {\n      console.warn(`Slow request: ${req.method} ${req.path} - ${duration}ms`);\n    }\n  }\n\n  // Cleanup old cache entries\n  async cleanupCache() {\n    const now = Date.now();\n    const maxAge = 5 * 60 * 1000; // 5 minutes\n    \n    // Cleanup request cache\n    for (const [key, value] of this.requestCache.entries()) {\n      if (now - value.timestamp > maxAge) {\n        this.requestCache.delete(key);\n      }\n    }\n    \n    // Cleanup response cache\n    for (const [key, value] of this.responseCache.entries()) {\n      if (now - value.timestamp > maxAge) {\n        this.responseCache.delete(key);\n      }\n    }\n  }\n\n  // Get optimization statistics\n  getStats() {\n    return {\n      compression: this.compressionStats,\n      requestCache: {\n        size: this.requestCache.size,\n        hitRatio: 0 // Would calculate from actual usage\n      },\n      responseCache: {\n        size: this.responseCache.size,\n        hitRatio: 0 // Would calculate from actual usage\n      },\n      memory: {\n        heapUsed: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),\n        heapTotal: Math.round(process.memoryUsage().heapTotal / 1024 / 1024)\n      }\n    };\n  }\n\n  // Initialize optimization middleware\n  initialize() {\n    // Cleanup cache every 5 minutes\n    setInterval(() => {\n      this.cleanupCache();\n    }, 5 * 60 * 1000);\n    \n    console.log('Optimization middleware initialized');\n  }\n}\n\nmodule.exports = new OptimizationMiddleware();"],"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","ignoreList":[]}