{"version":3,"names":["cov_2p526bvj2c","actualCoverage","express","s","require","rateLimit","body","param","validationResult","requireAuth","requireEmailVerification","userRateLimit","getProfile","updateProfile","changePassword","enable2FA","verify2FASetup","disable2FA","getSessions","revokeSession","revokeAllSessions","router","Router","sensitiveOperationsLimit","windowMs","max","message","success","standardHeaders","legacyHeaders","passwordChangeLimit","twoFALimit","handleValidationErrors","req","res","next","f","errors","isEmpty","b","status","json","array","get","put","optional","isLength","min","withMessage","matches","isISO8601","custom","value","dob","Date","minAge","setFullYear","getFullYear","Error","maxAge","isAlpha","notEmpty","newPassword","post","delete","getUserActivitySummary","userId","user","id","days","parseInt","query","activity","data","period","error","console","detectSuspiciousActivity","suspiciousPatterns","patterns","riskLevel","length","Math","map","p","severity","cache","cacheKey","preferences","notifications","email","loginAlerts","tradingUpdates","securityAlerts","marketingEmails","newsletter","push","priceAlerts","trading","defaultOrderType","confirmOrders","showAdvancedOptions","security","sessionTimeout","requirePasswordForSensitiveOps","loginNotifications","display","theme","language","timezone","currency","setex","JSON","stringify","parse","isObject","isBoolean","isIn","isInt","createAuditLog","EVENT_TYPES","LOG_LEVELS","RISK_LEVELS","eventType","PROFILE_UPDATED","level","INFO","LOW","description","metadata","updatedPreferences","Object","keys","ipAddress","ip","userAgent","sessionId","sessionID","equals","User","password","reason","findByPk","isPasswordValid","comparePassword","update","deletedAt","deletionReason","where","WARNING","HIGH","session","destroy","module","exports"],"sources":["users.js"],"sourcesContent":["const express = require('express');\nconst rateLimit = require('express-rate-limit');\nconst { body, param, validationResult } = require('express-validator');\nconst { requireAuth, requireEmailVerification, userRateLimit } = require('../middleware/auth');\nconst {\n  getProfile,\n  updateProfile,\n  changePassword,\n  enable2FA,\n  verify2FASetup,\n  disable2FA,\n  getSessions,\n  revokeSession,\n  revokeAllSessions\n} = require('../controllers/userController');\n\nconst router = express.Router();\n\n// Rate limiting for sensitive operations\nconst sensitiveOperationsLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 attempts per window\n  message: {\n    success: false,\n    message: 'Too many sensitive operations. Please try again later.'\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\nconst passwordChangeLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 3, // 3 password changes per hour\n  message: {\n    success: false,\n    message: 'Too many password change attempts. Please try again later.'\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\nconst twoFALimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 10, // 10 2FA attempts per window\n  message: {\n    success: false,\n    message: 'Too many 2FA attempts. Please try again later.'\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Validation middleware\nconst handleValidationErrors = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      success: false,\n      message: 'Validation failed',\n      errors: errors.array()\n    });\n  }\n  next();\n};\n\n// Profile routes\nrouter.get('/profile', \n  requireAuth,\n  userRateLimit,\n  getProfile\n);\n\nrouter.put('/profile',\n  requireAuth,\n  requireEmailVerification,\n  userRateLimit,\n  [\n    body('firstName')\n      .optional()\n      .isLength({ min: 1, max: 50 })\n      .withMessage('First name must be between 1 and 50 characters')\n      .matches(/^[a-zA-Z\\s'-]+$/)\n      .withMessage('First name can only contain letters, spaces, hyphens, and apostrophes'),\n    \n    body('lastName')\n      .optional()\n      .isLength({ min: 1, max: 50 })\n      .withMessage('Last name must be between 1 and 50 characters')\n      .matches(/^[a-zA-Z\\s'-]+$/)\n      .withMessage('Last name can only contain letters, spaces, hyphens, and apostrophes'),\n    \n    body('dateOfBirth')\n      .optional()\n      .isISO8601()\n      .withMessage('Date of birth must be a valid date')\n      .custom((value) => {\n        const dob = new Date(value);\n        const minAge = new Date();\n        minAge.setFullYear(minAge.getFullYear() - 18);\n        \n        if (dob > minAge) {\n          throw new Error('You must be at least 18 years old');\n        }\n        \n        const maxAge = new Date();\n        maxAge.setFullYear(maxAge.getFullYear() - 120);\n        \n        if (dob < maxAge) {\n          throw new Error('Invalid date of birth');\n        }\n        \n        return true;\n      }),\n    \n    body('phoneNumber')\n      .optional()\n      .matches(/^\\+?[1-9]\\d{1,14}$/)\n      .withMessage('Phone number must be in international format'),\n    \n    body('country')\n      .optional()\n      .isLength({ min: 2, max: 2 })\n      .withMessage('Country must be a 2-letter ISO country code')\n      .isAlpha()\n      .withMessage('Country code must contain only letters'),\n    \n    body('address')\n      .optional()\n      .isLength({ min: 5, max: 200 })\n      .withMessage('Address must be between 5 and 200 characters'),\n    \n    body('city')\n      .optional()\n      .isLength({ min: 1, max: 100 })\n      .withMessage('City must be between 1 and 100 characters')\n      .matches(/^[a-zA-Z\\s'-]+$/)\n      .withMessage('City can only contain letters, spaces, hyphens, and apostrophes'),\n    \n    body('postalCode')\n      .optional()\n      .isLength({ min: 3, max: 20 })\n      .withMessage('Postal code must be between 3 and 20 characters')\n      .matches(/^[a-zA-Z0-9\\s-]+$/)\n      .withMessage('Postal code can only contain letters, numbers, spaces, and hyphens')\n  ],\n  handleValidationErrors,\n  updateProfile\n);\n\n// Password management\nrouter.put('/password',\n  requireAuth,\n  requireEmailVerification,\n  passwordChangeLimit,\n  [\n    body('currentPassword')\n      .notEmpty()\n      .withMessage('Current password is required'),\n    \n    body('newPassword')\n      .isLength({ min: 8, max: 128 })\n      .withMessage('New password must be between 8 and 128 characters')\n      .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n      .withMessage('New password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'),\n    \n    body('confirmPassword')\n      .custom((value, { req }) => {\n        if (value !== req.body.newPassword) {\n          throw new Error('Password confirmation does not match new password');\n        }\n        return true;\n      })\n  ],\n  handleValidationErrors,\n  changePassword\n);\n\n// Two-Factor Authentication routes\nrouter.post('/2fa/enable',\n  requireAuth,\n  requireEmailVerification,\n  sensitiveOperationsLimit,\n  enable2FA\n);\n\nrouter.post('/2fa/verify',\n  requireAuth,\n  requireEmailVerification,\n  twoFALimit,\n  [\n    body('token')\n      .matches(/^\\d{6}$/)\n      .withMessage('2FA token must be a 6-digit number')\n  ],\n  handleValidationErrors,\n  verify2FASetup\n);\n\nrouter.post('/2fa/disable',\n  requireAuth,\n  requireEmailVerification,\n  sensitiveOperationsLimit,\n  [\n    body('password')\n      .notEmpty()\n      .withMessage('Password is required to disable 2FA'),\n    \n    body('token')\n      .optional()\n      .matches(/^\\d{6}$/)\n      .withMessage('2FA token must be a 6-digit number')\n  ],\n  handleValidationErrors,\n  disable2FA\n);\n\n// Session management\nrouter.get('/sessions',\n  requireAuth,\n  userRateLimit,\n  getSessions\n);\n\nrouter.delete('/sessions/:sessionId',\n  requireAuth,\n  sensitiveOperationsLimit,\n  [\n    param('sessionId')\n      .isLength({ min: 1 })\n      .withMessage('Session ID is required')\n      .matches(/^[a-zA-Z0-9._-]+$/)\n      .withMessage('Invalid session ID format')\n  ],\n  handleValidationErrors,\n  revokeSession\n);\n\nrouter.delete('/sessions',\n  requireAuth,\n  sensitiveOperationsLimit,\n  revokeAllSessions\n);\n\n// Account security endpoints\nrouter.get('/security/activity',\n  requireAuth,\n  userRateLimit,\n  async (req, res) => {\n    try {\n      const { getUserActivitySummary } = require('../services/auditService');\n      const userId = req.user.id;\n      const days = parseInt(req.query.days) || 30;\n      \n      if (days > 365) {\n        return res.status(400).json({\n          success: false,\n          message: 'Maximum activity period is 365 days'\n        });\n      }\n      \n      const activity = await getUserActivitySummary(userId, days);\n      \n      res.json({\n        success: true,\n        data: {\n          period: `${days} days`,\n          activity\n        }\n      });\n    } catch (error) {\n      console.error('Get security activity error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error'\n      });\n    }\n  }\n);\n\nrouter.get('/security/suspicious',\n  requireAuth,\n  userRateLimit,\n  async (req, res) => {\n    try {\n      const { detectSuspiciousActivity } = require('../services/auditService');\n      const userId = req.user.id;\n      \n      const suspiciousPatterns = await detectSuspiciousActivity(userId);\n      \n      res.json({\n        success: true,\n        data: {\n          patterns: suspiciousPatterns,\n          riskLevel: suspiciousPatterns.length > 0 ? \n            Math.max(...suspiciousPatterns.map(p => \n              p.severity === 'critical' ? 4 : \n              p.severity === 'high' ? 3 : \n              p.severity === 'medium' ? 2 : 1\n            )) : 0\n        }\n      });\n    } catch (error) {\n      console.error('Get suspicious activity error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error'\n      });\n    }\n  }\n);\n\n// Account preferences\nrouter.get('/preferences',\n  requireAuth,\n  userRateLimit,\n  async (req, res) => {\n    try {\n      const { cache } = require('../config/redis');\n      const userId = req.user.id;\n      \n      // Get user preferences from cache or database\n      const cacheKey = `user_preferences:${userId}`;\n      let preferences = await cache.get(cacheKey);\n      \n      if (!preferences) {\n        // Default preferences\n        preferences = {\n          notifications: {\n            email: {\n              loginAlerts: true,\n              tradingUpdates: true,\n              securityAlerts: true,\n              marketingEmails: false,\n              newsletter: false\n            },\n            push: {\n              loginAlerts: true,\n              tradingUpdates: false,\n              priceAlerts: false\n            }\n          },\n          trading: {\n            defaultOrderType: 'limit',\n            confirmOrders: true,\n            showAdvancedOptions: false\n          },\n          security: {\n            sessionTimeout: 30, // minutes\n            requirePasswordForSensitiveOps: true,\n            loginNotifications: true\n          },\n          display: {\n            theme: 'light',\n            language: 'en',\n            timezone: 'UTC',\n            currency: 'USD'\n          }\n        };\n        \n        // Cache for 1 hour\n        await cache.setex(cacheKey, 3600, JSON.stringify(preferences));\n      } else {\n        preferences = JSON.parse(preferences);\n      }\n      \n      res.json({\n        success: true,\n        data: { preferences }\n      });\n    } catch (error) {\n      console.error('Get preferences error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error'\n      });\n    }\n  }\n);\n\nrouter.put('/preferences',\n  requireAuth,\n  requireEmailVerification,\n  userRateLimit,\n  [\n    body('preferences')\n      .isObject()\n      .withMessage('Preferences must be an object'),\n    \n    body('preferences.notifications.email.loginAlerts')\n      .optional()\n      .isBoolean()\n      .withMessage('Login alerts preference must be boolean'),\n    \n    body('preferences.display.theme')\n      .optional()\n      .isIn(['light', 'dark'])\n      .withMessage('Theme must be light or dark'),\n    \n    body('preferences.display.language')\n      .optional()\n      .isIn(['en', 'id', 'zh', 'ja', 'ko'])\n      .withMessage('Unsupported language'),\n    \n    body('preferences.security.sessionTimeout')\n      .optional()\n      .isInt({ min: 5, max: 480 })\n      .withMessage('Session timeout must be between 5 and 480 minutes')\n  ],\n  handleValidationErrors,\n  async (req, res) => {\n    try {\n      const { cache } = require('../config/redis');\n      const { createAuditLog, EVENT_TYPES, LOG_LEVELS, RISK_LEVELS } = require('../services/auditService');\n      const userId = req.user.id;\n      const { preferences } = req.body;\n      \n      // Update preferences in cache\n      const cacheKey = `user_preferences:${userId}`;\n      await cache.setex(cacheKey, 3600, JSON.stringify(preferences));\n      \n      // Log preference update\n      await createAuditLog({\n        userId,\n        eventType: EVENT_TYPES.PROFILE_UPDATED,\n        level: LOG_LEVELS.INFO,\n        riskLevel: RISK_LEVELS.LOW,\n        description: 'User preferences updated',\n        metadata: { updatedPreferences: Object.keys(preferences) },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        sessionId: req.sessionID\n      });\n      \n      res.json({\n        success: true,\n        message: 'Preferences updated successfully',\n        data: { preferences }\n      });\n    } catch (error) {\n      console.error('Update preferences error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error'\n      });\n    }\n  }\n);\n\n// Account deletion (soft delete)\nrouter.delete('/account',\n  requireAuth,\n  requireEmailVerification,\n  sensitiveOperationsLimit,\n  [\n    body('password')\n      .notEmpty()\n      .withMessage('Password is required for account deletion'),\n    \n    body('confirmation')\n      .equals('DELETE MY ACCOUNT')\n      .withMessage('Please type \"DELETE MY ACCOUNT\" to confirm'),\n    \n    body('reason')\n      .optional()\n      .isLength({ max: 500 })\n      .withMessage('Reason must be less than 500 characters')\n  ],\n  handleValidationErrors,\n  async (req, res) => {\n    try {\n      const { User } = require('../models/User');\n      const { createAuditLog, EVENT_TYPES, LOG_LEVELS, RISK_LEVELS } = require('../services/auditService');\n      const userId = req.user.id;\n      const { password, reason } = req.body;\n      \n      // Get user\n      const user = await User.findByPk(userId);\n      if (!user) {\n        return res.status(404).json({\n          success: false,\n          message: 'User not found'\n        });\n      }\n      \n      // Verify password\n      const isPasswordValid = await user.comparePassword(password);\n      if (!isPasswordValid) {\n        return res.status(400).json({\n          success: false,\n          message: 'Invalid password'\n        });\n      }\n      \n      // Soft delete user account\n      await User.update(\n        {\n          status: 'deleted',\n          deletedAt: new Date(),\n          deletionReason: reason || 'User requested account deletion'\n        },\n        { where: { id: userId } }\n      );\n      \n      // Log account deletion\n      await createAuditLog({\n        userId,\n        eventType: 'account_deleted',\n        level: LOG_LEVELS.WARNING,\n        riskLevel: RISK_LEVELS.HIGH,\n        description: 'User account deleted',\n        metadata: { reason },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        sessionId: req.sessionID\n      });\n      \n      // Destroy session\n      req.session.destroy();\n      \n      res.json({\n        success: true,\n        message: 'Account deleted successfully. We\\'re sorry to see you go.'\n      });\n    } catch (error) {\n      console.error('Delete account error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error'\n      });\n    }\n  }\n);\n\nmodule.exports = router;"],"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","ignoreList":[]}