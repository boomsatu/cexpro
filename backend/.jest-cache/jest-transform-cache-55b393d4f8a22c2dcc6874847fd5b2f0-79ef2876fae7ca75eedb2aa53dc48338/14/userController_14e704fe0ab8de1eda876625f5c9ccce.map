{"version":3,"names":["cov_z82qfelib","actualCoverage","bcrypt","s","require","User","cache","createAuditLog","EVENT_TYPES","LOG_LEVELS","RISK_LEVELS","sendPasswordChangedEmail","send2FAEnabledEmail","send2FADisabledEmail","speakeasy","QRCode","crypto","getProfile","req","res","f","userId","user","id","cacheKey","get","b","findByPk","attributes","exclude","status","json","success","message","setex","JSON","stringify","parse","eventType","PROFILE_UPDATED","level","INFO","riskLevel","LOW","description","ipAddress","ip","userAgent","sessionId","sessionID","data","email","username","firstName","lastName","dateOfBirth","phoneNumber","country","role","isEmailVerified","isPhoneVerified","kycLevel","kycStatus","twoFactorEnabled","lastLoginAt","createdAt","updatedAt","error","console","updateProfile","address","city","postalCode","body","allowedFields","updateData","Object","fromEntries","entries","filter","_","value","undefined","keys","length","test","dob","Date","minAge","setFullYear","getFullYear","updatedRowsCount","update","where","updatedUser","del","metadata","updatedFields","changePassword","currentPassword","newPassword","confirmPassword","passwordRegex","isCurrentPasswordValid","comparePassword","PASSWORD_CHANGE","WARNING","MEDIUM","isSamePassword","saltRounds","hashedPassword","hash","password","passwordChangedAt","sessionPattern","sessions","sessionKey","sessionData","session","e","emailError","enable2FA","secret","generateSecret","name","process","env","APP_NAME","issuer","qrCodeUrl","toDataURL","otpauth_url","tempSecretKey","base32","qrCode","manualEntryKey","instructions","step1","step2","step3","verify2FASetup","token","verified","totp","verify","encoding","window","backupCodes","i","push","randomBytes","toString","toUpperCase","hashedBackupCodes","Promise","all","map","code","twoFactorSecret","twoFactorBackupCodes","TWO_FA_ENABLED","backupCodesCount","warning","disable2FA","isPasswordValid","TWO_FA_DISABLED","getSessions","sessionKeys","userSessions","replace","isCurrentSession","lastActivity","sort","a","revokeSession","params","USER_LOGOUT","revokedSessionId","revokeAllSessions","revokedCount","revokedSessionsCount","module","exports"],"sources":["userController.js"],"sourcesContent":["const bcrypt = require('bcryptjs');\nconst { User } = require('../models/User');\nconst { cache } = require('../config/redis');\nconst { createAuditLog, EVENT_TYPES, LOG_LEVELS, RISK_LEVELS } = require('../services/auditService');\nconst { sendPasswordChangedEmail, send2FAEnabledEmail, send2FADisabledEmail } = require('../services/emailService');\nconst speakeasy = require('speakeasy');\nconst QRCode = require('qrcode');\nconst crypto = require('crypto');\n\n// Get user profile\nconst getProfile = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    \n    // Get user from cache first\n    const cacheKey = `user_profile:${userId}`;\n    let user = await cache.get(cacheKey);\n    \n    if (!user) {\n      user = await User.findByPk(userId, {\n        attributes: { exclude: ['password', 'passwordResetToken', 'passwordResetExpires'] }\n      });\n      \n      if (!user) {\n        return res.status(404).json({\n          success: false,\n          message: 'User not found'\n        });\n      }\n      \n      // Cache user profile for 5 minutes\n      await cache.setex(cacheKey, 300, JSON.stringify(user));\n    } else {\n      user = JSON.parse(user);\n    }\n    \n    // Log profile access\n    await createAuditLog({\n      userId,\n      eventType: EVENT_TYPES.PROFILE_UPDATED,\n      level: LOG_LEVELS.INFO,\n      riskLevel: RISK_LEVELS.LOW,\n      description: 'User accessed profile',\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      sessionId: req.sessionID\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        user: {\n          id: user.id,\n          email: user.email,\n          username: user.username,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          dateOfBirth: user.dateOfBirth,\n          phoneNumber: user.phoneNumber,\n          country: user.country,\n          role: user.role,\n          status: user.status,\n          isEmailVerified: user.isEmailVerified,\n          isPhoneVerified: user.isPhoneVerified,\n          kycLevel: user.kycLevel,\n          kycStatus: user.kycStatus,\n          twoFactorEnabled: user.twoFactorEnabled,\n          lastLoginAt: user.lastLoginAt,\n          createdAt: user.createdAt,\n          updatedAt: user.updatedAt\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Get profile error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n};\n\n// Update user profile\nconst updateProfile = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    const {\n      firstName,\n      lastName,\n      dateOfBirth,\n      phoneNumber,\n      country,\n      address,\n      city,\n      postalCode\n    } = req.body;\n    \n    // Validate input\n    const allowedFields = {\n      firstName,\n      lastName,\n      dateOfBirth,\n      phoneNumber,\n      country,\n      address,\n      city,\n      postalCode\n    };\n    \n    // Remove undefined fields\n    const updateData = Object.fromEntries(\n      Object.entries(allowedFields).filter(([_, value]) => value !== undefined)\n    );\n    \n    if (Object.keys(updateData).length === 0) {\n      return res.status(400).json({\n        success: false,\n        message: 'No valid fields to update'\n      });\n    }\n    \n    // Validate phone number format if provided\n    if (phoneNumber && !/^\\+?[1-9]\\d{1,14}$/.test(phoneNumber)) {\n      return res.status(400).json({\n        success: false,\n        message: 'Invalid phone number format'\n      });\n    }\n    \n    // Validate date of birth if provided\n    if (dateOfBirth) {\n      const dob = new Date(dateOfBirth);\n      const minAge = new Date();\n      minAge.setFullYear(minAge.getFullYear() - 18);\n      \n      if (dob > minAge) {\n        return res.status(400).json({\n          success: false,\n          message: 'You must be at least 18 years old'\n        });\n      }\n    }\n    \n    // Update user\n    const [updatedRowsCount] = await User.update(updateData, {\n      where: { id: userId }\n    });\n    \n    if (updatedRowsCount === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found'\n      });\n    }\n    \n    // Get updated user\n    const updatedUser = await User.findByPk(userId, {\n      attributes: { exclude: ['password', 'passwordResetToken', 'passwordResetExpires'] }\n    });\n    \n    // Clear cache\n    await cache.del(`user_profile:${userId}`);\n    \n    // Log profile update\n    await createAuditLog({\n      userId,\n      eventType: EVENT_TYPES.PROFILE_UPDATED,\n      level: LOG_LEVELS.INFO,\n      riskLevel: RISK_LEVELS.LOW,\n      description: 'User updated profile',\n      metadata: { updatedFields: Object.keys(updateData) },\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      sessionId: req.sessionID\n    });\n    \n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      data: {\n        user: updatedUser\n      }\n    });\n  } catch (error) {\n    console.error('Update profile error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n};\n\n// Change password\nconst changePassword = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    const { currentPassword, newPassword, confirmPassword } = req.body;\n    \n    // Validate input\n    if (!currentPassword || !newPassword || !confirmPassword) {\n      return res.status(400).json({\n        success: false,\n        message: 'All password fields are required'\n      });\n    }\n    \n    if (newPassword !== confirmPassword) {\n      return res.status(400).json({\n        success: false,\n        message: 'New passwords do not match'\n      });\n    }\n    \n    // Validate password strength\n    if (newPassword.length < 8) {\n      return res.status(400).json({\n        success: false,\n        message: 'Password must be at least 8 characters long'\n      });\n    }\n    \n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/;\n    if (!passwordRegex.test(newPassword)) {\n      return res.status(400).json({\n        success: false,\n        message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'\n      });\n    }\n    \n    // Get user\n    const user = await User.findByPk(userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found'\n      });\n    }\n    \n    // Verify current password\n    const isCurrentPasswordValid = await user.comparePassword(currentPassword);\n    if (!isCurrentPasswordValid) {\n      // Log failed password change attempt\n      await createAuditLog({\n        userId,\n        eventType: EVENT_TYPES.PASSWORD_CHANGE,\n        level: LOG_LEVELS.WARNING,\n        riskLevel: RISK_LEVELS.MEDIUM,\n        description: 'Failed password change attempt - incorrect current password',\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        sessionId: req.sessionID\n      });\n      \n      return res.status(400).json({\n        success: false,\n        message: 'Current password is incorrect'\n      });\n    }\n    \n    // Check if new password is same as current\n    const isSamePassword = await user.comparePassword(newPassword);\n    if (isSamePassword) {\n      return res.status(400).json({\n        success: false,\n        message: 'New password must be different from current password'\n      });\n    }\n    \n    // Hash new password\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(newPassword, saltRounds);\n    \n    // Update password\n    await User.update(\n      { \n        password: hashedPassword,\n        passwordChangedAt: new Date()\n      },\n      { where: { id: userId } }\n    );\n    \n    // Clear user cache\n    await cache.del(`user_profile:${userId}`);\n    \n    // Invalidate all user sessions except current\n    const sessionPattern = `sess:*`;\n    const sessions = await cache.keys(sessionPattern);\n    \n    for (const sessionKey of sessions) {\n      const sessionData = await cache.get(sessionKey);\n      if (sessionData) {\n        try {\n          const session = JSON.parse(sessionData);\n          if (session.userId === userId && sessionKey !== `sess:${req.sessionID}`) {\n            await cache.del(sessionKey);\n          }\n        } catch (e) {\n          // Ignore parsing errors\n        }\n      }\n    }\n    \n    // Log successful password change\n    await createAuditLog({\n      userId,\n      eventType: EVENT_TYPES.PASSWORD_CHANGE,\n      level: LOG_LEVELS.INFO,\n      riskLevel: RISK_LEVELS.MEDIUM,\n      description: 'Password changed successfully',\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      sessionId: req.sessionID\n    });\n    \n    // Send email notification\n    try {\n      await sendPasswordChangedEmail(user.email, {\n        firstName: user.firstName,\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      });\n    } catch (emailError) {\n      console.error('Failed to send password change email:', emailError);\n    }\n    \n    res.json({\n      success: true,\n      message: 'Password changed successfully. You have been logged out of other devices.'\n    });\n  } catch (error) {\n    console.error('Change password error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n};\n\n// Enable 2FA\nconst enable2FA = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    \n    // Get user\n    const user = await User.findByPk(userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found'\n      });\n    }\n    \n    if (user.twoFactorEnabled) {\n      return res.status(400).json({\n        success: false,\n        message: '2FA is already enabled'\n      });\n    }\n    \n    // Generate secret\n    const secret = speakeasy.generateSecret({\n      name: `${process.env.APP_NAME || 'CEX Exchange'} (${user.email})`,\n      issuer: process.env.APP_NAME || 'CEX Exchange',\n      length: 32\n    });\n    \n    // Generate QR code\n    const qrCodeUrl = await QRCode.toDataURL(secret.otpauth_url);\n    \n    // Store temporary secret in cache (expires in 10 minutes)\n    const tempSecretKey = `temp_2fa_secret:${userId}`;\n    await cache.setex(tempSecretKey, 600, secret.base32);\n    \n    res.json({\n      success: true,\n      data: {\n        secret: secret.base32,\n        qrCode: qrCodeUrl,\n        manualEntryKey: secret.base32,\n        instructions: {\n          step1: 'Install Google Authenticator or similar TOTP app',\n          step2: 'Scan the QR code or manually enter the secret key',\n          step3: 'Enter the 6-digit code from your app to verify setup'\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Enable 2FA error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n};\n\n// Verify and confirm 2FA setup\nconst verify2FASetup = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    const { token } = req.body;\n    \n    if (!token || !/^\\d{6}$/.test(token)) {\n      return res.status(400).json({\n        success: false,\n        message: 'Invalid 2FA token format'\n      });\n    }\n    \n    // Get temporary secret from cache\n    const tempSecretKey = `temp_2fa_secret:${userId}`;\n    const secret = await cache.get(tempSecretKey);\n    \n    if (!secret) {\n      return res.status(400).json({\n        success: false,\n        message: '2FA setup session expired. Please start over.'\n      });\n    }\n    \n    // Verify token\n    const verified = speakeasy.totp.verify({\n      secret,\n      encoding: 'base32',\n      token,\n      window: 2 // Allow 2 time steps (60 seconds) tolerance\n    });\n    \n    if (!verified) {\n      return res.status(400).json({\n        success: false,\n        message: 'Invalid 2FA token'\n      });\n    }\n    \n    // Generate backup codes\n    const backupCodes = [];\n    for (let i = 0; i < 10; i++) {\n      backupCodes.push(crypto.randomBytes(4).toString('hex').toUpperCase());\n    }\n    \n    // Hash backup codes for storage\n    const hashedBackupCodes = await Promise.all(\n      backupCodes.map(code => bcrypt.hash(code, 10))\n    );\n    \n    // Update user with 2FA enabled\n    await User.update(\n      {\n        twoFactorSecret: secret,\n        twoFactorEnabled: true,\n        twoFactorBackupCodes: JSON.stringify(hashedBackupCodes)\n      },\n      { where: { id: userId } }\n    );\n    \n    // Clear temporary secret\n    await cache.del(tempSecretKey);\n    \n    // Clear user cache\n    await cache.del(`user_profile:${userId}`);\n    \n    // Log 2FA enabled\n    await createAuditLog({\n      userId,\n      eventType: EVENT_TYPES.TWO_FA_ENABLED,\n      level: LOG_LEVELS.INFO,\n      riskLevel: RISK_LEVELS.LOW,\n      description: '2FA enabled successfully',\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      sessionId: req.sessionID\n    });\n    \n    // Send email notification\n    try {\n      const user = await User.findByPk(userId);\n      await send2FAEnabledEmail(user.email, {\n        firstName: user.firstName,\n        ipAddress: req.ip,\n        backupCodesCount: backupCodes.length\n      });\n    } catch (emailError) {\n      console.error('Failed to send 2FA enabled email:', emailError);\n    }\n    \n    res.json({\n      success: true,\n      message: '2FA enabled successfully',\n      data: {\n        backupCodes,\n        warning: 'Save these backup codes in a secure location. They can be used to access your account if you lose your 2FA device.'\n      }\n    });\n  } catch (error) {\n    console.error('Verify 2FA setup error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n};\n\n// Disable 2FA\nconst disable2FA = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    const { password, token } = req.body;\n    \n    if (!password) {\n      return res.status(400).json({\n        success: false,\n        message: 'Password is required to disable 2FA'\n      });\n    }\n    \n    // Get user\n    const user = await User.findByPk(userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found'\n      });\n    }\n    \n    if (!user.twoFactorEnabled) {\n      return res.status(400).json({\n        success: false,\n        message: '2FA is not enabled'\n      });\n    }\n    \n    // Verify password\n    const isPasswordValid = await user.comparePassword(password);\n    if (!isPasswordValid) {\n      return res.status(400).json({\n        success: false,\n        message: 'Invalid password'\n      });\n    }\n    \n    // Verify 2FA token if provided\n    if (token) {\n      const verified = speakeasy.totp.verify({\n        secret: user.twoFactorSecret,\n        encoding: 'base32',\n        token,\n        window: 2\n      });\n      \n      if (!verified) {\n        return res.status(400).json({\n          success: false,\n          message: 'Invalid 2FA token'\n        });\n      }\n    }\n    \n    // Disable 2FA\n    await User.update(\n      {\n        twoFactorSecret: null,\n        twoFactorEnabled: false,\n        twoFactorBackupCodes: null\n      },\n      { where: { id: userId } }\n    );\n    \n    // Clear user cache\n    await cache.del(`user_profile:${userId}`);\n    \n    // Log 2FA disabled\n    await createAuditLog({\n      userId,\n      eventType: EVENT_TYPES.TWO_FA_DISABLED,\n      level: LOG_LEVELS.WARNING,\n      riskLevel: RISK_LEVELS.MEDIUM,\n      description: '2FA disabled',\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      sessionId: req.sessionID\n    });\n    \n    // Send email notification\n    try {\n      await send2FADisabledEmail(user.email, {\n        firstName: user.firstName,\n        ipAddress: req.ip\n      });\n    } catch (emailError) {\n      console.error('Failed to send 2FA disabled email:', emailError);\n    }\n    \n    res.json({\n      success: true,\n      message: '2FA disabled successfully'\n    });\n  } catch (error) {\n    console.error('Disable 2FA error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n};\n\n// Get user sessions\nconst getSessions = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    \n    // Get all sessions for user\n    const sessionPattern = `sess:*`;\n    const sessionKeys = await cache.keys(sessionPattern);\n    \n    const userSessions = [];\n    \n    for (const sessionKey of sessionKeys) {\n      const sessionData = await cache.get(sessionKey);\n      if (sessionData) {\n        try {\n          const session = JSON.parse(sessionData);\n          if (session.userId === userId) {\n            const sessionId = sessionKey.replace('sess:', '');\n            userSessions.push({\n              sessionId,\n              isCurrentSession: sessionId === req.sessionID,\n              ipAddress: session.ipAddress,\n              userAgent: session.userAgent,\n              lastActivity: session.lastActivity,\n              createdAt: session.createdAt\n            });\n          }\n        } catch (e) {\n          // Ignore parsing errors\n        }\n      }\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        sessions: userSessions.sort((a, b) => \n          new Date(b.lastActivity) - new Date(a.lastActivity)\n        )\n      }\n    });\n  } catch (error) {\n    console.error('Get sessions error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n};\n\n// Revoke session\nconst revokeSession = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    const { sessionId } = req.params;\n    \n    if (sessionId === req.sessionID) {\n      return res.status(400).json({\n        success: false,\n        message: 'Cannot revoke current session'\n      });\n    }\n    \n    // Check if session belongs to user\n    const sessionKey = `sess:${sessionId}`;\n    const sessionData = await cache.get(sessionKey);\n    \n    if (!sessionData) {\n      return res.status(404).json({\n        success: false,\n        message: 'Session not found'\n      });\n    }\n    \n    const session = JSON.parse(sessionData);\n    if (session.userId !== userId) {\n      return res.status(403).json({\n        success: false,\n        message: 'Unauthorized to revoke this session'\n      });\n    }\n    \n    // Revoke session\n    await cache.del(sessionKey);\n    \n    // Log session revocation\n    await createAuditLog({\n      userId,\n      eventType: EVENT_TYPES.USER_LOGOUT,\n      level: LOG_LEVELS.INFO,\n      riskLevel: RISK_LEVELS.LOW,\n      description: 'Session revoked by user',\n      metadata: { revokedSessionId: sessionId },\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      sessionId: req.sessionID\n    });\n    \n    res.json({\n      success: true,\n      message: 'Session revoked successfully'\n    });\n  } catch (error) {\n    console.error('Revoke session error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n};\n\n// Revoke all sessions except current\nconst revokeAllSessions = async (req, res) => {\n  try {\n    const userId = req.user.id;\n    \n    // Get all sessions for user\n    const sessionPattern = `sess:*`;\n    const sessionKeys = await cache.keys(sessionPattern);\n    \n    let revokedCount = 0;\n    \n    for (const sessionKey of sessionKeys) {\n      const sessionData = await cache.get(sessionKey);\n      if (sessionData) {\n        try {\n          const session = JSON.parse(sessionData);\n          if (session.userId === userId && sessionKey !== `sess:${req.sessionID}`) {\n            await cache.del(sessionKey);\n            revokedCount++;\n          }\n        } catch (e) {\n          // Ignore parsing errors\n        }\n      }\n    }\n    \n    // Log session revocation\n    await createAuditLog({\n      userId,\n      eventType: EVENT_TYPES.USER_LOGOUT,\n      level: LOG_LEVELS.INFO,\n      riskLevel: RISK_LEVELS.LOW,\n      description: 'All sessions revoked by user',\n      metadata: { revokedSessionsCount: revokedCount },\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      sessionId: req.sessionID\n    });\n    \n    res.json({\n      success: true,\n      message: `${revokedCount} sessions revoked successfully`\n    });\n  } catch (error) {\n    console.error('Revoke all sessions error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n};\n\nmodule.exports = {\n  getProfile,\n  updateProfile,\n  changePassword,\n  enable2FA,\n  verify2FASetup,\n  disable2FA,\n  getSessions,\n  revokeSession,\n  revokeAllSessions\n};"],"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","ignoreList":[]}