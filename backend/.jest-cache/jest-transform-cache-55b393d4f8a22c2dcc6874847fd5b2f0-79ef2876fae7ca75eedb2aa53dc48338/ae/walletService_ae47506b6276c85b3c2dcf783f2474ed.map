{"version":3,"names":["cov_2ogpizxbuj","actualCoverage","crypto","s","require","BIP32Factory","bip39","bitcoin","ecc","bip32","Op","redis","Wallet","Balance","Transaction","User","EventEmitter","WalletService","constructor","f","config","hdWallet","masterSeedEntropy","derivationPaths","ethereum","litecoin","dogecoin","addressGap","maxAddressIndex","multisig","defaultThreshold","maxSigners","minSigners","walletTypes","hot","maxBalance","autoConsolidation","requiresApproval","warm","cold","Infinity","offlineSigningRequired","security","encryptionAlgorithm","keyDerivationRounds","backupRequired","auditTrail","limits","dailyWithdrawalLimit","maxPendingTransactions","consolidationThreshold","dustThreshold","cache","wallets","Map","addresses","balances","networks","testnet","messagePrefix","bech32","public","private","pubKeyHash","scriptHash","wif","initializeService","loadMasterKeys","initializeBlockchainConnections","startBackgroundTasks","console","log","error","createWallet","userId","currency","walletType","b","options","Error","includes","existingWallet","findOne","where","user_id","toLowerCase","wallet_type","status","allowMultiple","walletData","generateWalletData","wallet","create","network","address","public_key","publicKey","derivation_path","derivationPath","address_index","addressIndex","parent_wallet_id","parentWalletId","multisig_config","multisigConfig","is_primary","isPrimary","current_balance","pending_balance","encryption_key_id","encryptionKeyId","backup_status","risk_score","calculateRiskScore","monitoring_enabled","daily_withdrawal_limit","metadata","createdBy","walletVersion","currency_type","getCurrencyType","available","locked","set","id","emit","walletId","currencyLower","generateBitcoinWallet","generateEthereumWallet","generateLitecoinWallet","getNextAddressIndex","masterKey","getMasterKey","childKey","derivePath","multisigData","generateMultisigWallet","singleAddress","payments","p2wpkh","pubkey","toString","generateEncryptionKey","randomBytes","substring","threshold","signers","publicKeys","i","push","Buffer","from","additionalKey","derive","p2wsh","redeem","p2ms","m","pubkeys","map","pk","type","getUserWallets","whereClause","findAll","order","getWalletByAddress","cached","get","include","model","attributes","updateWalletBalance","newBalance","pendingBalance","updateData","last_balance_update","Date","update","generateNewAddress","findByPk","newAddressIndex","newWallet","consolidateWalletFunds","targetWalletType","targetWallet","find","w","sourceWallets","filter","parseFloat","consolidationTxs","sourceWallet","tx","internal_tx_id","generateTransactionId","wallet_id","amount","fee","from_address","to_address","aml_status","notes","consolidationType","sourceWalletId","targetWalletId","transactionCount","length","freezeWallet","reason","adminId","is_frozen","frozen_reason","frozen_by","frozen_at","delete","unfreezeWallet","unfrozen_by","unfrozen_at","getWalletStats","stats","sequelize","fn","col","group","masterKeys","fromSeed","lastWallet","like","riskScores","fiatCurrencies","now","setInterval","performMaintenanceTasks","updateAllBalances","performAutoConsolidation","cleanupCache","maxCacheSize","size","entries","Array","toDelete","slice","key","cleanup","clear","walletService","module","exports"],"sources":["walletService.js"],"sourcesContent":["const crypto = require('crypto');\nconst { BIP32Factory } = require('bip32');\nconst bip39 = require('bip39');\nconst bitcoin = require('bitcoinjs-lib');\nconst ecc = require('tiny-secp256k1');\nconst bip32 = BIP32Factory(ecc);\nconst { Op } = require('sequelize');\nconst redis = require('../config/redis');\nconst Wallet = require('../models/Wallet');\nconst Balance = require('../models/Balance');\nconst Transaction = require('../models/Transaction');\nconst User = require('../models/User');\nconst EventEmitter = require('events');\n\n/**\n * Wallet Service\n * Mengelola sistem dompet multi-signature dengan arsitektur hot/warm/cold wallet,\n * HD wallet generation, address management, dan blockchain integration\n */\nclass WalletService extends EventEmitter {\n  constructor() {\n    super();\n    \n    // Configuration\n    this.config = {\n      // HD Wallet configuration\n      hdWallet: {\n        masterSeedEntropy: 256, // bits\n        derivationPaths: {\n          bitcoin: \"m/44'/0'/0'\",\n          ethereum: \"m/44'/60'/0'\",\n          litecoin: \"m/44'/2'/0'\",\n          dogecoin: \"m/44'/3'/0'\"\n        },\n        addressGap: 20, // unused addresses to maintain\n        maxAddressIndex: 1000000\n      },\n      \n      // Multi-signature configuration\n      multisig: {\n        defaultThreshold: 2,\n        maxSigners: 15,\n        minSigners: 2\n      },\n      \n      // Wallet types and their security levels\n      walletTypes: {\n        hot: {\n          maxBalance: 1000000, // USD equivalent\n          autoConsolidation: true,\n          requiresApproval: false\n        },\n        warm: {\n          maxBalance: 10000000, // USD equivalent\n          autoConsolidation: false,\n          requiresApproval: true\n        },\n        cold: {\n          maxBalance: Infinity,\n          autoConsolidation: false,\n          requiresApproval: true,\n          offlineSigningRequired: true\n        }\n      },\n      \n      // Security settings\n      security: {\n        encryptionAlgorithm: 'aes-256-gcm',\n        keyDerivationRounds: 100000,\n        backupRequired: true,\n        auditTrail: true\n      },\n      \n      // Operational limits\n      limits: {\n        dailyWithdrawalLimit: 100000, // USD\n        maxPendingTransactions: 100,\n        consolidationThreshold: 0.1, // BTC equivalent\n        dustThreshold: 0.00001 // BTC\n      }\n    };\n    \n    // Cache for frequently accessed data\n    this.cache = {\n      wallets: new Map(),\n      addresses: new Map(),\n      balances: new Map()\n    };\n    \n    // Network configurations\n    this.networks = {\n      bitcoin: bitcoin.networks.bitcoin,\n      testnet: bitcoin.networks.testnet,\n      litecoin: {\n        messagePrefix: '\\x19Litecoin Signed Message:\\n',\n        bech32: 'ltc',\n        bip32: {\n          public: 0x019da462,\n          private: 0x019d9cfe\n        },\n        pubKeyHash: 0x30,\n        scriptHash: 0x32,\n        wif: 0xb0\n      }\n    };\n    \n    this.initializeService();\n  }\n  \n  /**\n   * Initialize wallet service\n   */\n  async initializeService() {\n    try {\n      // Load master keys from secure storage\n      await this.loadMasterKeys();\n      \n      // Initialize blockchain connections\n      await this.initializeBlockchainConnections();\n      \n      // Start background tasks\n      this.startBackgroundTasks();\n      \n      console.log('Wallet service initialized successfully');\n      \n    } catch (error) {\n      console.error('Error initializing wallet service:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create new wallet for user\n   */\n  async createWallet(userId, currency, walletType = 'hot', options = {}) {\n    try {\n      // Validate parameters\n      if (!userId || !currency) {\n        throw new Error('User ID and currency are required');\n      }\n      \n      if (!['hot', 'warm', 'cold'].includes(walletType)) {\n        throw new Error('Invalid wallet type');\n      }\n      \n      // Check if user already has a wallet for this currency and type\n      const existingWallet = await Wallet.findOne({\n        where: {\n          user_id: userId,\n          currency: currency.toLowerCase(),\n          wallet_type: walletType,\n          status: 'active'\n        }\n      });\n      \n      if (existingWallet && !options.allowMultiple) {\n        throw new Error(`User already has a ${walletType} wallet for ${currency}`);\n      }\n      \n      // Generate wallet data\n      const walletData = await this.generateWalletData(currency, walletType, options);\n      \n      // Create wallet record\n      const wallet = await Wallet.create({\n        user_id: userId,\n        wallet_type: walletType,\n        currency: currency.toLowerCase(),\n        network: walletData.network,\n        address: walletData.address,\n        public_key: walletData.publicKey,\n        derivation_path: walletData.derivationPath,\n        address_index: walletData.addressIndex,\n        parent_wallet_id: walletData.parentWalletId,\n        multisig_config: walletData.multisigConfig,\n        status: 'active',\n        is_primary: options.isPrimary || false,\n        current_balance: 0,\n        pending_balance: 0,\n        encryption_key_id: walletData.encryptionKeyId,\n        backup_status: 'pending',\n        risk_score: this.calculateRiskScore(walletType),\n        monitoring_enabled: true,\n        daily_withdrawal_limit: this.config.limits.dailyWithdrawalLimit,\n        metadata: {\n          createdBy: 'system',\n          walletVersion: '1.0',\n          ...options.metadata\n        }\n      });\n      \n      // Create initial balance record\n      await Balance.create({\n        user_id: userId,\n        currency: currency.toLowerCase(),\n        currency_type: this.getCurrencyType(currency),\n        available: 0,\n        locked: 0\n      });\n      \n      // Cache wallet\n      this.cache.wallets.set(wallet.id, wallet);\n      \n      // Emit event\n      this.emit('walletCreated', {\n        walletId: wallet.id,\n        userId,\n        currency,\n        walletType,\n        address: wallet.address\n      });\n      \n      return wallet;\n      \n    } catch (error) {\n      console.error('Error creating wallet:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate wallet data based on currency and type\n   */\n  async generateWalletData(currency, walletType, options = {}) {\n    try {\n      const currencyLower = currency.toLowerCase();\n      \n      switch (currencyLower) {\n        case 'btc':\n        case 'bitcoin':\n          return await this.generateBitcoinWallet(walletType, options);\n          \n        case 'eth':\n        case 'ethereum':\n          return await this.generateEthereumWallet(walletType, options);\n          \n        case 'ltc':\n        case 'litecoin':\n          return await this.generateLitecoinWallet(walletType, options);\n          \n        default:\n          throw new Error(`Unsupported currency: ${currency}`);\n      }\n      \n    } catch (error) {\n      console.error(`Error generating wallet data for ${currency}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate Bitcoin wallet\n   */\n  async generateBitcoinWallet(walletType, options = {}) {\n    try {\n      const network = options.testnet ? this.networks.testnet : this.networks.bitcoin;\n      const derivationPath = this.config.hdWallet.derivationPaths.bitcoin;\n      \n      // Get next address index\n      const addressIndex = await this.getNextAddressIndex('bitcoin', derivationPath);\n      \n      // Generate HD wallet\n      const masterKey = await this.getMasterKey('bitcoin');\n      const childKey = masterKey.derivePath(`${derivationPath}/0/${addressIndex}`);\n      \n      let address, publicKey, multisigConfig = null;\n      \n      if (walletType === 'cold' || options.multisig) {\n        // Generate multi-signature wallet\n        const multisigData = await this.generateMultisigWallet('bitcoin', childKey, options);\n        address = multisigData.address;\n        publicKey = multisigData.publicKey;\n        multisigConfig = multisigData.config;\n      } else {\n        // Generate single-signature wallet\n        const { address: singleAddress } = bitcoin.payments.p2wpkh({\n          pubkey: childKey.publicKey,\n          network\n        });\n        address = singleAddress;\n        publicKey = childKey.publicKey.toString('hex');\n      }\n      \n      return {\n        network: network === this.networks.testnet ? 'testnet' : 'mainnet',\n        address,\n        publicKey,\n        derivationPath: `${derivationPath}/0/${addressIndex}`,\n        addressIndex,\n        multisigConfig,\n        encryptionKeyId: await this.generateEncryptionKey()\n      };\n      \n    } catch (error) {\n      console.error('Error generating Bitcoin wallet:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate Ethereum wallet\n   */\n  async generateEthereumWallet(walletType, options = {}) {\n    try {\n      // Ethereum wallet generation logic\n      // This is a simplified implementation\n      const derivationPath = this.config.hdWallet.derivationPaths.ethereum;\n      const addressIndex = await this.getNextAddressIndex('ethereum', derivationPath);\n      \n      // Generate address (simplified)\n      const address = '0x' + crypto.randomBytes(20).toString('hex');\n      const publicKey = crypto.randomBytes(33).toString('hex');\n      \n      return {\n        network: 'mainnet',\n        address,\n        publicKey,\n        derivationPath: `${derivationPath}/0/${addressIndex}`,\n        addressIndex,\n        multisigConfig: null,\n        encryptionKeyId: await this.generateEncryptionKey()\n      };\n      \n    } catch (error) {\n      console.error('Error generating Ethereum wallet:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate Litecoin wallet\n   */\n  async generateLitecoinWallet(walletType, options = {}) {\n    try {\n      const network = this.networks.litecoin;\n      const derivationPath = this.config.hdWallet.derivationPaths.litecoin;\n      const addressIndex = await this.getNextAddressIndex('litecoin', derivationPath);\n      \n      // Generate HD wallet\n      const masterKey = await this.getMasterKey('litecoin');\n      const childKey = masterKey.derivePath(`${derivationPath}/0/${addressIndex}`);\n      \n      // Generate address (simplified for Litecoin)\n      const address = 'L' + crypto.randomBytes(25).toString('base64').substring(0, 33);\n      const publicKey = childKey.publicKey.toString('hex');\n      \n      return {\n        network: 'mainnet',\n        address,\n        publicKey,\n        derivationPath: `${derivationPath}/0/${addressIndex}`,\n        addressIndex,\n        multisigConfig: null,\n        encryptionKeyId: await this.generateEncryptionKey()\n      };\n      \n    } catch (error) {\n      console.error('Error generating Litecoin wallet:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate multi-signature wallet\n   */\n  async generateMultisigWallet(currency, childKey, options = {}) {\n    try {\n      const threshold = options.threshold || this.config.multisig.defaultThreshold;\n      const signers = options.signers || [];\n      \n      // Add current key as first signer\n      const publicKeys = [childKey.publicKey];\n      \n      // Add additional signers\n      for (let i = 1; i < threshold + 1; i++) {\n        if (signers[i - 1]) {\n          publicKeys.push(Buffer.from(signers[i - 1], 'hex'));\n        } else {\n          // Generate additional keys for multi-sig\n          const additionalKey = childKey.derive(i);\n          publicKeys.push(additionalKey.publicKey);\n        }\n      }\n      \n      // Create multi-sig address\n      const network = currency === 'bitcoin' ? this.networks.bitcoin : this.networks.testnet;\n      const { address } = bitcoin.payments.p2wsh({\n        redeem: bitcoin.payments.p2ms({\n          m: threshold,\n          pubkeys: publicKeys,\n          network\n        }),\n        network\n      });\n      \n      return {\n        address,\n        publicKey: childKey.publicKey.toString('hex'),\n        config: {\n          threshold,\n          signers: publicKeys.map(pk => pk.toString('hex')),\n          type: 'p2wsh'\n        }\n      };\n      \n    } catch (error) {\n      console.error('Error generating multi-signature wallet:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get user wallets\n   */\n  async getUserWallets(userId, currency = null, walletType = null) {\n    try {\n      const whereClause = {\n        user_id: userId,\n        status: 'active'\n      };\n      \n      if (currency) {\n        whereClause.currency = currency.toLowerCase();\n      }\n      \n      if (walletType) {\n        whereClause.wallet_type = walletType;\n      }\n      \n      const wallets = await Wallet.findAll({\n        where: whereClause,\n        order: [['created_at', 'DESC']]\n      });\n      \n      return wallets;\n      \n    } catch (error) {\n      console.error('Error getting user wallets:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get wallet by address\n   */\n  async getWalletByAddress(address) {\n    try {\n      // Check cache first\n      const cached = this.cache.addresses.get(address);\n      if (cached) {\n        return cached;\n      }\n      \n      const wallet = await Wallet.findOne({\n        where: { address, status: 'active' },\n        include: [{\n          model: User,\n          attributes: ['id', 'username', 'email']\n        }]\n      });\n      \n      if (wallet) {\n        this.cache.addresses.set(address, wallet);\n      }\n      \n      return wallet;\n      \n    } catch (error) {\n      console.error('Error getting wallet by address:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Update wallet balance\n   */\n  async updateWalletBalance(walletId, newBalance, pendingBalance = null) {\n    try {\n      const updateData = {\n        current_balance: newBalance,\n        last_balance_update: new Date()\n      };\n      \n      if (pendingBalance !== null) {\n        updateData.pending_balance = pendingBalance;\n      }\n      \n      await Wallet.update(updateData, {\n        where: { id: walletId }\n      });\n      \n      // Update cache\n      const wallet = this.cache.wallets.get(walletId);\n      if (wallet) {\n        wallet.current_balance = newBalance;\n        if (pendingBalance !== null) {\n          wallet.pending_balance = pendingBalance;\n        }\n        wallet.last_balance_update = new Date();\n      }\n      \n      // Emit event\n      this.emit('balanceUpdated', {\n        walletId,\n        newBalance,\n        pendingBalance\n      });\n      \n      return true;\n      \n    } catch (error) {\n      console.error('Error updating wallet balance:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate new address for wallet\n   */\n  async generateNewAddress(walletId) {\n    try {\n      const wallet = await Wallet.findByPk(walletId);\n      \n      if (!wallet) {\n        throw new Error('Wallet not found');\n      }\n      \n      // Generate new address based on HD wallet\n      const newAddressIndex = wallet.address_index + 1;\n      const walletData = await this.generateWalletData(\n        wallet.currency,\n        wallet.wallet_type,\n        {\n          addressIndex: newAddressIndex,\n          parentWalletId: wallet.parent_wallet_id\n        }\n      );\n      \n      // Create new wallet record for the new address\n      const newWallet = await Wallet.create({\n        user_id: wallet.user_id,\n        wallet_type: wallet.wallet_type,\n        currency: wallet.currency,\n        network: wallet.network,\n        address: walletData.address,\n        public_key: walletData.publicKey,\n        derivation_path: walletData.derivationPath,\n        address_index: newAddressIndex,\n        parent_wallet_id: wallet.id,\n        multisig_config: wallet.multisig_config,\n        status: 'active',\n        is_primary: false,\n        current_balance: 0,\n        pending_balance: 0,\n        encryption_key_id: walletData.encryptionKeyId,\n        backup_status: 'pending',\n        risk_score: wallet.risk_score,\n        monitoring_enabled: true,\n        daily_withdrawal_limit: wallet.daily_withdrawal_limit\n      });\n      \n      return newWallet;\n      \n    } catch (error) {\n      console.error('Error generating new address:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Consolidate wallet funds\n   */\n  async consolidateWalletFunds(userId, currency, targetWalletType = 'hot') {\n    try {\n      // Get all wallets for user and currency\n      const wallets = await this.getUserWallets(userId, currency);\n      \n      // Find target wallet\n      const targetWallet = wallets.find(w => w.wallet_type === targetWalletType && w.is_primary);\n      \n      if (!targetWallet) {\n        throw new Error(`Target ${targetWalletType} wallet not found`);\n      }\n      \n      // Find wallets with balance to consolidate\n      const sourceWallets = wallets.filter(w => \n        w.id !== targetWallet.id && \n        parseFloat(w.current_balance) > this.config.limits.dustThreshold\n      );\n      \n      const consolidationTxs = [];\n      \n      for (const sourceWallet of sourceWallets) {\n        // Create consolidation transaction\n        const tx = await Transaction.create({\n          internal_tx_id: this.generateTransactionId(),\n          user_id: userId,\n          wallet_id: sourceWallet.id,\n          type: 'internal_transfer',\n          currency: currency.toLowerCase(),\n          amount: sourceWallet.current_balance,\n          fee: 0,\n          from_address: sourceWallet.address,\n          to_address: targetWallet.address,\n          status: 'pending',\n          risk_score: 1, // Low risk for internal transfers\n          aml_status: 'approved',\n          notes: 'Wallet consolidation',\n          metadata: {\n            consolidationType: 'automatic',\n            sourceWalletId: sourceWallet.id,\n            targetWalletId: targetWallet.id\n          }\n        });\n        \n        consolidationTxs.push(tx);\n      }\n      \n      // Emit event\n      this.emit('consolidationStarted', {\n        userId,\n        currency,\n        targetWalletId: targetWallet.id,\n        transactionCount: consolidationTxs.length\n      });\n      \n      return consolidationTxs;\n      \n    } catch (error) {\n      console.error('Error consolidating wallet funds:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Freeze wallet\n   */\n  async freezeWallet(walletId, reason, adminId) {\n    try {\n      await Wallet.update({\n        is_frozen: true,\n        frozen_reason: reason,\n        frozen_by: adminId,\n        frozen_at: new Date()\n      }, {\n        where: { id: walletId }\n      });\n      \n      // Clear cache\n      this.cache.wallets.delete(walletId);\n      \n      // Emit event\n      this.emit('walletFrozen', {\n        walletId,\n        reason,\n        adminId\n      });\n      \n      return true;\n      \n    } catch (error) {\n      console.error('Error freezing wallet:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Unfreeze wallet\n   */\n  async unfreezeWallet(walletId, adminId) {\n    try {\n      await Wallet.update({\n        is_frozen: false,\n        frozen_reason: null,\n        frozen_by: null,\n        frozen_at: null,\n        unfrozen_by: adminId,\n        unfrozen_at: new Date()\n      }, {\n        where: { id: walletId }\n      });\n      \n      // Clear cache\n      this.cache.wallets.delete(walletId);\n      \n      // Emit event\n      this.emit('walletUnfrozen', {\n        walletId,\n        adminId\n      });\n      \n      return true;\n      \n    } catch (error) {\n      console.error('Error unfreezing wallet:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get wallet statistics\n   */\n  async getWalletStats(userId = null) {\n    try {\n      const whereClause = { status: 'active' };\n      if (userId) {\n        whereClause.user_id = userId;\n      }\n      \n      const stats = await Wallet.findAll({\n        where: whereClause,\n        attributes: [\n          'wallet_type',\n          'currency',\n          [Wallet.sequelize.fn('COUNT', '*'), 'count'],\n          [Wallet.sequelize.fn('SUM', Wallet.sequelize.col('current_balance')), 'total_balance']\n        ],\n        group: ['wallet_type', 'currency']\n      });\n      \n      return stats;\n      \n    } catch (error) {\n      console.error('Error getting wallet statistics:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Helper methods\n   */\n  \n  async loadMasterKeys() {\n    // Load master keys from secure storage\n    // This is a simplified implementation\n    this.masterKeys = {\n      bitcoin: bip32.fromSeed(crypto.randomBytes(64)),\n      ethereum: bip32.fromSeed(crypto.randomBytes(64)),\n      litecoin: bip32.fromSeed(crypto.randomBytes(64))\n    };\n  }\n  \n  async getMasterKey(currency) {\n    return this.masterKeys[currency.toLowerCase()];\n  }\n  \n  async getNextAddressIndex(currency, derivationPath) {\n    // Get next available address index\n    const lastWallet = await Wallet.findOne({\n      where: {\n        currency: currency.toLowerCase(),\n        derivation_path: {\n          [Op.like]: `${derivationPath}%`\n        }\n      },\n      order: [['address_index', 'DESC']]\n    });\n    \n    return lastWallet ? lastWallet.address_index + 1 : 0;\n  }\n  \n  async generateEncryptionKey() {\n    // Generate encryption key ID\n    return crypto.randomBytes(16).toString('hex');\n  }\n  \n  calculateRiskScore(walletType) {\n    const riskScores = {\n      hot: 3,\n      warm: 2,\n      cold: 1\n    };\n    \n    return riskScores[walletType] || 3;\n  }\n  \n  getCurrencyType(currency) {\n    const fiatCurrencies = ['usd', 'eur', 'gbp', 'jpy', 'cny'];\n    return fiatCurrencies.includes(currency.toLowerCase()) ? 'fiat' : 'crypto';\n  }\n  \n  generateTransactionId() {\n    return 'tx_' + Date.now() + '_' + crypto.randomBytes(8).toString('hex');\n  }\n  \n  async initializeBlockchainConnections() {\n    // Initialize blockchain connections\n    console.log('Initializing blockchain connections...');\n  }\n  \n  startBackgroundTasks() {\n    // Start background tasks like balance updates, consolidation, etc.\n    setInterval(() => {\n      this.performMaintenanceTasks();\n    }, 300000); // Every 5 minutes\n  }\n  \n  async performMaintenanceTasks() {\n    try {\n      // Update balances\n      await this.updateAllBalances();\n      \n      // Perform auto-consolidation\n      await this.performAutoConsolidation();\n      \n      // Clean up cache\n      this.cleanupCache();\n      \n    } catch (error) {\n      console.error('Error performing maintenance tasks:', error);\n    }\n  }\n  \n  async updateAllBalances() {\n    // Update all wallet balances from blockchain\n    console.log('Updating wallet balances...');\n  }\n  \n  async performAutoConsolidation() {\n    // Perform automatic consolidation for hot wallets\n    console.log('Performing auto-consolidation...');\n  }\n  \n  cleanupCache() {\n    // Clean up old cache entries\n    const maxCacheSize = 1000;\n    \n    if (this.cache.wallets.size > maxCacheSize) {\n      const entries = Array.from(this.cache.wallets.entries());\n      const toDelete = entries.slice(0, entries.length - maxCacheSize);\n      \n      for (const [key] of toDelete) {\n        this.cache.wallets.delete(key);\n      }\n    }\n  }\n  \n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    // Clear caches\n    this.cache.wallets.clear();\n    this.cache.addresses.clear();\n    this.cache.balances.clear();\n    \n    console.log('Wallet service cleaned up');\n  }\n}\n\n// Create singleton instance\nconst walletService = new WalletService();\n\nmodule.exports = walletService;"],"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","ignoreList":[]}