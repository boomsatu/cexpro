{"version":3,"names":["cov_1044trggvh","actualCoverage","express","s","require","rateLimit","body","validationResult","passport","GoogleStrategy","Strategy","crypto","speakeasy","User","generateTokens","verifyToken","blacklistToken","requireAuth","optionalAuth","cache","session","emailService","smsService","auditLogger","router","Router","authLimiter","windowMs","max","message","error","code","standardHeaders","legacyHeaders","registerLimiter","validateRegister","isEmail","normalizeEmail","withMessage","isLength","min","isAlphanumeric","matches","trim","optional","isISO8601","toDate","equals","validateLogin","notEmpty","isNumeric","validate2FA","handleValidationErrors","req","res","next","f","errors","isEmpty","b","status","json","details","array","post","email","username","password","firstName","lastName","phoneNumber","dateOfBirth","country","existingUser","findOne","where","sequelize","Op","or","field","user","create","verificationToken","generateEmailVerificationToken","save","sendVerificationEmail","log","action","userId","id","ip","userAgent","get","nextStep","console","name","identifier","twoFactorCode","rememberMe","findByEmailOrUsername","isLocked","success","lockUntil","isPasswordValid","comparePassword","incLoginAttempts","reason","twoFactorEnabled","tempToken","jwt","sign","step","process","env","JWT_SECRET","expiresIn","is2FAValid","verify2FA","useBackupCode","resetLoginAttempts","update","lastLoginAt","Date","lastLoginIp","accessToken","refreshToken","sessionId","randomUUID","twoFactorVerified","cookieOptions","httpOnly","secure","NODE_ENV","sameSite","maxAge","cookie","toJSON","tokens","token","allDevices","cookies","destroy","destroyAllUserSessions","clearCookie","decoded","type","findByPk","findByEmailVerificationToken","emailVerified","emailVerificationToken","emailVerificationExpires","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\nconst crypto = require('crypto');\nconst speakeasy = require('speakeasy');\nconst User = require('../models/User');\nconst { generateTokens, verifyToken, blacklistToken, requireAuth, optionalAuth } = require('../middleware/auth');\nconst { cache, session } = require('../config/redis');\nconst emailService = require('../services/emailService');\nconst smsService = require('../services/smsService');\nconst auditLogger = require('../services/auditLogger');\n\nconst router = express.Router();\n\n// Rate limiting for auth endpoints\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: {\n    error: 'Too many authentication attempts, please try again later.',\n    code: 'AUTH_RATE_LIMIT_EXCEEDED'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst registerLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 3, // limit each IP to 3 registration attempts per hour\n  message: {\n    error: 'Too many registration attempts, please try again later.',\n    code: 'REGISTER_RATE_LIMIT_EXCEEDED'\n  }\n});\n\n// Validation middleware\nconst validateRegister = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('username')\n    .isLength({ min: 3, max: 30 })\n    .isAlphanumeric()\n    .withMessage('Username must be 3-30 alphanumeric characters'),\n  body('password')\n    .isLength({ min: 8 })\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n    .withMessage('Password must be at least 8 characters with uppercase, lowercase, number and special character'),\n  body('firstName')\n    .isLength({ min: 1, max: 50 })\n    .trim()\n    .withMessage('First name is required (1-50 characters)'),\n  body('lastName')\n    .isLength({ min: 1, max: 50 })\n    .trim()\n    .withMessage('Last name is required (1-50 characters)'),\n  body('country')\n    .optional()\n    .isLength({ min: 2, max: 2 })\n    .withMessage('Country code must be 2 characters'),\n  body('phoneNumber')\n    .optional()\n    .matches(/^\\+?[1-9]\\d{1,14}$/)\n    .withMessage('Valid phone number is required'),\n  body('dateOfBirth')\n    .optional()\n    .isISO8601()\n    .toDate()\n    .withMessage('Valid date of birth is required'),\n  body('termsAccepted')\n    .equals('true')\n    .withMessage('Terms and conditions must be accepted')\n];\n\nconst validateLogin = [\n  body('identifier')\n    .notEmpty()\n    .withMessage('Email or username is required'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required'),\n  body('twoFactorCode')\n    .optional()\n    .isLength({ min: 6, max: 6 })\n    .isNumeric()\n    .withMessage('2FA code must be 6 digits')\n];\n\nconst validate2FA = [\n  body('code')\n    .isLength({ min: 6, max: 6 })\n    .isNumeric()\n    .withMessage('2FA code must be 6 digits')\n];\n\n// Helper function to handle validation errors\nconst handleValidationErrors = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: 'Validation failed',\n      code: 'VALIDATION_ERROR',\n      details: errors.array()\n    });\n  }\n  next();\n};\n\n// Register endpoint\nrouter.post('/register', registerLimiter, validateRegister, handleValidationErrors, async (req, res) => {\n  try {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      lastName,\n      phoneNumber,\n      dateOfBirth,\n      country\n    } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({\n      where: {\n        [User.sequelize.Op.or]: [\n          { email },\n          { username }\n        ]\n      }\n    });\n\n    if (existingUser) {\n      return res.status(409).json({\n        error: 'User already exists',\n        code: 'USER_EXISTS',\n        field: existingUser.email === email ? 'email' : 'username'\n      });\n    }\n\n    // Create new user\n    const user = await User.create({\n      email,\n      username,\n      password,\n      firstName,\n      lastName,\n      phoneNumber,\n      dateOfBirth,\n      country\n    });\n\n    // Generate email verification token\n    const verificationToken = user.generateEmailVerificationToken();\n    await user.save();\n\n    // Send verification email\n    await emailService.sendVerificationEmail(user.email, verificationToken, {\n      firstName: user.firstName,\n      username: user.username\n    });\n\n    // Log registration\n    await auditLogger.log({\n      action: 'USER_REGISTER',\n      userId: user.id,\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      details: {\n        email: user.email,\n        username: user.username\n      }\n    });\n\n    res.status(201).json({\n      message: 'User registered successfully',\n      user: {\n        id: user.id,\n        email: user.email,\n        username: user.username,\n        status: user.status\n      },\n      nextStep: 'EMAIL_VERIFICATION'\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    \n    if (error.name === 'SequelizeUniqueConstraintError') {\n      return res.status(409).json({\n        error: 'User already exists',\n        code: 'USER_EXISTS'\n      });\n    }\n\n    res.status(500).json({\n      error: 'Registration failed',\n      code: 'REGISTRATION_ERROR'\n    });\n  }\n});\n\n// Login endpoint\nrouter.post('/login', authLimiter, validateLogin, handleValidationErrors, async (req, res) => {\n  try {\n    const { identifier, password, twoFactorCode, rememberMe } = req.body;\n    const ip = req.ip;\n    const userAgent = req.get('User-Agent');\n\n    // Find user by email or username\n    const user = await User.findByEmailOrUsername(identifier);\n    if (!user) {\n      return res.status(401).json({\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n    }\n\n    // Check if account is locked\n    if (user.isLocked()) {\n      await auditLogger.log({\n        action: 'LOGIN_ATTEMPT_LOCKED',\n        userId: user.id,\n        ip,\n        userAgent,\n        success: false\n      });\n\n      return res.status(423).json({\n        error: 'Account is temporarily locked due to too many failed login attempts',\n        code: 'ACCOUNT_LOCKED',\n        lockUntil: user.lockUntil\n      });\n    }\n\n    // Verify password\n    const isPasswordValid = await user.comparePassword(password);\n    if (!isPasswordValid) {\n      await user.incLoginAttempts();\n      \n      await auditLogger.log({\n        action: 'LOGIN_FAILED',\n        userId: user.id,\n        ip,\n        userAgent,\n        success: false,\n        reason: 'INVALID_PASSWORD'\n      });\n\n      return res.status(401).json({\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n    }\n\n    // Check account status\n    if (user.status !== 'active') {\n      await auditLogger.log({\n        action: 'LOGIN_FAILED',\n        userId: user.id,\n        ip,\n        userAgent,\n        success: false,\n        reason: 'ACCOUNT_INACTIVE'\n      });\n\n      return res.status(401).json({\n        error: 'Account is not active',\n        code: 'ACCOUNT_INACTIVE',\n        status: user.status\n      });\n    }\n\n    // Check 2FA if enabled\n    if (user.twoFactorEnabled) {\n      if (!twoFactorCode) {\n        return res.status(200).json({\n          message: '2FA code required',\n          code: 'TWO_FA_REQUIRED',\n          tempToken: jwt.sign(\n            { userId: user.id, step: '2fa' },\n            process.env.JWT_SECRET,\n            { expiresIn: '5m' }\n          )\n        });\n      }\n\n      // Verify 2FA code\n      const is2FAValid = user.verify2FA(twoFactorCode) || await user.useBackupCode(twoFactorCode);\n      if (!is2FAValid) {\n        await user.incLoginAttempts();\n        \n        await auditLogger.log({\n          action: 'LOGIN_FAILED',\n          userId: user.id,\n          ip,\n          userAgent,\n          success: false,\n          reason: 'INVALID_2FA'\n        });\n\n        return res.status(401).json({\n          error: 'Invalid 2FA code',\n          code: 'INVALID_2FA_CODE'\n        });\n      }\n    }\n\n    // Reset login attempts on successful login\n    await user.resetLoginAttempts();\n\n    // Update last login info\n    await user.update({\n      lastLoginAt: new Date(),\n      lastLoginIp: ip\n    });\n\n    // Generate tokens\n    const { accessToken, refreshToken } = generateTokens(user);\n\n    // Create session\n    const sessionId = crypto.randomUUID();\n    await session.create(sessionId, user.id, {\n      ip,\n      userAgent,\n      twoFactorVerified: user.twoFactorEnabled\n    });\n\n    // Set cookies\n    const cookieOptions = {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: rememberMe ? 7 * 24 * 60 * 60 * 1000 : 24 * 60 * 60 * 1000 // 7 days or 1 day\n    };\n\n    res.cookie('accessToken', accessToken, cookieOptions);\n    res.cookie('refreshToken', refreshToken, {\n      ...cookieOptions,\n      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n    });\n    res.cookie('sessionId', sessionId, cookieOptions);\n\n    // Log successful login\n    await auditLogger.log({\n      action: 'LOGIN_SUCCESS',\n      userId: user.id,\n      ip,\n      userAgent,\n      success: true\n    });\n\n    res.json({\n      message: 'Login successful',\n      user: user.toJSON(),\n      tokens: {\n        accessToken,\n        refreshToken\n      },\n      sessionId\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      error: 'Login failed',\n      code: 'LOGIN_ERROR'\n    });\n  }\n});\n\n// Logout endpoint\nrouter.post('/logout', requireAuth, async (req, res) => {\n  try {\n    const { token, user } = req;\n    const { allDevices } = req.body;\n\n    // Blacklist current token\n    await blacklistToken(token);\n\n    // Destroy session\n    if (req.cookies.sessionId) {\n      await session.destroy(req.cookies.sessionId);\n    }\n\n    // If logout from all devices, destroy all user sessions\n    if (allDevices) {\n      await session.destroyAllUserSessions(user.id);\n    }\n\n    // Clear cookies\n    res.clearCookie('accessToken');\n    res.clearCookie('refreshToken');\n    res.clearCookie('sessionId');\n\n    // Log logout\n    await auditLogger.log({\n      action: 'LOGOUT',\n      userId: user.id,\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      details: { allDevices }\n    });\n\n    res.json({\n      message: 'Logout successful'\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({\n      error: 'Logout failed',\n      code: 'LOGOUT_ERROR'\n    });\n  }\n});\n\n// Refresh token endpoint\nrouter.post('/refresh', async (req, res) => {\n  try {\n    let refreshToken = req.body.refreshToken || req.cookies.refreshToken;\n\n    if (!refreshToken) {\n      return res.status(401).json({\n        error: 'Refresh token required',\n        code: 'REFRESH_TOKEN_REQUIRED'\n      });\n    }\n\n    // Verify refresh token\n    const decoded = verifyToken(refreshToken);\n    if (decoded.type !== 'refresh') {\n      return res.status(401).json({\n        error: 'Invalid token type',\n        code: 'INVALID_TOKEN_TYPE'\n      });\n    }\n\n    // Get user\n    const user = await User.findByPk(decoded.id);\n    if (!user || user.status !== 'active') {\n      return res.status(401).json({\n        error: 'User not found or inactive',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n\n    // Generate new tokens\n    const tokens = generateTokens(user);\n\n    // Update cookies\n    const cookieOptions = {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 24 * 60 * 60 * 1000 // 1 day\n    };\n\n    res.cookie('accessToken', tokens.accessToken, cookieOptions);\n    res.cookie('refreshToken', tokens.refreshToken, {\n      ...cookieOptions,\n      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n    });\n\n    res.json({\n      message: 'Token refreshed successfully',\n      tokens\n    });\n  } catch (error) {\n    console.error('Token refresh error:', error);\n    \n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        error: 'Refresh token expired',\n        code: 'REFRESH_TOKEN_EXPIRED'\n      });\n    }\n\n    res.status(401).json({\n      error: 'Invalid refresh token',\n      code: 'INVALID_REFRESH_TOKEN'\n    });\n  }\n});\n\n// Get current user\nrouter.get('/me', requireAuth, async (req, res) => {\n  res.json({\n    user: req.user.toJSON()\n  });\n});\n\n// Email verification\nrouter.post('/verify-email', async (req, res) => {\n  try {\n    const { token } = req.body;\n\n    if (!token) {\n      return res.status(400).json({\n        error: 'Verification token required',\n        code: 'TOKEN_REQUIRED'\n      });\n    }\n\n    const user = await User.findByEmailVerificationToken(token);\n    if (!user) {\n      return res.status(400).json({\n        error: 'Invalid or expired verification token',\n        code: 'INVALID_TOKEN'\n      });\n    }\n\n    // Update user\n    await user.update({\n      emailVerified: true,\n      status: 'active',\n      emailVerificationToken: null,\n      emailVerificationExpires: null\n    });\n\n    // Log email verification\n    await auditLogger.log({\n      action: 'EMAIL_VERIFIED',\n      userId: user.id,\n      ip: req.ip,\n      userAgent: req.get('User-Agent')\n    });\n\n    res.json({\n      message: 'Email verified successfully',\n      user: user.toJSON()\n    });\n  } catch (error) {\n    console.error('Email verification error:', error);\n    res.status(500).json({\n      error: 'Email verification failed',\n      code: 'VERIFICATION_ERROR'\n    });\n  }\n});\n\n// Resend verification email\nrouter.post('/resend-verification', authLimiter, async (req, res) => {\n  try {\n    const { email } = req.body;\n\n    const user = await User.findOne({ where: { email } });\n    if (!user) {\n      // Don't reveal if email exists\n      return res.json({\n        message: 'If the email exists, a verification email has been sent'\n      });\n    }\n\n    if (user.emailVerified) {\n      return res.status(400).json({\n        error: 'Email is already verified',\n        code: 'EMAIL_ALREADY_VERIFIED'\n      });\n    }\n\n    // Generate new verification token\n    const verificationToken = user.generateEmailVerificationToken();\n    await user.save();\n\n    // Send verification email\n    await emailService.sendVerificationEmail(user.email, verificationToken, {\n      firstName: user.firstName,\n      username: user.username\n    });\n\n    res.json({\n      message: 'Verification email sent'\n    });\n  } catch (error) {\n    console.error('Resend verification error:', error);\n    res.status(500).json({\n      error: 'Failed to send verification email',\n      code: 'VERIFICATION_SEND_ERROR'\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}