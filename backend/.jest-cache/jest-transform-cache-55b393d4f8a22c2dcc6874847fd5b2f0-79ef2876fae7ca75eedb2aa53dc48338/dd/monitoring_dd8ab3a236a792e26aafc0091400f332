e77926985c511c0d7d473a524066c212
/* istanbul ignore next */
function cov_2pivpd8143() {
  var path = "C:\\Users\\mawan\\OneDrive\\Desktop\\CexProject\\backend\\src\\routes\\monitoring.js";
  var hash = "3fceea76823222db7fd8f67254b2de9a28932b97";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\mawan\\OneDrive\\Desktop\\CexProject\\backend\\src\\routes\\monitoring.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 15
        },
        end: {
          line: 2,
          column: 31
        }
      },
      "2": {
        start: {
          line: 3,
          column: 27
        },
        end: {
          line: 3,
          column: 68
        }
      },
      "3": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 58
        }
      },
      "4": {
        start: {
          line: 5,
          column: 23
        },
        end: {
          line: 5,
          column: 57
        }
      },
      "5": {
        start: {
          line: 6,
          column: 14
        },
        end: {
          line: 6,
          column: 40
        }
      },
      "6": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 48
        }
      },
      "7": {
        start: {
          line: 8,
          column: 13
        },
        end: {
          line: 8,
          column: 42
        }
      },
      "8": {
        start: {
          line: 9,
          column: 30
        },
        end: {
          line: 9,
          column: 64
        }
      },
      "9": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 16,
          column: 2
        }
      },
      "10": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 57
        }
      },
      "11": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 78,
          column: 3
        }
      },
      "12": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 77,
          column: 3
        }
      },
      "13": {
        start: {
          line: 24,
          column: 19
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "14": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "15": {
        start: {
          line: 34,
          column: 6
        },
        end: {
          line: 34,
          column: 37
        }
      },
      "16": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 68
        }
      },
      "17": {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 37,
          column: 73
        }
      },
      "18": {
        start: {
          line: 38,
          column: 6
        },
        end: {
          line: 38,
          column: 33
        }
      },
      "19": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "20": {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 43,
          column: 32
        }
      },
      "21": {
        start: {
          line: 44,
          column: 6
        },
        end: {
          line: 44,
          column: 60
        }
      },
      "22": {
        start: {
          line: 46,
          column: 6
        },
        end: {
          line: 46,
          column: 70
        }
      },
      "23": {
        start: {
          line: 47,
          column: 6
        },
        end: {
          line: 47,
          column: 33
        }
      },
      "24": {
        start: {
          line: 51,
          column: 21
        },
        end: {
          line: 51,
          column: 42
        }
      },
      "25": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "26": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 31
        }
      },
      "27": {
        start: {
          line: 62,
          column: 21
        },
        end: {
          line: 62,
          column: 39
        }
      },
      "28": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 66,
          column: 6
        }
      },
      "29": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 62
        }
      },
      "30": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 40
        }
      },
      "31": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 76,
          column: 7
        }
      },
      "32": {
        start: {
          line: 81,
          column: 0
        },
        end: {
          line: 109,
          column: 3
        }
      },
      "33": {
        start: {
          line: 82,
          column: 2
        },
        end: {
          line: 108,
          column: 3
        }
      },
      "34": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 65
        }
      },
      "35": {
        start: {
          line: 84,
          column: 30
        },
        end: {
          line: 84,
          column: 53
        }
      },
      "36": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 57
        }
      },
      "37": {
        start: {
          line: 87,
          column: 28
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "38": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 30
        }
      },
      "39": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 107,
          column: 7
        }
      },
      "40": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 131,
          column: 3
        }
      },
      "41": {
        start: {
          line: 113,
          column: 2
        },
        end: {
          line: 130,
          column: 3
        }
      },
      "42": {
        start: {
          line: 114,
          column: 28
        },
        end: {
          line: 114,
          column: 65
        }
      },
      "43": {
        start: {
          line: 115,
          column: 32
        },
        end: {
          line: 115,
          column: 77
        }
      },
      "44": {
        start: {
          line: 116,
          column: 33
        },
        end: {
          line: 116,
          column: 71
        }
      },
      "45": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 123,
          column: 7
        }
      },
      "46": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 129,
          column: 7
        }
      },
      "47": {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 160,
          column: 3
        }
      },
      "48": {
        start: {
          line: 135,
          column: 2
        },
        end: {
          line: 159,
          column: 3
        }
      },
      "49": {
        start: {
          line: 136,
          column: 33
        },
        end: {
          line: 136,
          column: 41
        }
      },
      "50": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "51": {
        start: {
          line: 139,
          column: 6
        },
        end: {
          line: 139,
          column: 70
        }
      },
      "52": {
        start: {
          line: 142,
          column: 21
        },
        end: {
          line: 142,
          column: 71
        }
      },
      "53": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "54": {
        start: {
          line: 145,
          column: 6
        },
        end: {
          line: 145,
          column: 77
        }
      },
      "55": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 152,
          column: 7
        }
      },
      "56": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 158,
          column: 7
        }
      },
      "57": {
        start: {
          line: 163,
          column: 0
        },
        end: {
          line: 214,
          column: 3
        }
      },
      "58": {
        start: {
          line: 164,
          column: 2
        },
        end: {
          line: 213,
          column: 3
        }
      },
      "59": {
        start: {
          line: 166,
          column: 22
        },
        end: {
          line: 166,
          column: 47
        }
      },
      "60": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 167,
          column: 57
        }
      },
      "61": {
        start: {
          line: 168,
          column: 23
        },
        end: {
          line: 168,
          column: 55
        }
      },
      "62": {
        start: {
          line: 171,
          column: 27
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "63": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 172,
          column: 38
        }
      },
      "64": {
        start: {
          line: 173,
          column: 21
        },
        end: {
          line: 173,
          column: 23
        }
      },
      "65": {
        start: {
          line: 174,
          column: 6
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "66": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "67": {
        start: {
          line: 176,
          column: 31
        },
        end: {
          line: 176,
          column: 46
        }
      },
      "68": {
        start: {
          line: 177,
          column: 10
        },
        end: {
          line: 177,
          column: 61
        }
      },
      "69": {
        start: {
          line: 180,
          column: 6
        },
        end: {
          line: 180,
          column: 20
        }
      },
      "70": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 183,
          column: 50
        }
      },
      "71": {
        start: {
          line: 184,
          column: 22
        },
        end: {
          line: 184,
          column: 48
        }
      },
      "72": {
        start: {
          line: 187,
          column: 31
        },
        end: {
          line: 187,
          column: 76
        }
      },
      "73": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 206,
          column: 7
        }
      },
      "74": {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 212,
          column: 7
        }
      },
      "75": {
        start: {
          line: 217,
          column: 0
        },
        end: {
          line: 232,
          column: 3
        }
      },
      "76": {
        start: {
          line: 218,
          column: 2
        },
        end: {
          line: 231,
          column: 3
        }
      },
      "77": {
        start: {
          line: 219,
          column: 18
        },
        end: {
          line: 219,
          column: 41
        }
      },
      "78": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 224,
          column: 7
        }
      },
      "79": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 230,
          column: 7
        }
      },
      "80": {
        start: {
          line: 235,
          column: 0
        },
        end: {
          line: 255,
          column: 3
        }
      },
      "81": {
        start: {
          line: 236,
          column: 2
        },
        end: {
          line: 254,
          column: 3
        }
      },
      "82": {
        start: {
          line: 237,
          column: 27
        },
        end: {
          line: 237,
          column: 36
        }
      },
      "83": {
        start: {
          line: 240,
          column: 24
        },
        end: {
          line: 240,
          column: 78
        }
      },
      "84": {
        start: {
          line: 241,
          column: 26
        },
        end: {
          line: 241,
          column: 69
        }
      },
      "85": {
        start: {
          line: 241,
          column: 51
        },
        end: {
          line: 241,
          column: 68
        }
      },
      "86": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 247,
          column: 7
        }
      },
      "87": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 253,
          column: 7
        }
      },
      "88": {
        start: {
          line: 258,
          column: 0
        },
        end: {
          line: 282,
          column: 3
        }
      },
      "89": {
        start: {
          line: 259,
          column: 2
        },
        end: {
          line: 281,
          column: 3
        }
      },
      "90": {
        start: {
          line: 260,
          column: 22
        },
        end: {
          line: 260,
          column: 31
        }
      },
      "91": {
        start: {
          line: 261,
          column: 22
        },
        end: {
          line: 261,
          column: 90
        }
      },
      "92": {
        start: {
          line: 264,
          column: 19
        },
        end: {
          line: 264,
          column: 72
        }
      },
      "93": {
        start: {
          line: 265,
          column: 25
        },
        end: {
          line: 268,
          column: 68
        }
      },
      "94": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 37
        }
      },
      "95": {
        start: {
          line: 267,
          column: 23
        },
        end: {
          line: 267,
          column: 61
        }
      },
      "96": {
        start: {
          line: 268,
          column: 22
        },
        end: {
          line: 268,
          column: 67
        }
      },
      "97": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 274,
          column: 7
        }
      },
      "98": {
        start: {
          line: 277,
          column: 4
        },
        end: {
          line: 280,
          column: 7
        }
      },
      "99": {
        start: {
          line: 285,
          column: 0
        },
        end: {
          line: 316,
          column: 3
        }
      },
      "100": {
        start: {
          line: 286,
          column: 2
        },
        end: {
          line: 315,
          column: 3
        }
      },
      "101": {
        start: {
          line: 287,
          column: 15
        },
        end: {
          line: 287,
          column: 28
        }
      },
      "102": {
        start: {
          line: 289,
          column: 22
        },
        end: {
          line: 306,
          column: 5
        }
      },
      "103": {
        start: {
          line: 308,
          column: 4
        },
        end: {
          line: 308,
          column: 24
        }
      },
      "104": {
        start: {
          line: 311,
          column: 4
        },
        end: {
          line: 314,
          column: 7
        }
      },
      "105": {
        start: {
          line: 319,
          column: 0
        },
        end: {
          line: 338,
          column: 3
        }
      },
      "106": {
        start: {
          line: 320,
          column: 2
        },
        end: {
          line: 337,
          column: 3
        }
      },
      "107": {
        start: {
          line: 321,
          column: 33
        },
        end: {
          line: 321,
          column: 42
        }
      },
      "108": {
        start: {
          line: 324,
          column: 27
        },
        end: {
          line: 324,
          column: 61
        }
      },
      "109": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 330,
          column: 7
        }
      },
      "110": {
        start: {
          line: 333,
          column: 4
        },
        end: {
          line: 336,
          column: 7
        }
      },
      "111": {
        start: {
          line: 341,
          column: 0
        },
        end: {
          line: 368,
          column: 3
        }
      },
      "112": {
        start: {
          line: 342,
          column: 2
        },
        end: {
          line: 367,
          column: 3
        }
      },
      "113": {
        start: {
          line: 344,
          column: 22
        },
        end: {
          line: 355,
          column: 5
        }
      },
      "114": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 360,
          column: 7
        }
      },
      "115": {
        start: {
          line: 363,
          column: 4
        },
        end: {
          line: 366,
          column: 7
        }
      },
      "116": {
        start: {
          line: 371,
          column: 0
        },
        end: {
          line: 412,
          column: 3
        }
      },
      "117": {
        start: {
          line: 372,
          column: 2
        },
        end: {
          line: 411,
          column: 3
        }
      },
      "118": {
        start: {
          line: 373,
          column: 61
        },
        end: {
          line: 379,
          column: 6
        }
      },
      "119": {
        start: {
          line: 381,
          column: 22
        },
        end: {
          line: 402,
          column: 5
        }
      },
      "120": {
        start: {
          line: 404,
          column: 4
        },
        end: {
          line: 404,
          column: 24
        }
      },
      "121": {
        start: {
          line: 407,
          column: 4
        },
        end: {
          line: 410,
          column: 7
        }
      },
      "122": {
        start: {
          line: 416,
          column: 2
        },
        end: {
          line: 422,
          column: 3
        }
      },
      "123": {
        start: {
          line: 417,
          column: 4
        },
        end: {
          line: 417,
          column: 35
        }
      },
      "124": {
        start: {
          line: 418,
          column: 4
        },
        end: {
          line: 418,
          column: 30
        }
      },
      "125": {
        start: {
          line: 419,
          column: 4
        },
        end: {
          line: 419,
          column: 33
        }
      },
      "126": {
        start: {
          line: 421,
          column: 4
        },
        end: {
          line: 421,
          column: 56
        }
      },
      "127": {
        start: {
          line: 426,
          column: 2
        },
        end: {
          line: 446,
          column: 3
        }
      },
      "128": {
        start: {
          line: 427,
          column: 22
        },
        end: {
          line: 427,
          column: 54
        }
      },
      "129": {
        start: {
          line: 428,
          column: 18
        },
        end: {
          line: 428,
          column: 41
        }
      },
      "130": {
        start: {
          line: 429,
          column: 18
        },
        end: {
          line: 429,
          column: 20
        }
      },
      "131": {
        start: {
          line: 431,
          column: 4
        },
        end: {
          line: 436,
          column: 7
        }
      },
      "132": {
        start: {
          line: 432,
          column: 6
        },
        end: {
          line: 435,
          column: 7
        }
      },
      "133": {
        start: {
          line: 433,
          column: 29
        },
        end: {
          line: 433,
          column: 44
        }
      },
      "134": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 58
        }
      },
      "135": {
        start: {
          line: 438,
          column: 31
        },
        end: {
          line: 438,
          column: 76
        }
      },
      "136": {
        start: {
          line: 440,
          column: 4
        },
        end: {
          line: 443,
          column: 6
        }
      },
      "137": {
        start: {
          line: 445,
          column: 4
        },
        end: {
          line: 445,
          column: 36
        }
      },
      "138": {
        start: {
          line: 450,
          column: 2
        },
        end: {
          line: 462,
          column: 3
        }
      },
      "139": {
        start: {
          line: 451,
          column: 15
        },
        end: {
          line: 451,
          column: 37
        }
      },
      "140": {
        start: {
          line: 452,
          column: 18
        },
        end: {
          line: 452,
          column: 36
        }
      },
      "141": {
        start: {
          line: 454,
          column: 4
        },
        end: {
          line: 459,
          column: 6
        }
      },
      "142": {
        start: {
          line: 461,
          column: 4
        },
        end: {
          line: 461,
          column: 36
        }
      },
      "143": {
        start: {
          line: 466,
          column: 2
        },
        end: {
          line: 506,
          column: 3
        }
      },
      "144": {
        start: {
          line: 467,
          column: 26
        },
        end: {
          line: 467,
          column: 53
        }
      },
      "145": {
        start: {
          line: 469,
          column: 50
        },
        end: {
          line: 497,
          column: 6
        }
      },
      "146": {
        start: {
          line: 499,
          column: 4
        },
        end: {
          line: 503,
          column: 6
        }
      },
      "147": {
        start: {
          line: 505,
          column: 4
        },
        end: {
          line: 505,
          column: 36
        }
      },
      "148": {
        start: {
          line: 510,
          column: 20
        },
        end: {
          line: 515,
          column: 3
        }
      },
      "149": {
        start: {
          line: 517,
          column: 2
        },
        end: {
          line: 517,
          column: 50
        }
      },
      "150": {
        start: {
          line: 521,
          column: 0
        },
        end: {
          line: 538,
          column: 3
        }
      },
      "151": {
        start: {
          line: 522,
          column: 2
        },
        end: {
          line: 537,
          column: 3
        }
      },
      "152": {
        start: {
          line: 523,
          column: 22
        },
        end: {
          line: 527,
          column: 5
        }
      },
      "153": {
        start: {
          line: 530,
          column: 4
        },
        end: {
          line: 530,
          column: 77
        }
      },
      "154": {
        start: {
          line: 531,
          column: 4
        },
        end: {
          line: 531,
          column: 58
        }
      },
      "155": {
        start: {
          line: 533,
          column: 4
        },
        end: {
          line: 533,
          column: 49
        }
      },
      "156": {
        start: {
          line: 535,
          column: 4
        },
        end: {
          line: 535,
          column: 62
        }
      },
      "157": {
        start: {
          line: 540,
          column: 0
        },
        end: {
          line: 540,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 43
          },
          end: {
            line: 22,
            column: 44
          }
        },
        loc: {
          start: {
            line: 22,
            column: 63
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 22
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 81,
            column: 55
          },
          end: {
            line: 81,
            column: 56
          }
        },
        loc: {
          start: {
            line: 81,
            column: 75
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 81
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 112,
            column: 68
          },
          end: {
            line: 112,
            column: 69
          }
        },
        loc: {
          start: {
            line: 112,
            column: 88
          },
          end: {
            line: 131,
            column: 1
          }
        },
        line: 112
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 134,
            column: 71
          },
          end: {
            line: 134,
            column: 72
          }
        },
        loc: {
          start: {
            line: 134,
            column: 91
          },
          end: {
            line: 160,
            column: 1
          }
        },
        line: 134
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 163,
            column: 61
          },
          end: {
            line: 163,
            column: 62
          }
        },
        loc: {
          start: {
            line: 163,
            column: 81
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 163
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 171,
            column: 27
          },
          end: {
            line: 171,
            column: 28
          }
        },
        loc: {
          start: {
            line: 171,
            column: 37
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 171
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 174,
            column: 20
          },
          end: {
            line: 174,
            column: 21
          }
        },
        loc: {
          start: {
            line: 174,
            column: 28
          },
          end: {
            line: 179,
            column: 7
          }
        },
        line: 174
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 217,
            column: 67
          },
          end: {
            line: 217,
            column: 68
          }
        },
        loc: {
          start: {
            line: 217,
            column: 87
          },
          end: {
            line: 232,
            column: 1
          }
        },
        line: 217
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 235,
            column: 69
          },
          end: {
            line: 235,
            column: 70
          }
        },
        loc: {
          start: {
            line: 235,
            column: 89
          },
          end: {
            line: 255,
            column: 1
          }
        },
        line: 235
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 241,
            column: 42
          },
          end: {
            line: 241,
            column: 43
          }
        },
        loc: {
          start: {
            line: 241,
            column: 51
          },
          end: {
            line: 241,
            column: 68
          }
        },
        line: 241
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 258,
            column: 54
          },
          end: {
            line: 258,
            column: 55
          }
        },
        loc: {
          start: {
            line: 258,
            column: 74
          },
          end: {
            line: 282,
            column: 1
          }
        },
        line: 258
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 266,
            column: 11
          },
          end: {
            line: 266,
            column: 12
          }
        },
        loc: {
          start: {
            line: 266,
            column: 20
          },
          end: {
            line: 266,
            column: 37
          }
        },
        line: 266
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 267,
            column: 14
          },
          end: {
            line: 267,
            column: 15
          }
        },
        loc: {
          start: {
            line: 267,
            column: 23
          },
          end: {
            line: 267,
            column: 61
          }
        },
        line: 267
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        loc: {
          start: {
            line: 268,
            column: 22
          },
          end: {
            line: 268,
            column: 67
          }
        },
        line: 268
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 285,
            column: 57
          },
          end: {
            line: 285,
            column: 58
          }
        },
        loc: {
          start: {
            line: 285,
            column: 77
          },
          end: {
            line: 316,
            column: 1
          }
        },
        line: 285
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 319,
            column: 67
          },
          end: {
            line: 319,
            column: 68
          }
        },
        loc: {
          start: {
            line: 319,
            column: 87
          },
          end: {
            line: 338,
            column: 1
          }
        },
        line: 319
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 341,
            column: 65
          },
          end: {
            line: 341,
            column: 66
          }
        },
        loc: {
          start: {
            line: 341,
            column: 85
          },
          end: {
            line: 368,
            column: 1
          }
        },
        line: 341
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 371,
            column: 57
          },
          end: {
            line: 371,
            column: 58
          }
        },
        loc: {
          start: {
            line: 371,
            column: 77
          },
          end: {
            line: 412,
            column: 1
          }
        },
        line: 371
      },
      "18": {
        name: "getHealthStatus",
        decl: {
          start: {
            line: 415,
            column: 15
          },
          end: {
            line: 415,
            column: 30
          }
        },
        loc: {
          start: {
            line: 415,
            column: 33
          },
          end: {
            line: 423,
            column: 1
          }
        },
        line: 415
      },
      "19": {
        name: "getCacheMetrics",
        decl: {
          start: {
            line: 425,
            column: 15
          },
          end: {
            line: 425,
            column: 30
          }
        },
        loc: {
          start: {
            line: 425,
            column: 33
          },
          end: {
            line: 447,
            column: 1
          }
        },
        line: 425
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 431,
            column: 18
          },
          end: {
            line: 431,
            column: 19
          }
        },
        loc: {
          start: {
            line: 431,
            column: 26
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 431
      },
      "21": {
        name: "getDiskUsage",
        decl: {
          start: {
            line: 449,
            column: 15
          },
          end: {
            line: 449,
            column: 27
          }
        },
        loc: {
          start: {
            line: 449,
            column: 30
          },
          end: {
            line: 463,
            column: 1
          }
        },
        line: 449
      },
      "22": {
        name: "getTradingMetrics",
        decl: {
          start: {
            line: 465,
            column: 15
          },
          end: {
            line: 465,
            column: 32
          }
        },
        loc: {
          start: {
            line: 465,
            column: 44
          },
          end: {
            line: 507,
            column: 1
          }
        },
        line: 465
      },
      "23": {
        name: "getTimeCondition",
        decl: {
          start: {
            line: 509,
            column: 9
          },
          end: {
            line: 509,
            column: 25
          }
        },
        loc: {
          start: {
            line: 509,
            column: 37
          },
          end: {
            line: 518,
            column: 1
          }
        },
        line: 509
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 521,
            column: 31
          },
          end: {
            line: 521,
            column: 32
          }
        },
        loc: {
          start: {
            line: 521,
            column: 48
          },
          end: {
            line: 538,
            column: 1
          }
        },
        line: 521
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: 28,
            column: 50
          },
          end: {
            line: 28,
            column: 57
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 39
          }
        }, {
          start: {
            line: 29,
            column: 43
          },
          end: {
            line: 29,
            column: 56
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 68,
            column: 23
          },
          end: {
            line: 68,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 53
          },
          end: {
            line: 68,
            column: 56
          }
        }, {
          start: {
            line: 68,
            column: 59
          },
          end: {
            line: 68,
            column: 62
          }
        }],
        line: 68
      },
      "3": {
        loc: {
          start: {
            line: 136,
            column: 17
          },
          end: {
            line: 136,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 136,
            column: 26
          },
          end: {
            line: 136,
            column: 28
          }
        }],
        line: 136
      },
      "4": {
        loc: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "5": {
        loc: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "6": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "7": {
        loc: {
          start: {
            line: 177,
            column: 24
          },
          end: {
            line: 177,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 39
          },
          end: {
            line: 177,
            column: 44
          }
        }, {
          start: {
            line: 177,
            column: 47
          },
          end: {
            line: 177,
            column: 60
          }
        }],
        line: 177
      },
      "8": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 22
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 237,
            column: 20
          },
          end: {
            line: 237,
            column: 22
          }
        }],
        line: 237
      },
      "9": {
        loc: {
          start: {
            line: 261,
            column: 22
          },
          end: {
            line: 261,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 261,
            column: 30
          },
          end: {
            line: 261,
            column: 45
          }
        }, {
          start: {
            line: 261,
            column: 48
          },
          end: {
            line: 261,
            column: 90
          }
        }],
        line: 261
      },
      "10": {
        loc: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 321,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 321,
            column: 24
          },
          end: {
            line: 321,
            column: 28
          }
        }],
        line: 321
      },
      "11": {
        loc: {
          start: {
            line: 386,
            column: 17
          },
          end: {
            line: 386,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 386,
            column: 17
          },
          end: {
            line: 386,
            column: 48
          }
        }, {
          start: {
            line: 386,
            column: 52
          },
          end: {
            line: 386,
            column: 59
          }
        }],
        line: 386
      },
      "12": {
        loc: {
          start: {
            line: 397,
            column: 18
          },
          end: {
            line: 397,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 397,
            column: 27
          },
          end: {
            line: 397,
            column: 49
          }
        }, {
          start: {
            line: 397,
            column: 52
          },
          end: {
            line: 397,
            column: 54
          }
        }],
        line: 397
      },
      "13": {
        loc: {
          start: {
            line: 432,
            column: 6
          },
          end: {
            line: 435,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 6
          },
          end: {
            line: 435,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      },
      "14": {
        loc: {
          start: {
            line: 434,
            column: 21
          },
          end: {
            line: 434,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 434,
            column: 36
          },
          end: {
            line: 434,
            column: 41
          }
        }, {
          start: {
            line: 434,
            column: 44
          },
          end: {
            line: 434,
            column: 57
          }
        }],
        line: 434
      },
      "15": {
        loc: {
          start: {
            line: 517,
            column: 9
          },
          end: {
            line: 517,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 517,
            column: 9
          },
          end: {
            line: 517,
            column: 29
          }
        }, {
          start: {
            line: 517,
            column: 33
          },
          end: {
            line: 517,
            column: 49
          }
        }],
        line: 517
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3fceea76823222db7fd8f67254b2de9a28932b97"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2pivpd8143 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2pivpd8143();
const express =
/* istanbul ignore next */
(cov_2pivpd8143().s[0]++, require('express'));
const router =
/* istanbul ignore next */
(cov_2pivpd8143().s[1]++, express.Router());
const performanceService =
/* istanbul ignore next */
(cov_2pivpd8143().s[2]++, require('../services/performanceService'));
const loadBalancer =
/* istanbul ignore next */
(cov_2pivpd8143().s[3]++, require('../middleware/loadBalancer'));
const dbOptimization =
/* istanbul ignore next */
(cov_2pivpd8143().s[4]++, require('../utils/dbOptimization'));
const redis =
/* istanbul ignore next */
(cov_2pivpd8143().s[5]++, require('../config/redis'));
const {
  pgPool
} =
/* istanbul ignore next */
(cov_2pivpd8143().s[6]++, require('../config/database'));
const auth =
/* istanbul ignore next */
(cov_2pivpd8143().s[7]++, require('../middleware/auth'));
const {
  createRateLimiter
} =
/* istanbul ignore next */
(cov_2pivpd8143().s[8]++, require('../middleware/rateLimit'));

// Rate limiting for monitoring endpoints
const monitoringRateLimit =
/* istanbul ignore next */
(cov_2pivpd8143().s[9]++, createRateLimiter({
  windowMs: 60 * 1000,
  // 1 minute
  max: 100,
  // 100 requests per minute
  message: 'Too many monitoring requests'
}));

// Authentication middleware for monitoring endpoints
const adminAuth =
/* istanbul ignore next */
(cov_2pivpd8143().s[10]++, auth.requireRole(['admin', 'operator']));

// System Health Check
/* istanbul ignore next */
cov_2pivpd8143().s[11]++;
router.get('/health', monitoringRateLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[0]++;
  cov_2pivpd8143().s[12]++;
  try {
    const health =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[13]++, {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      version:
      /* istanbul ignore next */
      (cov_2pivpd8143().b[0][0]++, process.env.npm_package_version) ||
      /* istanbul ignore next */
      (cov_2pivpd8143().b[0][1]++, '1.0.0'),
      environment:
      /* istanbul ignore next */
      (cov_2pivpd8143().b[1][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_2pivpd8143().b[1][1]++, 'development')
    });

    // Check database connectivity
    /* istanbul ignore next */
    cov_2pivpd8143().s[14]++;
    try {
      /* istanbul ignore next */
      cov_2pivpd8143().s[15]++;
      await pgPool.query('SELECT 1');
      /* istanbul ignore next */
      cov_2pivpd8143().s[16]++;
      health.database = {
        status: 'connected',
        type: 'postgresql'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2pivpd8143().s[17]++;
      health.database = {
        status: 'disconnected',
        error: error.message
      };
      /* istanbul ignore next */
      cov_2pivpd8143().s[18]++;
      health.status = 'degraded';
    }

    // Check Redis connectivity
    /* istanbul ignore next */
    cov_2pivpd8143().s[19]++;
    try {
      /* istanbul ignore next */
      cov_2pivpd8143().s[20]++;
      await redis.client.ping();
      /* istanbul ignore next */
      cov_2pivpd8143().s[21]++;
      health.cache = {
        status: 'connected',
        type: 'redis'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2pivpd8143().s[22]++;
      health.cache = {
        status: 'disconnected',
        error: error.message
      };
      /* istanbul ignore next */
      cov_2pivpd8143().s[23]++;
      health.status = 'degraded';
    }

    // Memory usage check
    const memUsage =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[24]++, process.memoryUsage());
    const memUsageMB =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[25]++, {
      rss: Math.round(memUsage.rss / 1024 / 1024),
      heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024),
      heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024),
      external: Math.round(memUsage.external / 1024 / 1024)
    });
    /* istanbul ignore next */
    cov_2pivpd8143().s[26]++;
    health.memory = memUsageMB;

    // CPU usage
    const cpuUsage =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[27]++, process.cpuUsage());
    /* istanbul ignore next */
    cov_2pivpd8143().s[28]++;
    health.cpu = {
      user: cpuUsage.user,
      system: cpuUsage.system
    };
    const statusCode =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[29]++, health.status === 'healthy' ?
    /* istanbul ignore next */
    (cov_2pivpd8143().b[2][0]++, 200) :
    /* istanbul ignore next */
    (cov_2pivpd8143().b[2][1]++, 503));
    /* istanbul ignore next */
    cov_2pivpd8143().s[30]++;
    res.status(statusCode).json(health);
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[31]++;
    res.status(500).json({
      status: 'unhealthy',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Detailed Performance Metrics
/* istanbul ignore next */
cov_2pivpd8143().s[32]++;
router.get('/metrics', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[1]++;
  cov_2pivpd8143().s[33]++;
  try {
    const metrics =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[34]++, await performanceService.monitorPerformance());
    const loadBalancerStats =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[35]++, loadBalancer.getStats());
    const dbStats =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[36]++, dbOptimization.getOptimizationStats());
    const detailedMetrics =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[37]++, {
      timestamp: new Date().toISOString(),
      performance: metrics,
      loadBalancer: loadBalancerStats,
      database: dbStats,
      system: {
        nodeVersion: process.version,
        platform: process.platform,
        arch: process.arch,
        pid: process.pid,
        uptime: process.uptime()
      }
    });
    /* istanbul ignore next */
    cov_2pivpd8143().s[38]++;
    res.json(detailedMetrics);
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[39]++;
    res.status(500).json({
      error: 'Failed to retrieve metrics',
      message: error.message
    });
  }
});

// Database Performance Analysis
/* istanbul ignore next */
cov_2pivpd8143().s[40]++;
router.get('/database/performance', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[2]++;
  cov_2pivpd8143().s[41]++;
  try {
    const queryMonitoring =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[42]++, await dbOptimization.monitorQueries());
    const connectionPoolStats =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[43]++, await dbOptimization.optimizeConnectionPool());
    const indexRecommendations =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[44]++, await dbOptimization.optimizeIndexes());
    /* istanbul ignore next */
    cov_2pivpd8143().s[45]++;
    res.json({
      timestamp: new Date().toISOString(),
      connectionPool: connectionPoolStats,
      queries: queryMonitoring,
      indexOptimization: indexRecommendations
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[46]++;
    res.status(500).json({
      error: 'Failed to analyze database performance',
      message: error.message
    });
  }
});

// Query Plan Analysis
/* istanbul ignore next */
cov_2pivpd8143().s[47]++;
router.post('/database/analyze-query', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[3]++;
  cov_2pivpd8143().s[48]++;
  try {
    const {
      sql,
      params =
      /* istanbul ignore next */
      (cov_2pivpd8143().b[3][0]++, [])
    } =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[49]++, req.body);
    /* istanbul ignore next */
    cov_2pivpd8143().s[50]++;
    if (!sql) {
      /* istanbul ignore next */
      cov_2pivpd8143().b[4][0]++;
      cov_2pivpd8143().s[51]++;
      return res.status(400).json({
        error: 'SQL query is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pivpd8143().b[4][1]++;
    }
    const analysis =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[52]++, await dbOptimization.analyzeQueryPlan(sql, params));
    /* istanbul ignore next */
    cov_2pivpd8143().s[53]++;
    if (!analysis) {
      /* istanbul ignore next */
      cov_2pivpd8143().b[5][0]++;
      cov_2pivpd8143().s[54]++;
      return res.status(400).json({
        error: 'Failed to analyze query plan'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pivpd8143().b[5][1]++;
    }
    cov_2pivpd8143().s[55]++;
    res.json({
      timestamp: new Date().toISOString(),
      query: sql,
      analysis
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[56]++;
    res.status(500).json({
      error: 'Query analysis failed',
      message: error.message
    });
  }
});

// Cache Performance Metrics
/* istanbul ignore next */
cov_2pivpd8143().s[57]++;
router.get('/cache/metrics', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[4]++;
  cov_2pivpd8143().s[58]++;
  try {
    // Redis info
    const redisInfo =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[59]++, await redis.client.info());
    const redisMemory =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[60]++, await redis.client.info('memory'));
    const redisStats =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[61]++, await redis.client.info('stats'));

    // Parse Redis info
    /* istanbul ignore next */
    cov_2pivpd8143().s[62]++;
    const parseRedisInfo = info => {
      /* istanbul ignore next */
      cov_2pivpd8143().f[5]++;
      const lines =
      /* istanbul ignore next */
      (cov_2pivpd8143().s[63]++, info.split('\r\n'));
      const result =
      /* istanbul ignore next */
      (cov_2pivpd8143().s[64]++, {});
      /* istanbul ignore next */
      cov_2pivpd8143().s[65]++;
      lines.forEach(line => {
        /* istanbul ignore next */
        cov_2pivpd8143().f[6]++;
        cov_2pivpd8143().s[66]++;
        if (line.includes(':')) {
          /* istanbul ignore next */
          cov_2pivpd8143().b[6][0]++;
          const [key, value] =
          /* istanbul ignore next */
          (cov_2pivpd8143().s[67]++, line.split(':'));
          /* istanbul ignore next */
          cov_2pivpd8143().s[68]++;
          result[key] = isNaN(value) ?
          /* istanbul ignore next */
          (cov_2pivpd8143().b[7][0]++, value) :
          /* istanbul ignore next */
          (cov_2pivpd8143().b[7][1]++, Number(value));
        } else
        /* istanbul ignore next */
        {
          cov_2pivpd8143().b[6][1]++;
        }
      });
      /* istanbul ignore next */
      cov_2pivpd8143().s[69]++;
      return result;
    };
    const memoryInfo =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[70]++, parseRedisInfo(redisMemory));
    const statsInfo =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[71]++, parseRedisInfo(redisStats));

    // Get cache hit ratio from performance service
    const performanceMetrics =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[72]++, await performanceService.monitorPerformance());
    /* istanbul ignore next */
    cov_2pivpd8143().s[73]++;
    res.json({
      timestamp: new Date().toISOString(),
      redis: {
        memory: {
          used: memoryInfo.used_memory_human,
          peak: memoryInfo.used_memory_peak_human,
          fragmentation: memoryInfo.mem_fragmentation_ratio
        },
        stats: {
          connections: statsInfo.connected_clients,
          commands: statsInfo.total_commands_processed,
          keyspace_hits: statsInfo.keyspace_hits,
          keyspace_misses: statsInfo.keyspace_misses,
          hit_rate: statsInfo.keyspace_hits / (statsInfo.keyspace_hits + statsInfo.keyspace_misses) * 100
        }
      },
      application: performanceMetrics.cache
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[74]++;
    res.status(500).json({
      error: 'Failed to retrieve cache metrics',
      message: error.message
    });
  }
});

// Load Balancer Status
/* istanbul ignore next */
cov_2pivpd8143().s[75]++;
router.get('/loadbalancer/status', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[7]++;
  cov_2pivpd8143().s[76]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[77]++, loadBalancer.getStats());
    /* istanbul ignore next */
    cov_2pivpd8143().s[78]++;
    res.json({
      timestamp: new Date().toISOString(),
      loadBalancer: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[79]++;
    res.status(500).json({
      error: 'Failed to retrieve load balancer status',
      message: error.message
    });
  }
});

// Slow Query Log
/* istanbul ignore next */
cov_2pivpd8143().s[80]++;
router.get('/database/slow-queries', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[8]++;
  cov_2pivpd8143().s[81]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_2pivpd8143().b[8][0]++, 50)
    } =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[82]++, req.query);

    // Get slow queries from Redis log
    const slowQueries =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[83]++, await redis.cache.lrange('slow_queries', 0, limit - 1));
    const parsedQueries =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[84]++, slowQueries.map(query => {
      /* istanbul ignore next */
      cov_2pivpd8143().f[9]++;
      cov_2pivpd8143().s[85]++;
      return JSON.parse(query);
    }));
    /* istanbul ignore next */
    cov_2pivpd8143().s[86]++;
    res.json({
      timestamp: new Date().toISOString(),
      slowQueries: parsedQueries,
      total: parsedQueries.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[87]++;
    res.status(500).json({
      error: 'Failed to retrieve slow queries',
      message: error.message
    });
  }
});

// Performance Alerts
/* istanbul ignore next */
cov_2pivpd8143().s[88]++;
router.get('/alerts', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[10]++;
  cov_2pivpd8143().s[89]++;
  try {
    const {
      since
    } =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[90]++, req.query);
    const sinceTime =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[91]++, since ?
    /* istanbul ignore next */
    (cov_2pivpd8143().b[9][0]++, new Date(since)) :
    /* istanbul ignore next */
    (cov_2pivpd8143().b[9][1]++, new Date(Date.now() - 24 * 60 * 60 * 1000)));

    // Get alerts from Redis (in a real implementation, you'd store alerts)
    const alerts =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[92]++, await redis.cache.lrange('performance_alerts', 0, 99));
    const parsedAlerts =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[93]++, alerts.map(alert => {
      /* istanbul ignore next */
      cov_2pivpd8143().f[11]++;
      cov_2pivpd8143().s[94]++;
      return JSON.parse(alert);
    }).filter(alert => {
      /* istanbul ignore next */
      cov_2pivpd8143().f[12]++;
      cov_2pivpd8143().s[95]++;
      return new Date(alert.timestamp) >= sinceTime;
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_2pivpd8143().f[13]++;
      cov_2pivpd8143().s[96]++;
      return new Date(b.timestamp) - new Date(a.timestamp);
    }));
    /* istanbul ignore next */
    cov_2pivpd8143().s[97]++;
    res.json({
      timestamp: new Date().toISOString(),
      alerts: parsedAlerts,
      total: parsedAlerts.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[98]++;
    res.status(500).json({
      error: 'Failed to retrieve alerts',
      message: error.message
    });
  }
});

// System Resource Usage
/* istanbul ignore next */
cov_2pivpd8143().s[99]++;
router.get('/resources', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[14]++;
  cov_2pivpd8143().s[100]++;
  try {
    const os =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[101]++, require('os'));
    const resources =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[102]++, {
      timestamp: new Date().toISOString(),
      cpu: {
        usage: process.cpuUsage(),
        loadAverage: os.loadavg(),
        cores: os.cpus().length
      },
      memory: {
        process: process.memoryUsage(),
        system: {
          total: os.totalmem(),
          free: os.freemem(),
          used: os.totalmem() - os.freemem()
        }
      },
      disk: await getDiskUsage(),
      network: os.networkInterfaces()
    });
    /* istanbul ignore next */
    cov_2pivpd8143().s[103]++;
    res.json(resources);
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[104]++;
    res.status(500).json({
      error: 'Failed to retrieve resource usage',
      message: error.message
    });
  }
});

// Trading Performance Metrics
/* istanbul ignore next */
cov_2pivpd8143().s[105]++;
router.get('/trading/performance', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[15]++;
  cov_2pivpd8143().s[106]++;
  try {
    const {
      timeframe =
      /* istanbul ignore next */
      (cov_2pivpd8143().b[10][0]++, '1h')
    } =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[107]++, req.query);

    // Get trading metrics from database
    const tradingMetrics =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[108]++, await getTradingMetrics(timeframe));
    /* istanbul ignore next */
    cov_2pivpd8143().s[109]++;
    res.json({
      timestamp: new Date().toISOString(),
      timeframe,
      metrics: tradingMetrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[110]++;
    res.status(500).json({
      error: 'Failed to retrieve trading performance metrics',
      message: error.message
    });
  }
});

// WebSocket Connection Metrics
/* istanbul ignore next */
cov_2pivpd8143().s[111]++;
router.get('/websocket/metrics', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[16]++;
  cov_2pivpd8143().s[112]++;
  try {
    // Get WebSocket metrics (would be implemented in WebSocket service)
    const wsMetrics =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[113]++, {
      totalConnections: 0,
      // Would get from WebSocket service
      activeConnections: 0,
      messagesSent: 0,
      messagesReceived: 0,
      averageLatency: 0,
      connectionsByType: {
        trading: 0,
        market_data: 0,
        notifications: 0
      }
    });
    /* istanbul ignore next */
    cov_2pivpd8143().s[114]++;
    res.json({
      timestamp: new Date().toISOString(),
      websocket: wsMetrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[115]++;
    res.status(500).json({
      error: 'Failed to retrieve WebSocket metrics',
      message: error.message
    });
  }
});

// Performance Dashboard Data
/* istanbul ignore next */
cov_2pivpd8143().s[116]++;
router.get('/dashboard', monitoringRateLimit, adminAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[17]++;
  cov_2pivpd8143().s[117]++;
  try {
    const [health, metrics, dbPerf, cacheMetrics, lbStats] =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[118]++, await Promise.all([getHealthStatus(), performanceService.monitorPerformance(), dbOptimization.monitorQueries(), getCacheMetrics(), loadBalancer.getStats()]));
    const dashboard =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[119]++, {
      timestamp: new Date().toISOString(),
      overview: {
        status: health.status,
        uptime: process.uptime(),
        version:
        /* istanbul ignore next */
        (cov_2pivpd8143().b[11][0]++, process.env.npm_package_version) ||
        /* istanbul ignore next */
        (cov_2pivpd8143().b[11][1]++, '1.0.0')
      },
      performance: {
        responseTime: metrics.queries.p95Time,
        throughput: lbStats.totalRequests,
        errorRate: 0,
        // Would calculate from logs
        availability: 99.9 // Would calculate from uptime
      },
      resources: {
        cpu: metrics.system.cpuUser,
        memory: metrics.memory.utilization,
        database: dbPerf ?
        /* istanbul ignore next */
        (cov_2pivpd8143().b[12][0]++, dbPerf.connectionStats) :
        /* istanbul ignore next */
        (cov_2pivpd8143().b[12][1]++, {}),
        cache: cacheMetrics.application
      },
      alerts: [],
      // Would get recent alerts
      trends: {} // Would include historical data
    });
    /* istanbul ignore next */
    cov_2pivpd8143().s[120]++;
    res.json(dashboard);
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[121]++;
    res.status(500).json({
      error: 'Failed to retrieve dashboard data',
      message: error.message
    });
  }
});

// Helper Functions
async function getHealthStatus() {
  /* istanbul ignore next */
  cov_2pivpd8143().f[18]++;
  cov_2pivpd8143().s[122]++;
  try {
    /* istanbul ignore next */
    cov_2pivpd8143().s[123]++;
    await pgPool.query('SELECT 1');
    /* istanbul ignore next */
    cov_2pivpd8143().s[124]++;
    await redis.client.ping();
    /* istanbul ignore next */
    cov_2pivpd8143().s[125]++;
    return {
      status: 'healthy'
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[126]++;
    return {
      status: 'degraded',
      error: error.message
    };
  }
}
async function getCacheMetrics() {
  /* istanbul ignore next */
  cov_2pivpd8143().f[19]++;
  cov_2pivpd8143().s[127]++;
  try {
    const redisInfo =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[128]++, await redis.client.info('stats'));
    const lines =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[129]++, redisInfo.split('\r\n'));
    const stats =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[130]++, {});
    /* istanbul ignore next */
    cov_2pivpd8143().s[131]++;
    lines.forEach(line => {
      /* istanbul ignore next */
      cov_2pivpd8143().f[20]++;
      cov_2pivpd8143().s[132]++;
      if (line.includes(':')) {
        /* istanbul ignore next */
        cov_2pivpd8143().b[13][0]++;
        const [key, value] =
        /* istanbul ignore next */
        (cov_2pivpd8143().s[133]++, line.split(':'));
        /* istanbul ignore next */
        cov_2pivpd8143().s[134]++;
        stats[key] = isNaN(value) ?
        /* istanbul ignore next */
        (cov_2pivpd8143().b[14][0]++, value) :
        /* istanbul ignore next */
        (cov_2pivpd8143().b[14][1]++, Number(value));
      } else
      /* istanbul ignore next */
      {
        cov_2pivpd8143().b[13][1]++;
      }
    });
    const performanceMetrics =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[135]++, await performanceService.monitorPerformance());
    /* istanbul ignore next */
    cov_2pivpd8143().s[136]++;
    return {
      redis: stats,
      application: performanceMetrics.cache
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[137]++;
    return {
      error: error.message
    };
  }
}
async function getDiskUsage() {
  /* istanbul ignore next */
  cov_2pivpd8143().f[21]++;
  cov_2pivpd8143().s[138]++;
  try {
    const fs =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[139]++, require('fs').promises);
    const stats =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[140]++, await fs.stat('.'));
    /* istanbul ignore next */
    cov_2pivpd8143().s[141]++;
    return {
      total: 0,
      // Would implement actual disk usage calculation
      used: 0,
      free: 0,
      percentage: 0
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[142]++;
    return {
      error: error.message
    };
  }
}
async function getTradingMetrics(timeframe) {
  /* istanbul ignore next */
  cov_2pivpd8143().f[22]++;
  cov_2pivpd8143().s[143]++;
  try {
    const timeCondition =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[144]++, getTimeCondition(timeframe));
    const [orderStats, tradeStats, volumeStats] =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[145]++, await Promise.all([pgPool.query(`
        SELECT 
          COUNT(*) as total_orders,
          COUNT(CASE WHEN status = 'filled' THEN 1 END) as filled_orders,
          COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled_orders,
          AVG(EXTRACT(EPOCH FROM (updated_at - created_at))) as avg_fill_time
        FROM orders 
        WHERE created_at >= ${timeCondition}
      `), pgPool.query(`
        SELECT 
          COUNT(*) as total_trades,
          SUM(quantity) as total_volume,
          AVG(price) as avg_price
        FROM trades 
        WHERE created_at >= ${timeCondition}
      `), pgPool.query(`
        SELECT 
          trading_pair_id,
          SUM(quantity * price) as volume_24h
        FROM trades 
        WHERE created_at >= ${timeCondition}
        GROUP BY trading_pair_id
        ORDER BY volume_24h DESC
        LIMIT 10
      `)]));
    /* istanbul ignore next */
    cov_2pivpd8143().s[146]++;
    return {
      orders: orderStats.rows[0],
      trades: tradeStats.rows[0],
      topPairs: volumeStats.rows
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[147]++;
    return {
      error: error.message
    };
  }
}
function getTimeCondition(timeframe) {
  /* istanbul ignore next */
  cov_2pivpd8143().f[23]++;
  const intervals =
  /* istanbul ignore next */
  (cov_2pivpd8143().s[148]++, {
    '1h': "NOW() - INTERVAL '1 hour'",
    '24h': "NOW() - INTERVAL '24 hours'",
    '7d': "NOW() - INTERVAL '7 days'",
    '30d': "NOW() - INTERVAL '30 days'"
  });
  /* istanbul ignore next */
  cov_2pivpd8143().s[149]++;
  return /* istanbul ignore next */(cov_2pivpd8143().b[15][0]++, intervals[timeframe]) ||
  /* istanbul ignore next */
  (cov_2pivpd8143().b[15][1]++, intervals['24h']);
}

// Setup performance service event listeners for alerts
/* istanbul ignore next */
cov_2pivpd8143().s[150]++;
performanceService.on('alert', async alert => {
  /* istanbul ignore next */
  cov_2pivpd8143().f[24]++;
  cov_2pivpd8143().s[151]++;
  try {
    const alertData =
    /* istanbul ignore next */
    (cov_2pivpd8143().s[152]++, {
      ...alert,
      timestamp: new Date().toISOString(),
      id: Date.now().toString()
    });

    // Store alert in Redis
    /* istanbul ignore next */
    cov_2pivpd8143().s[153]++;
    await redis.cache.lpush('performance_alerts', JSON.stringify(alertData));
    /* istanbul ignore next */
    cov_2pivpd8143().s[154]++;
    await redis.cache.ltrim('performance_alerts', 0, 999); // Keep last 1000 alerts
    /* istanbul ignore next */
    cov_2pivpd8143().s[155]++;
    console.log('Performance alert:', alertData);
  } catch (error) {
    /* istanbul ignore next */
    cov_2pivpd8143().s[156]++;
    console.error('Error handling performance alert:', error);
    // Continue without crashing to prevent unhandled rejection
  }
});
/* istanbul ignore next */
cov_2pivpd8143().s[157]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,