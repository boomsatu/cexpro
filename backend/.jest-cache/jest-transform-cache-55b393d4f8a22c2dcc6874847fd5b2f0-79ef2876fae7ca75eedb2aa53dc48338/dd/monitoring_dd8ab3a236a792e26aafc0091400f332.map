{"version":3,"names":["cov_2pivpd8143","actualCoverage","express","s","require","router","Router","performanceService","loadBalancer","dbOptimization","redis","pgPool","auth","createRateLimiter","monitoringRateLimit","windowMs","max","message","adminAuth","requireRole","get","req","res","f","health","status","timestamp","Date","toISOString","uptime","process","version","b","env","npm_package_version","environment","NODE_ENV","query","database","type","error","client","ping","cache","memUsage","memoryUsage","memUsageMB","rss","Math","round","heapUsed","heapTotal","external","memory","cpuUsage","cpu","user","system","statusCode","json","metrics","monitorPerformance","loadBalancerStats","getStats","dbStats","getOptimizationStats","detailedMetrics","performance","nodeVersion","platform","arch","pid","queryMonitoring","monitorQueries","connectionPoolStats","optimizeConnectionPool","indexRecommendations","optimizeIndexes","connectionPool","queries","indexOptimization","post","sql","params","body","analysis","analyzeQueryPlan","redisInfo","info","redisMemory","redisStats","parseRedisInfo","lines","split","result","forEach","line","includes","key","value","isNaN","Number","memoryInfo","statsInfo","performanceMetrics","used","used_memory_human","peak","used_memory_peak_human","fragmentation","mem_fragmentation_ratio","stats","connections","connected_clients","commands","total_commands_processed","keyspace_hits","keyspace_misses","hit_rate","application","limit","slowQueries","lrange","parsedQueries","map","JSON","parse","total","length","since","sinceTime","now","alerts","parsedAlerts","alert","filter","sort","a","os","resources","usage","loadAverage","loadavg","cores","cpus","totalmem","free","freemem","disk","getDiskUsage","network","networkInterfaces","timeframe","tradingMetrics","getTradingMetrics","wsMetrics","totalConnections","activeConnections","messagesSent","messagesReceived","averageLatency","connectionsByType","trading","market_data","notifications","websocket","dbPerf","cacheMetrics","lbStats","Promise","all","getHealthStatus","getCacheMetrics","dashboard","overview","responseTime","p95Time","throughput","totalRequests","errorRate","availability","cpuUser","utilization","connectionStats","trends","fs","promises","stat","percentage","timeCondition","getTimeCondition","orderStats","tradeStats","volumeStats","orders","rows","trades","topPairs","intervals","on","alertData","id","toString","lpush","stringify","ltrim","console","log","module","exports"],"sources":["monitoring.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst performanceService = require('../services/performanceService');\nconst loadBalancer = require('../middleware/loadBalancer');\nconst dbOptimization = require('../utils/dbOptimization');\nconst redis = require('../config/redis');\nconst { pgPool } = require('../config/database');\nconst auth = require('../middleware/auth');\nconst { createRateLimiter } = require('../middleware/rateLimit');\n\n// Rate limiting for monitoring endpoints\nconst monitoringRateLimit = createRateLimiter({\n  windowMs: 60 * 1000, // 1 minute\n  max: 100, // 100 requests per minute\n  message: 'Too many monitoring requests'\n});\n\n// Authentication middleware for monitoring endpoints\nconst adminAuth = auth.requireRole(['admin', 'operator']);\n\n// System Health Check\nrouter.get('/health', monitoringRateLimit, async (req, res) => {\n  try {\n    const health = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      version: process.env.npm_package_version || '1.0.0',\n      environment: process.env.NODE_ENV || 'development'\n    };\n    \n    // Check database connectivity\n    try {\n      await pgPool.query('SELECT 1');\n      health.database = { status: 'connected', type: 'postgresql' };\n    } catch (error) {\n      health.database = { status: 'disconnected', error: error.message };\n      health.status = 'degraded';\n    }\n    \n    // Check Redis connectivity\n    try {\n      await redis.client.ping();\n      health.cache = { status: 'connected', type: 'redis' };\n    } catch (error) {\n      health.cache = { status: 'disconnected', error: error.message };\n      health.status = 'degraded';\n    }\n    \n    // Memory usage check\n    const memUsage = process.memoryUsage();\n    const memUsageMB = {\n      rss: Math.round(memUsage.rss / 1024 / 1024),\n      heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024),\n      heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024),\n      external: Math.round(memUsage.external / 1024 / 1024)\n    };\n    \n    health.memory = memUsageMB;\n    \n    // CPU usage\n    const cpuUsage = process.cpuUsage();\n    health.cpu = {\n      user: cpuUsage.user,\n      system: cpuUsage.system\n    };\n    \n    const statusCode = health.status === 'healthy' ? 200 : 503;\n    res.status(statusCode).json(health);\n    \n  } catch (error) {\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Detailed Performance Metrics\nrouter.get('/metrics', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    const metrics = await performanceService.monitorPerformance();\n    const loadBalancerStats = loadBalancer.getStats();\n    const dbStats = dbOptimization.getOptimizationStats();\n    \n    const detailedMetrics = {\n      timestamp: new Date().toISOString(),\n      performance: metrics,\n      loadBalancer: loadBalancerStats,\n      database: dbStats,\n      system: {\n        nodeVersion: process.version,\n        platform: process.platform,\n        arch: process.arch,\n        pid: process.pid,\n        uptime: process.uptime()\n      }\n    };\n    \n    res.json(detailedMetrics);\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to retrieve metrics',\n      message: error.message\n    });\n  }\n});\n\n// Database Performance Analysis\nrouter.get('/database/performance', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    const queryMonitoring = await dbOptimization.monitorQueries();\n    const connectionPoolStats = await dbOptimization.optimizeConnectionPool();\n    const indexRecommendations = await dbOptimization.optimizeIndexes();\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      connectionPool: connectionPoolStats,\n      queries: queryMonitoring,\n      indexOptimization: indexRecommendations\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to analyze database performance',\n      message: error.message\n    });\n  }\n});\n\n// Query Plan Analysis\nrouter.post('/database/analyze-query', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    const { sql, params = [] } = req.body;\n    \n    if (!sql) {\n      return res.status(400).json({ error: 'SQL query is required' });\n    }\n    \n    const analysis = await dbOptimization.analyzeQueryPlan(sql, params);\n    \n    if (!analysis) {\n      return res.status(400).json({ error: 'Failed to analyze query plan' });\n    }\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      query: sql,\n      analysis\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Query analysis failed',\n      message: error.message\n    });\n  }\n});\n\n// Cache Performance Metrics\nrouter.get('/cache/metrics', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    // Redis info\n    const redisInfo = await redis.client.info();\n    const redisMemory = await redis.client.info('memory');\n    const redisStats = await redis.client.info('stats');\n    \n    // Parse Redis info\n    const parseRedisInfo = (info) => {\n      const lines = info.split('\\r\\n');\n      const result = {};\n      lines.forEach(line => {\n        if (line.includes(':')) {\n          const [key, value] = line.split(':');\n          result[key] = isNaN(value) ? value : Number(value);\n        }\n      });\n      return result;\n    };\n    \n    const memoryInfo = parseRedisInfo(redisMemory);\n    const statsInfo = parseRedisInfo(redisStats);\n    \n    // Get cache hit ratio from performance service\n    const performanceMetrics = await performanceService.monitorPerformance();\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      redis: {\n        memory: {\n          used: memoryInfo.used_memory_human,\n          peak: memoryInfo.used_memory_peak_human,\n          fragmentation: memoryInfo.mem_fragmentation_ratio\n        },\n        stats: {\n          connections: statsInfo.connected_clients,\n          commands: statsInfo.total_commands_processed,\n          keyspace_hits: statsInfo.keyspace_hits,\n          keyspace_misses: statsInfo.keyspace_misses,\n          hit_rate: statsInfo.keyspace_hits / (statsInfo.keyspace_hits + statsInfo.keyspace_misses) * 100\n        }\n      },\n      application: performanceMetrics.cache\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to retrieve cache metrics',\n      message: error.message\n    });\n  }\n});\n\n// Load Balancer Status\nrouter.get('/loadbalancer/status', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    const stats = loadBalancer.getStats();\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      loadBalancer: stats\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to retrieve load balancer status',\n      message: error.message\n    });\n  }\n});\n\n// Slow Query Log\nrouter.get('/database/slow-queries', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    const { limit = 50 } = req.query;\n    \n    // Get slow queries from Redis log\n    const slowQueries = await redis.cache.lrange('slow_queries', 0, limit - 1);\n    const parsedQueries = slowQueries.map(query => JSON.parse(query));\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      slowQueries: parsedQueries,\n      total: parsedQueries.length\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to retrieve slow queries',\n      message: error.message\n    });\n  }\n});\n\n// Performance Alerts\nrouter.get('/alerts', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    const { since } = req.query;\n    const sinceTime = since ? new Date(since) : new Date(Date.now() - 24 * 60 * 60 * 1000);\n    \n    // Get alerts from Redis (in a real implementation, you'd store alerts)\n    const alerts = await redis.cache.lrange('performance_alerts', 0, 99);\n    const parsedAlerts = alerts\n      .map(alert => JSON.parse(alert))\n      .filter(alert => new Date(alert.timestamp) >= sinceTime)\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      alerts: parsedAlerts,\n      total: parsedAlerts.length\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to retrieve alerts',\n      message: error.message\n    });\n  }\n});\n\n// System Resource Usage\nrouter.get('/resources', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    const os = require('os');\n    \n    const resources = {\n      timestamp: new Date().toISOString(),\n      cpu: {\n        usage: process.cpuUsage(),\n        loadAverage: os.loadavg(),\n        cores: os.cpus().length\n      },\n      memory: {\n        process: process.memoryUsage(),\n        system: {\n          total: os.totalmem(),\n          free: os.freemem(),\n          used: os.totalmem() - os.freemem()\n        }\n      },\n      disk: await getDiskUsage(),\n      network: os.networkInterfaces()\n    };\n    \n    res.json(resources);\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to retrieve resource usage',\n      message: error.message\n    });\n  }\n});\n\n// Trading Performance Metrics\nrouter.get('/trading/performance', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    const { timeframe = '1h' } = req.query;\n    \n    // Get trading metrics from database\n    const tradingMetrics = await getTradingMetrics(timeframe);\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      timeframe,\n      metrics: tradingMetrics\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to retrieve trading performance metrics',\n      message: error.message\n    });\n  }\n});\n\n// WebSocket Connection Metrics\nrouter.get('/websocket/metrics', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    // Get WebSocket metrics (would be implemented in WebSocket service)\n    const wsMetrics = {\n      totalConnections: 0, // Would get from WebSocket service\n      activeConnections: 0,\n      messagesSent: 0,\n      messagesReceived: 0,\n      averageLatency: 0,\n      connectionsByType: {\n        trading: 0,\n        market_data: 0,\n        notifications: 0\n      }\n    };\n    \n    res.json({\n      timestamp: new Date().toISOString(),\n      websocket: wsMetrics\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to retrieve WebSocket metrics',\n      message: error.message\n    });\n  }\n});\n\n// Performance Dashboard Data\nrouter.get('/dashboard', monitoringRateLimit, adminAuth, async (req, res) => {\n  try {\n    const [health, metrics, dbPerf, cacheMetrics, lbStats] = await Promise.all([\n      getHealthStatus(),\n      performanceService.monitorPerformance(),\n      dbOptimization.monitorQueries(),\n      getCacheMetrics(),\n      loadBalancer.getStats()\n    ]);\n    \n    const dashboard = {\n      timestamp: new Date().toISOString(),\n      overview: {\n        status: health.status,\n        uptime: process.uptime(),\n        version: process.env.npm_package_version || '1.0.0'\n      },\n      performance: {\n        responseTime: metrics.queries.p95Time,\n        throughput: lbStats.totalRequests,\n        errorRate: 0, // Would calculate from logs\n        availability: 99.9 // Would calculate from uptime\n      },\n      resources: {\n        cpu: metrics.system.cpuUser,\n        memory: metrics.memory.utilization,\n        database: dbPerf ? dbPerf.connectionStats : {},\n        cache: cacheMetrics.application\n      },\n      alerts: [], // Would get recent alerts\n      trends: {} // Would include historical data\n    };\n    \n    res.json(dashboard);\n    \n  } catch (error) {\n    res.status(500).json({\n      error: 'Failed to retrieve dashboard data',\n      message: error.message\n    });\n  }\n});\n\n// Helper Functions\nasync function getHealthStatus() {\n  try {\n    await pgPool.query('SELECT 1');\n    await redis.client.ping();\n    return { status: 'healthy' };\n  } catch (error) {\n    return { status: 'degraded', error: error.message };\n  }\n}\n\nasync function getCacheMetrics() {\n  try {\n    const redisInfo = await redis.client.info('stats');\n    const lines = redisInfo.split('\\r\\n');\n    const stats = {};\n    \n    lines.forEach(line => {\n      if (line.includes(':')) {\n        const [key, value] = line.split(':');\n        stats[key] = isNaN(value) ? value : Number(value);\n      }\n    });\n    \n    const performanceMetrics = await performanceService.monitorPerformance();\n    \n    return {\n      redis: stats,\n      application: performanceMetrics.cache\n    };\n  } catch (error) {\n    return { error: error.message };\n  }\n}\n\nasync function getDiskUsage() {\n  try {\n    const fs = require('fs').promises;\n    const stats = await fs.stat('.');\n    \n    return {\n      total: 0, // Would implement actual disk usage calculation\n      used: 0,\n      free: 0,\n      percentage: 0\n    };\n  } catch (error) {\n    return { error: error.message };\n  }\n}\n\nasync function getTradingMetrics(timeframe) {\n  try {\n    const timeCondition = getTimeCondition(timeframe);\n    \n    const [orderStats, tradeStats, volumeStats] = await Promise.all([\n      pgPool.query(`\n        SELECT \n          COUNT(*) as total_orders,\n          COUNT(CASE WHEN status = 'filled' THEN 1 END) as filled_orders,\n          COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled_orders,\n          AVG(EXTRACT(EPOCH FROM (updated_at - created_at))) as avg_fill_time\n        FROM orders \n        WHERE created_at >= ${timeCondition}\n      `),\n      pgPool.query(`\n        SELECT \n          COUNT(*) as total_trades,\n          SUM(quantity) as total_volume,\n          AVG(price) as avg_price\n        FROM trades \n        WHERE created_at >= ${timeCondition}\n      `),\n      pgPool.query(`\n        SELECT \n          trading_pair_id,\n          SUM(quantity * price) as volume_24h\n        FROM trades \n        WHERE created_at >= ${timeCondition}\n        GROUP BY trading_pair_id\n        ORDER BY volume_24h DESC\n        LIMIT 10\n      `)\n    ]);\n    \n    return {\n      orders: orderStats.rows[0],\n      trades: tradeStats.rows[0],\n      topPairs: volumeStats.rows\n    };\n  } catch (error) {\n    return { error: error.message };\n  }\n}\n\nfunction getTimeCondition(timeframe) {\n  const intervals = {\n    '1h': \"NOW() - INTERVAL '1 hour'\",\n    '24h': \"NOW() - INTERVAL '24 hours'\",\n    '7d': \"NOW() - INTERVAL '7 days'\",\n    '30d': \"NOW() - INTERVAL '30 days'\"\n  };\n  \n  return intervals[timeframe] || intervals['24h'];\n}\n\n// Setup performance service event listeners for alerts\nperformanceService.on('alert', async (alert) => {\n  try {\n    const alertData = {\n      ...alert,\n      timestamp: new Date().toISOString(),\n      id: Date.now().toString()\n    };\n    \n    // Store alert in Redis\n    await redis.cache.lpush('performance_alerts', JSON.stringify(alertData));\n    await redis.cache.ltrim('performance_alerts', 0, 999); // Keep last 1000 alerts\n    \n    console.log('Performance alert:', alertData);\n  } catch (error) {\n    console.error('Error handling performance alert:', error);\n    // Continue without crashing to prevent unhandled rejection\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}