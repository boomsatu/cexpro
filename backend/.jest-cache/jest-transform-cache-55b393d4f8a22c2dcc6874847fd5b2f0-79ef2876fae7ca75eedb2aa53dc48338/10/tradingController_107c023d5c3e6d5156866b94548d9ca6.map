{"version":3,"names":["cov_g8iekj1ei","actualCoverage","orderMatchingEngine","s","require","orderBookManager","marketDataService","walletService","validationResult","Op","Order","Trade","Market","Balance","TradingController","placeOrder","req","res","f","errors","isEmpty","b","status","json","success","message","array","symbol","side","type","quantity","price","stopPrice","timeInForce","clientOrderId","body","userId","user","id","market","findOne","where","toUpperCase","is_active","requiredBalance","parseFloat","last_price","balance","user_id","currency","quote_currency","available","base_currency","orderData","market_id","stop_price","time_in_force","client_order_id","source","result","data","error","console","cancelOrder","orderId","params","cancelAllOrders","query","whereClause","in","orders","findAll","attributes","results","order","push","filter","r","length","getUserOrders","limit","offset","startTime","endTime","created_at","gte","Date","parseInt","lte","count","rows","findAndCountAll","Math","min","include","model","total","getOrderById","getUserTrades","or","maker_user_id","taker_user_id","trades","tradesWithRole","map","trade","tradeData","toJSON","userRole","userFee","maker_fee","taker_fee","getOrderBook","depth","orderBook","timestamp","toISOString","getTicker","ticker","tickers","getAllTickers","getCandlesticks","interval","candlesticks","getRecentTrades","getMarketStats","stats","getUserBalances","toLowerCase","balances","getUserWallets","walletType","wallets","createWallet","wallet","generateNewAddress","walletId","userWallet","find","w","newWallet","address","module","exports"],"sources":["tradingController.js"],"sourcesContent":["const orderMatchingEngine = require('../services/orderMatchingEngine');\nconst orderBookManager = require('../services/orderBookManager');\nconst marketDataService = require('../services/marketDataService');\nconst walletService = require('../services/walletService');\nconst { validationResult } = require('express-validator');\nconst { Op } = require('sequelize');\nconst Order = require('../models/Order');\nconst Trade = require('../models/Trade');\nconst Market = require('../models/Market');\nconst Balance = require('../models/Balance');\n\n/**\n * Trading Controller\n * Mengelola semua endpoint trading API termasuk order management,\n * market data, dan wallet operations\n */\nclass TradingController {\n  \n  /**\n   * Place new order\n   */\n  async placeOrder(req, res) {\n    try {\n      // Validate request\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({\n          success: false,\n          message: 'Validation error',\n          errors: errors.array()\n        });\n      }\n      \n      const {\n        symbol,\n        side,\n        type,\n        quantity,\n        price,\n        stopPrice,\n        timeInForce,\n        clientOrderId\n      } = req.body;\n      \n      const userId = req.user.id;\n      \n      // Validate market exists and is active\n      const market = await Market.findOne({\n        where: { symbol: symbol.toUpperCase(), is_active: true }\n      });\n      \n      if (!market) {\n        return res.status(400).json({\n          success: false,\n          message: 'Market not found or inactive'\n        });\n      }\n      \n      // Check user balance for buy orders\n      if (side === 'buy') {\n        const requiredBalance = type === 'market' ? \n          parseFloat(quantity) * parseFloat(market.last_price) * 1.1 : // 10% buffer for market orders\n          parseFloat(quantity) * parseFloat(price);\n          \n        const balance = await Balance.findOne({\n          where: {\n            user_id: userId,\n            currency: market.quote_currency\n          }\n        });\n        \n        if (!balance || parseFloat(balance.available) < requiredBalance) {\n          return res.status(400).json({\n            success: false,\n            message: 'Insufficient balance'\n          });\n        }\n      }\n      \n      // Check user balance for sell orders\n      if (side === 'sell') {\n        const balance = await Balance.findOne({\n          where: {\n            user_id: userId,\n            currency: market.base_currency\n          }\n        });\n        \n        if (!balance || parseFloat(balance.available) < parseFloat(quantity)) {\n          return res.status(400).json({\n            success: false,\n            message: 'Insufficient balance'\n          });\n        }\n      }\n      \n      // Prepare order data\n      const orderData = {\n        user_id: userId,\n        market_id: market.id,\n        symbol: symbol.toUpperCase(),\n        side,\n        type,\n        quantity: parseFloat(quantity),\n        price: price ? parseFloat(price) : null,\n        stop_price: stopPrice ? parseFloat(stopPrice) : null,\n        time_in_force: timeInForce || 'GTC',\n        client_order_id: clientOrderId,\n        source: 'api'\n      };\n      \n      // Place order through matching engine\n      const result = await orderMatchingEngine.placeOrder(orderData);\n      \n      res.status(201).json({\n        success: true,\n        message: 'Order placed successfully',\n        data: result\n      });\n      \n    } catch (error) {\n      console.error('Error placing order:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Cancel order\n   */\n  async cancelOrder(req, res) {\n    try {\n      const { orderId } = req.params;\n      const userId = req.user.id;\n      \n      if (!orderId) {\n        return res.status(400).json({\n          success: false,\n          message: 'Order ID is required'\n        });\n      }\n      \n      // Cancel order through matching engine\n      const result = await orderMatchingEngine.cancelOrder(orderId, userId);\n      \n      res.json({\n        success: true,\n        message: 'Order cancelled successfully',\n        data: result\n      });\n      \n    } catch (error) {\n      console.error('Error cancelling order:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Cancel all orders\n   */\n  async cancelAllOrders(req, res) {\n    try {\n      const userId = req.user.id;\n      const { symbol } = req.query;\n      \n      // Get active orders\n      const whereClause = {\n        user_id: userId,\n        status: { [Op.in]: ['pending', 'open', 'partially_filled'] }\n      };\n      \n      if (symbol) {\n        whereClause.symbol = symbol.toUpperCase();\n      }\n      \n      const orders = await Order.findAll({\n        where: whereClause,\n        attributes: ['id']\n      });\n      \n      const results = [];\n      \n      // Cancel each order\n      for (const order of orders) {\n        try {\n          const result = await orderMatchingEngine.cancelOrder(order.id, userId);\n          results.push(result);\n        } catch (error) {\n          console.error(`Error cancelling order ${order.id}:`, error);\n          results.push({\n            orderId: order.id,\n            success: false,\n            error: error.message\n          });\n        }\n      }\n      \n      res.json({\n        success: true,\n        message: `Cancelled ${results.filter(r => r.success !== false).length} orders`,\n        data: results\n      });\n      \n    } catch (error) {\n      console.error('Error cancelling all orders:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get user orders\n   */\n  async getUserOrders(req, res) {\n    try {\n      const userId = req.user.id;\n      const {\n        symbol,\n        status,\n        side,\n        type,\n        limit = 50,\n        offset = 0,\n        startTime,\n        endTime\n      } = req.query;\n      \n      // Build where clause\n      const whereClause = { user_id: userId };\n      \n      if (symbol) {\n        whereClause.symbol = symbol.toUpperCase();\n      }\n      \n      if (status) {\n        whereClause.status = status;\n      }\n      \n      if (side) {\n        whereClause.side = side;\n      }\n      \n      if (type) {\n        whereClause.type = type;\n      }\n      \n      if (startTime || endTime) {\n        whereClause.created_at = {};\n        if (startTime) {\n          whereClause.created_at[Op.gte] = new Date(parseInt(startTime));\n        }\n        if (endTime) {\n          whereClause.created_at[Op.lte] = new Date(parseInt(endTime));\n        }\n      }\n      \n      // Get orders\n      const { count, rows: orders } = await Order.findAndCountAll({\n        where: whereClause,\n        limit: Math.min(parseInt(limit), 1000),\n        offset: parseInt(offset),\n        order: [['created_at', 'DESC']],\n        include: [{\n          model: Market,\n          attributes: ['symbol', 'base_currency', 'quote_currency']\n        }]\n      });\n      \n      res.json({\n        success: true,\n        data: {\n          orders,\n          total: count,\n          limit: parseInt(limit),\n          offset: parseInt(offset)\n        }\n      });\n      \n    } catch (error) {\n      console.error('Error getting user orders:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get order by ID\n   */\n  async getOrderById(req, res) {\n    try {\n      const { orderId } = req.params;\n      const userId = req.user.id;\n      \n      const order = await Order.findOne({\n        where: {\n          id: orderId,\n          user_id: userId\n        },\n        include: [{\n          model: Market,\n          attributes: ['symbol', 'base_currency', 'quote_currency']\n        }]\n      });\n      \n      if (!order) {\n        return res.status(404).json({\n          success: false,\n          message: 'Order not found'\n        });\n      }\n      \n      res.json({\n        success: true,\n        data: order\n      });\n      \n    } catch (error) {\n      console.error('Error getting order by ID:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get user trades\n   */\n  async getUserTrades(req, res) {\n    try {\n      const userId = req.user.id;\n      const {\n        symbol,\n        limit = 50,\n        offset = 0,\n        startTime,\n        endTime\n      } = req.query;\n      \n      // Build where clause\n      const whereClause = {\n        [Op.or]: [\n          { maker_user_id: userId },\n          { taker_user_id: userId }\n        ],\n        status: 'settled'\n      };\n      \n      if (startTime || endTime) {\n        whereClause.created_at = {};\n        if (startTime) {\n          whereClause.created_at[Op.gte] = new Date(parseInt(startTime));\n        }\n        if (endTime) {\n          whereClause.created_at[Op.lte] = new Date(parseInt(endTime));\n        }\n      }\n      \n      // Get trades\n      const { count, rows: trades } = await Trade.findAndCountAll({\n        where: whereClause,\n        limit: Math.min(parseInt(limit), 1000),\n        offset: parseInt(offset),\n        order: [['created_at', 'DESC']],\n        include: [{\n          model: Market,\n          attributes: ['symbol', 'base_currency', 'quote_currency'],\n          where: symbol ? { symbol: symbol.toUpperCase() } : {}\n        }]\n      });\n      \n      // Add user role (maker/taker) to each trade\n      const tradesWithRole = trades.map(trade => {\n        const tradeData = trade.toJSON();\n        tradeData.userRole = trade.maker_user_id === userId ? 'maker' : 'taker';\n        tradeData.userFee = trade.maker_user_id === userId ? trade.maker_fee : trade.taker_fee;\n        return tradeData;\n      });\n      \n      res.json({\n        success: true,\n        data: {\n          trades: tradesWithRole,\n          total: count,\n          limit: parseInt(limit),\n          offset: parseInt(offset)\n        }\n      });\n      \n    } catch (error) {\n      console.error('Error getting user trades:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get order book\n   */\n  async getOrderBook(req, res) {\n    try {\n      const { symbol } = req.params;\n      const { depth = 20 } = req.query;\n      \n      if (!symbol) {\n        return res.status(400).json({\n          success: false,\n          message: 'Symbol is required'\n        });\n      }\n      \n      // Validate market exists\n      const market = await Market.findOne({\n        where: { symbol: symbol.toUpperCase(), is_active: true }\n      });\n      \n      if (!market) {\n        return res.status(404).json({\n          success: false,\n          message: 'Market not found'\n        });\n      }\n      \n      // Get order book\n      const orderBook = await orderBookManager.getOrderBook(\n        symbol.toUpperCase(),\n        Math.min(parseInt(depth), 100)\n      );\n      \n      res.json({\n        success: true,\n        data: {\n          symbol: symbol.toUpperCase(),\n          ...orderBook,\n          timestamp: new Date().toISOString()\n        }\n      });\n      \n    } catch (error) {\n      console.error('Error getting order book:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get ticker\n   */\n  async getTicker(req, res) {\n    try {\n      const { symbol } = req.params;\n      \n      if (symbol) {\n        // Get single ticker\n        const market = await Market.findOne({\n          where: { symbol: symbol.toUpperCase(), is_active: true }\n        });\n        \n        if (!market) {\n          return res.status(404).json({\n            success: false,\n            message: 'Market not found'\n          });\n        }\n        \n        const ticker = await marketDataService.getTicker(symbol.toUpperCase());\n        \n        res.json({\n          success: true,\n          data: ticker\n        });\n      } else {\n        // Get all tickers\n        const tickers = await marketDataService.getAllTickers();\n        \n        res.json({\n          success: true,\n          data: tickers\n        });\n      }\n      \n    } catch (error) {\n      console.error('Error getting ticker:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get candlesticks\n   */\n  async getCandlesticks(req, res) {\n    try {\n      const { symbol } = req.params;\n      const {\n        interval,\n        limit = 100,\n        startTime,\n        endTime\n      } = req.query;\n      \n      if (!symbol || !interval) {\n        return res.status(400).json({\n          success: false,\n          message: 'Symbol and interval are required'\n        });\n      }\n      \n      // Validate market exists\n      const market = await Market.findOne({\n        where: { symbol: symbol.toUpperCase(), is_active: true }\n      });\n      \n      if (!market) {\n        return res.status(404).json({\n          success: false,\n          message: 'Market not found'\n        });\n      }\n      \n      // Get candlesticks\n      const candlesticks = await marketDataService.getCandlesticks(\n        symbol.toUpperCase(),\n        interval,\n        Math.min(parseInt(limit), 1000),\n        startTime ? parseInt(startTime) : null,\n        endTime ? parseInt(endTime) : null\n      );\n      \n      res.json({\n        success: true,\n        data: {\n          symbol: symbol.toUpperCase(),\n          interval,\n          candlesticks\n        }\n      });\n      \n    } catch (error) {\n      console.error('Error getting candlesticks:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get recent trades\n   */\n  async getRecentTrades(req, res) {\n    try {\n      const { symbol } = req.params;\n      const { limit = 50 } = req.query;\n      \n      if (!symbol) {\n        return res.status(400).json({\n          success: false,\n          message: 'Symbol is required'\n        });\n      }\n      \n      // Validate market exists\n      const market = await Market.findOne({\n        where: { symbol: symbol.toUpperCase(), is_active: true }\n      });\n      \n      if (!market) {\n        return res.status(404).json({\n          success: false,\n          message: 'Market not found'\n        });\n      }\n      \n      // Get recent trades\n      const trades = await Trade.findAll({\n        where: {\n          market_id: market.id,\n          status: 'settled'\n        },\n        limit: Math.min(parseInt(limit), 1000),\n        order: [['created_at', 'DESC']],\n        attributes: [\n          'id',\n          'price',\n          'quantity',\n          'side',\n          'created_at'\n        ]\n      });\n      \n      res.json({\n        success: true,\n        data: {\n          symbol: symbol.toUpperCase(),\n          trades\n        }\n      });\n      \n    } catch (error) {\n      console.error('Error getting recent trades:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get market statistics\n   */\n  async getMarketStats(req, res) {\n    try {\n      const stats = await marketDataService.getMarketStats();\n      \n      res.json({\n        success: true,\n        data: stats\n      });\n      \n    } catch (error) {\n      console.error('Error getting market stats:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get user balances\n   */\n  async getUserBalances(req, res) {\n    try {\n      const userId = req.user.id;\n      const { currency } = req.query;\n      \n      const whereClause = { user_id: userId };\n      \n      if (currency) {\n        whereClause.currency = currency.toLowerCase();\n      }\n      \n      const balances = await Balance.findAll({\n        where: whereClause,\n        order: [['currency', 'ASC']]\n      });\n      \n      res.json({\n        success: true,\n        data: balances\n      });\n      \n    } catch (error) {\n      console.error('Error getting user balances:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Get user wallets\n   */\n  async getUserWallets(req, res) {\n    try {\n      const userId = req.user.id;\n      const { currency, walletType } = req.query;\n      \n      const wallets = await walletService.getUserWallets(userId, currency, walletType);\n      \n      res.json({\n        success: true,\n        data: wallets\n      });\n      \n    } catch (error) {\n      console.error('Error getting user wallets:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Create new wallet\n   */\n  async createWallet(req, res) {\n    try {\n      const userId = req.user.id;\n      const { currency, walletType = 'hot' } = req.body;\n      \n      if (!currency) {\n        return res.status(400).json({\n          success: false,\n          message: 'Currency is required'\n        });\n      }\n      \n      const wallet = await walletService.createWallet(userId, currency, walletType);\n      \n      res.status(201).json({\n        success: true,\n        message: 'Wallet created successfully',\n        data: wallet\n      });\n      \n    } catch (error) {\n      console.error('Error creating wallet:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n  \n  /**\n   * Generate new address\n   */\n  async generateNewAddress(req, res) {\n    try {\n      const { walletId } = req.params;\n      const userId = req.user.id;\n      \n      // Verify wallet ownership\n      const wallet = await walletService.getUserWallets(userId);\n      const userWallet = wallet.find(w => w.id === parseInt(walletId));\n      \n      if (!userWallet) {\n        return res.status(404).json({\n          success: false,\n          message: 'Wallet not found'\n        });\n      }\n      \n      const newWallet = await walletService.generateNewAddress(walletId);\n      \n      res.status(201).json({\n        success: true,\n        message: 'New address generated successfully',\n        data: {\n          address: newWallet.address,\n          walletId: newWallet.id\n        }\n      });\n      \n    } catch (error) {\n      console.error('Error generating new address:', error);\n      res.status(500).json({\n        success: false,\n        message: error.message || 'Internal server error'\n      });\n    }\n  }\n}\n\nmodule.exports = new TradingController();"],"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","ignoreList":[]}