version: '3.8'

services:
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: cex-postgres
    environment:
      POSTGRES_DB: cex_db
      POSTGRES_USER: cex_user
      POSTGRES_PASSWORD: cex_password_2024
      POSTGRES_MULTIPLE_DATABASES: cex_trading,cex_wallet,cex_compliance
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - cex-network
    restart: unless-stopped

  # Redis - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: cex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cex-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_2024

  # MongoDB - Analytics & Logging
  mongodb:
    image: mongo:6
    container_name: cex-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: mongo_password_2024
      MONGO_INITDB_DATABASE: cex_analytics
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - cex-network
    restart: unless-stopped

  # Apache Kafka - Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: cex-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - cex-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: cex-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - cex-network
    restart: unless-stopped

  # Backend API (Node.js)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cex-backend
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cex_db
      DB_USER: cex_user
      DB_PASSWORD: cex_password_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password_2024
      MONGODB_URI: mongodb://mongo_user:mongo_password_2024@mongodb:27017/cex_analytics
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: jwt_super_secret_key_2024
      GOOGLE_CLIENT_ID: your_google_client_id
      GOOGLE_CLIENT_SECRET: your_google_client_secret
    depends_on:
      - postgres
      - redis
      - mongodb
      - kafka
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - cex-network
    restart: unless-stopped

  # Frontend (React.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cex-frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
      REACT_APP_WS_URL: ws://localhost:3001
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - cex-network
    restart: unless-stopped

  # Admin Panel (CodeIgniter 3 - PHP)
  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: cex-admin-panel
    ports:
      - "8080:80"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cex_db
      DB_USER: cex_user
      DB_PASSWORD: cex_password_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password_2024
    depends_on:
      - postgres
      - redis
    volumes:
      - ./admin-panel:/var/www/html
    networks:
      - cex-network
    restart: unless-stopped

  # Nginx - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: cex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - admin-panel
    networks:
      - cex-network
    restart: unless-stopped

  # Prometheus - Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cex-network
    restart: unless-stopped

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cex-grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: grafana_admin_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - cex-network
    restart: unless-stopped

  # ElasticSearch - Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cex-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cex-network
    restart: unless-stopped

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cex-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - cex-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  cex-network:
    driver: bridge